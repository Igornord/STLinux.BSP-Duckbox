diff -Nru docs/Multicom4_Changes.txt docs/Multicom4_Changes.txt
--- multicom-4.0.6/docs/Multicom4_Changes.txt	2012-03-09 18:05:09.000000000 +0000
+++ multicom-4.0.6/docs/Multicom4_Changes.txt	2012-07-02 15:34:14.000000000 +0100
@@ -1,3 +1,21 @@
+Significant changes in Multicom4 4.0.6 P3
+=========================================
+# stxh415 bsp updated to support both stxh415 and stxh416.
+# Added user space support to ics_cpu_init().
+# Added user space support to ICS_cpu_init().
+# Added user space support to ICS_cpu_term().
+# Added user space support to ICS_region_add().
+# Added user space support to ICS_region_remove().
+# Added user space support to MME_Term().
+
+Significant changes in Multicom4 4.0.6 P2
+=========================================
+# ICS_region_add modified to avoid physical address translation on ARM core for section mapped memory.
+
+Significant changes in Multicom4 4.0.6 P1
+=========================================
+# Added bsp support for fli7610.
+
 Significant changes in Multicom4 4.0.6
 ======================================
 # Support for ARM cortex-A9 based stxh415.
diff -Nru docs/Multicom4_Release.txt docs/Multicom4_Release.txt
--- multicom-4.0.6/docs/Multicom4_Release.txt	2012-03-09 18:05:09.000000000 +0000
+++ multicom-4.0.6/docs/Multicom4_Release.txt	2012-07-02 15:34:14.000000000 +0100
@@ -1,5 +1,5 @@
-Multicom 4 Release 4.0.6
-========================
+Multicom 4 Release 4.0.6 P3
+===========================
 This is the latest release of the Multicom 4 project.
 
 This release is fully functional and provides all of the original MME
@@ -127,4 +127,14 @@
     MME_RegisterTransport
     MME_DeregisterTransport
 
+3) Chapter 6 Inter-core system (ICS) API
+
+  List of the ICS API's supported on Linux user space:
+
+    ics_cpu_init
+    ICS_cpu_init
+    ICS_cpu_term
+    ICS_region_add
+    ICS_region_remove
+
 
diff -Nru linux/source/include/ics/ics_ioctl.h linux/source/include/ics/ics_ioctl.h
--- multicom-4.0.6/linux/source/include/ics/ics_ioctl.h	2012-03-09 18:05:59.000000000 +0000
+++ multicom-4.0.6/linux/source/include/ics/ics_ioctl.h	2012-07-02 15:35:47.000000000 +0100
@@ -62,6 +62,24 @@
 	ICS_ERROR			 err;
 } ics_cpu_reset_t;
 
+typedef struct ics_cpu_init {
+	/* IN */
+ ICS_UINT			 inittype;
+ ICS_UINT			 flags;
+	ICS_UINT			 cpuNum;
+	ICS_ULONG			cpuMask;
+ /* OUT */
+	ICS_ERROR			 err;
+} ics_cpu_init_t;
+
+
+typedef struct ics_cpu_term {
+	/* IN */
+ ICS_UINT			 flags;
+ /* OUT */
+	ICS_ERROR			 err;
+} ics_cpu_term_t;
+
 typedef struct ics_cpu_info {
 	/* IN */
         /* OUT */
@@ -80,6 +98,19 @@
 	ICS_ERROR			 err;
 } ics_cpu_bsp_t;
 
+typedef struct ics_user_region {
+	/* IN */
+ ICS_VOID   *map;
+ ICS_OFFSET paddr;
+ ICS_SIZE   size;
+ ICS_MEM_FLAGS mflags;
+	ICS_ULONG		cpuMask;
+ ICS_REGION region;
+ 
+ /* OUT */
+	ICS_ERROR			 err;
+} ics_user_region_t;
+
 #define ICS_IOC_MAGIC 			'I'
 
 #define ICS_IOC_LOADELFFILE		_IOWR(ICS_IOC_MAGIC, 0x1, ics_load_elf_file_t)
@@ -87,7 +118,11 @@
 #define ICS_IOC_CPURESET		_IOWR(ICS_IOC_MAGIC, 0x3, ics_cpu_reset_t)
 #define ICS_IOC_CPUINFO			_IOW (ICS_IOC_MAGIC, 0x4, ics_cpu_info_t)
 #define ICS_IOC_CPUBSP			_IOWR(ICS_IOC_MAGIC, 0x5, ics_cpu_bsp_t)
-#define ICS_IOC_CPULOOKUP			_IOWR(ICS_IOC_MAGIC, 0x6, ics_cpu_bsp_t)
+#define ICS_IOC_CPULOOKUP		_IOWR(ICS_IOC_MAGIC, 0x6, ics_cpu_bsp_t)
+#define ICS_IOC_CPUINIT			_IOW (ICS_IOC_MAGIC, 0x7, ics_cpu_init_t)
+#define ICS_IOC_CPUTERM			_IOW (ICS_IOC_MAGIC, 0x8, ics_cpu_term_t)
+#define ICS_IOC_REGIONADD		_IOW (ICS_IOC_MAGIC, 0x9, ics_user_region_t)
+#define ICS_IOC_REGIONREMOVE    _IOW (ICS_IOC_MAGIC, 0x10, ics_user_region_t)
 
 #endif /* _ICS_IOCTL_H */
 
diff -Nru linux/source/include/mme/mme_ioctl.h linux/source/include/mme/mme_ioctl.h
--- multicom-4.0.6/linux/source/include/mme/mme_ioctl.h	2012-03-09 18:05:59.000000000 +0000
+++ multicom-4.0.6/linux/source/include/mme/mme_ioctl.h	2012-07-02 15:35:48.000000000 +0100
@@ -140,6 +140,11 @@
 	MME_ERROR			 status;
 } mme_userinit_t;
 
+typedef struct mme_userterm {
+        /* OUT */
+	MME_ERROR			 status;
+} mme_userterm_t;
+
 #define MME_IOC_MAGIC 			'M'
 
 #define MME_IOC_ABORTCOMMAND		_IOWR(MME_IOC_MAGIC, 0x1, mme_abort_command_t)
@@ -157,6 +162,7 @@
 #define MME_IOC_SETTUNEABLE		_IOWR(MME_IOC_MAGIC, 0x23, mme_tuneables_t)
 #define MME_IOC_GETTUNEABLE		_IOWR(MME_IOC_MAGIC, 0x24, mme_tuneables_t)
 #define MME_IOC_MMEINIT       		_IOWR(MME_IOC_MAGIC, 0x25, mme_userinit_t)
+#define MME_IOC_MMETERM       		_IOWR(MME_IOC_MAGIC, 0x26, mme_userterm_t)
 
 #endif /* _MME_IOCTL_H */
 
diff -Nru linux/source/include/mme.h linux/source/include/mme.h
--- multicom-4.0.6/linux/source/include/mme.h	2012-03-09 18:05:59.000000000 +0000
+++ multicom-4.0.6/linux/source/include/mme.h	2012-07-02 15:35:48.000000000 +0100
@@ -50,10 +50,10 @@
 
 /* Version info */
 
-#define __MULTICOM_VERSION__		"4.0.6 "
+#define __MULTICOM_VERSION__		"4.0.6 P3"
 #define __MULTICOM_VERSION_MAJOR__	(4)
 #define __MULTICOM_VERSION_MINOR__	(0)
-#define __MULTICOM_VERSION_PATCH__	(6)
+#define __MULTICOM_VERSION_PATCH__	(63)
 
 /* Version macros like the ones found in Linux */
 #define MULTICOM_VERSION(a,b,c)		(((a) << 16) + ((b) << 8) + (c))
diff -Nru linux/source/src/bsp/fli7610/cores.c linux/source/src/bsp/fli7610/cores.c
--- multicom-4.0.6/linux/source/src/bsp/fli7610/cores.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/cores.c	2012-07-02 15:35:30.000000000 +0100
@@ -0,0 +1,119 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/*  
+ * 
+ */ 
+
+#include <bsp/_bsp.h>
+
+/* NMHDK/fli7610 */
+
+/*
+ * Logical CPU numbering
+ *
+ *    0 cortexa9	host (MASTER)
+ *    1 st40 			rt
+ *    2 st231 		video0
+ *    3 st231 		video1
+ *    4 st231 		audio
+ *    5 st231 		gp0
+ *    6 st231 		gp1
+ *
+ */
+
+/*
+ * BSP CPU info
+ *
+ * This table provides the complete list of all the CPUs
+ * on the SoC.
+ * Each CPU is assigned a logical CPU number which is
+ * used by ICS to identify it. Logical CPU 0 is assumed
+ * to be the MASTER.
+ *
+ * The order of the CPUs in this table must match that of
+ * the other BSP tables (e.g. reset.c) so that the correct
+ * CPU registers are used for load/reset
+ */
+struct bsp_cpu_info bsp_cpus[] =
+{
+  {
+    .name 		= "host",		/* host */
+    .type     = "cortexa9",
+    .num	  	= 0,			/* MASTER */
+    .flags		= 0,
+  },
+
+  {
+    .name 		= "rt",			/* real time */
+    .type     = "st40",
+    .num		  = 1,			/* st40 */
+    .flags		= 0,
+  },
+
+  {
+    .name 		= "video0",		/* video */
+    .type     = "st231",
+    .num	  	= 2,
+    .flags		= 0,
+  },
+
+  {
+    .name 		= "video1", /* video 1 */
+    .type     = "st231",
+    .num		  = 3,
+    .flags		= 0,
+  },
+
+  {
+    .name 	  = "audio",/* audio */
+    .type     = "st231",
+    .num		  = 4,
+    .flags		= 0,
+  },
+
+  {
+    .name 		= "gp0",	 /* general purpose 0 */
+    .type     = "st231",
+    .num		  = 5,
+    .flags		= 0,
+  },
+
+  {
+    .name 		= "gp1",		/* general purpose 1 */
+    .type     = "st231",
+    .num		  = 6,
+    .flags		= 0,
+  },
+
+};
+
+unsigned int bsp_cpu_count = sizeof(bsp_cpus)/sizeof(bsp_cpus[0]);
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru linux/source/src/bsp/fli7610/cortexa9/fli7610reg.h linux/source/src/bsp/fli7610/cortexa9/fli7610reg.h
--- multicom-4.0.6/linux/source/src/bsp/fli7610/cortexa9/fli7610reg.h	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/cortexa9/fli7610reg.h	2012-07-02 15:35:46.000000000 +0100
@@ -0,0 +1,65 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/*
+ */
+
+/*
+ */
+
+#ifndef __FLI7610REG_H
+#define __FLI7610REG_H
+
+#include "sh4regtype.h"
+
+/*----------------------------------------------------------------------------*/
+
+/*
+ * Base addresses for control register banks.
+ */
+
+
+/* FLI7610 control registers */
+#ifndef FLI7610_SYSCONF_BANK0_REGS_BASE
+#define FLI7610_SYSCONF_BANK0_REGS_BASE 0xfd320000
+#endif
+
+/*----------------------------------------------------------------------------*/
+
+#include "st40reg.h"
+
+/*
+ * FLI7610 SYSCFG control registers
+ */
+
+#define FLI7610_SYSCONF_SYS_CFG00 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0004)
+#define FLI7610_SYSCONF_SYS_CFG01 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0008)
+#define FLI7610_SYSCONF_SYS_CFG02 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x000c)
+#define FLI7610_SYSCONF_SYS_CFG03 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0010)
+#define FLI7610_SYSCONF_SYS_CFG04 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0014)
+#define FLI7610_SYSCONF_SYS_CFG05 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0018)
+#define FLI7610_SYSCONF_SYS_CFG06 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x001c)
+#define FLI7610_SYSCONF_SYS_CFG07 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0020)
+#define FLI7610_SYSCONF_SYS_CFG08 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0024)
+
+#endif /* __FLI7610REG_H */
diff -Nru linux/source/src/bsp/fli7610/cortexa9/flix7610reg.h linux/source/src/bsp/fli7610/cortexa9/flix7610reg.h
--- multicom-4.0.6/linux/source/src/bsp/fli7610/cortexa9/flix7610reg.h	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/cortexa9/flix7610reg.h	2012-07-02 15:35:46.000000000 +0100
@@ -0,0 +1,337 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/*
+ */
+
+/*
+ */
+
+#ifndef __FLIX7610REG_H
+#define __FLIX7610REG_H
+
+#include "sh4regtype.h"
+
+/*----------------------------------------------------------------------------*/
+
+/*
+ * Base addresses for control register banks.
+ */
+
+/* Generic SH4 control registers */
+#ifndef SH4_TMU_REGS_BASE
+#define SH4_TMU_REGS_BASE 0xffd80000
+#endif
+
+
+/* FLI7610 control registers */
+#ifndef FLIX7610_SYSCONF0_REGS_BASE
+#define FLIX7610_SYSCONF0_REGS_BASE 0xfd320000
+#endif
+
+#ifndef FLIX7610_SYSCONF1_REGS_BASE
+#define FLIX7610_SYSCONF1_REGS_BASE 0xfd690000
+#endif
+
+#ifndef FLIX7610_SYSCONF2_REGS_BASE
+#define FLIX7610_SYSCONF2_REGS_BASE 0xfd6a0000
+#endif
+
+#ifndef FLIX7610_SYSCONF3_REGS_BASE
+#define FLIX7610_SYSCONF3_REGS_BASE 0xfdde0000
+#endif
+
+#ifndef FLIX7610_SYSCONF4_REGS_BASE
+#define FLIX7610_SYSCONF4_REGS_BASE 0xfddf0000
+#endif
+
+
+
+#include "st40reg.h"
+
+
+
+/* SYSCONF Bank 0 */
+#define FLIX7610_SYSCONF0_SYS_STA00 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF0_SYS_CFG00 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF0_SYS_CFG01 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF0_SYS_CFG02 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF0_SYS_CFG03 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF0_SYS_CFG04 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF0_SYS_CFG05 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF0_SYS_CFG06 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF0_SYS_CFG07 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF0_SYS_CFG08 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF0_SYS_CFG12 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF0_SYS_CFG13 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF0_SYS_CFG14 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0030)
+
+/* SYSCONF Bank 1 */
+#define FLIX7610_SYSCONF1_SYS_STA00 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF1_SYS_STA01 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF1_SYS_STA02 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF1_SYS_STA03 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF1_SYS_STA04 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF1_SYS_STA05 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF1_SYS_STA06 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF1_SYS_STA07 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF1_SYS_STA08 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF1_SYS_STA09 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF1_SYS_STA10 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF1_SYS_STA11 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF1_SYS_STA12 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0030)
+#define FLIX7610_SYSCONF1_SYS_STA13 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0034)
+#define FLIX7610_SYSCONF1_SYS_STA14 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0038)
+#define FLIX7610_SYSCONF1_SYS_CFG00 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x003C)
+#define FLIX7610_SYSCONF1_SYS_CFG01 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0040)
+#define FLIX7610_SYSCONF1_SYS_CFG02 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0044)
+#define FLIX7610_SYSCONF1_SYS_CFG03 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0048)
+#define FLIX7610_SYSCONF1_SYS_CFG04 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x004C)
+#define FLIX7610_SYSCONF1_SYS_CFG05 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0050)
+#define FLIX7610_SYSCONF1_SYS_CFG06 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0054)
+#define FLIX7610_SYSCONF1_SYS_CFG07 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0058)
+#define FLIX7610_SYSCONF1_SYS_CFG08 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x005C)
+#define FLIX7610_SYSCONF1_SYS_CFG09 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0060)
+#define FLIX7610_SYSCONF1_SYS_CFG10 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0064)
+#define FLIX7610_SYSCONF1_SYS_CFG11 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0068)
+#define FLIX7610_SYSCONF1_SYS_CFG12 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x006C)
+#define FLIX7610_SYSCONF1_SYS_CFG13 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0070)
+#define FLIX7610_SYSCONF1_SYS_CFG14 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0074)
+#define FLIX7610_SYSCONF1_SYS_CFG15 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0078)
+#define FLIX7610_SYSCONF1_SYS_CFG16 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x007C)
+#define FLIX7610_SYSCONF1_SYS_CFG17 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0080)
+#define FLIX7610_SYSCONF1_SYS_CFG18 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0084)
+#define FLIX7610_SYSCONF1_SYS_CFG19 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0088)
+#define FLIX7610_SYSCONF1_SYS_CFG20 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x008C)
+#define FLIX7610_SYSCONF1_SYS_CFG21 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0090)
+
+/* SYSCONF Bank 2 */
+#define FLIX7610_SYSCONF2_SYS_CFG00 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF2_SYS_CFG01 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF2_SYS_CFG02 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF2_SYS_CFG03 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF2_SYS_CFG04 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF2_SYS_CFG05 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF2_SYS_CFG06 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF2_SYS_CFG07 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF2_SYS_CFG08 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF2_SYS_CFG09 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF2_SYS_CFG10 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF2_SYS_CFG11 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF2_SYS_CFG12 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0030)
+#define FLIX7610_SYSCONF2_SYS_CFG13 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0034)
+#define FLIX7610_SYSCONF2_SYS_CFG14 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0038)
+#define FLIX7610_SYSCONF2_SYS_CFG15 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x003C)
+#define FLIX7610_SYSCONF2_SYS_CFG16 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0040)
+#define FLIX7610_SYSCONF2_SYS_CFG17 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0044)
+#define FLIX7610_SYSCONF2_SYS_CFG18 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0048)
+#define FLIX7610_SYSCONF2_SYS_CFG19 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x004C)
+#define FLIX7610_SYSCONF2_SYS_CFG20 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0050)
+#define FLIX7610_SYSCONF2_SYS_CFG21 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0054)
+#define FLIX7610_SYSCONF2_SYS_CFG22 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0058)
+#define FLIX7610_SYSCONF2_SYS_CFG23 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x005c)
+#define FLIX7610_SYSCONF2_SYS_CFG24 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0060)
+#define FLIX7610_SYSCONF2_SYS_CFG25 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0064)
+#define FLIX7610_SYSCONF2_SYS_CFG26 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0068)
+#define FLIX7610_SYSCONF2_SYS_CFG27 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x006c)
+#define FLIX7610_SYSCONF2_SYS_CFG28 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0070)
+#define FLIX7610_SYSCONF2_SYS_CFG29 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0074)
+#define FLIX7610_SYSCONF2_SYS_CFG30 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0078)
+#define FLIX7610_SYSCONF2_SYS_CFG31 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x007c)
+#define FLIX7610_SYSCONF2_SYS_CFG32 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0080)
+#define FLIX7610_SYSCONF2_SYS_CFG33 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0084)
+#define FLIX7610_SYSCONF2_SYS_CFG34 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0088)
+#define FLIX7610_SYSCONF2_SYS_CFG35 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x008c)
+#define FLIX7610_SYSCONF2_SYS_CFG36 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0090)
+#define FLIX7610_SYSCONF2_SYS_CFG37 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0094)
+#define FLIX7610_SYSCONF2_SYS_CFG38 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0098)
+#define FLIX7610_SYSCONF2_SYS_CFG39 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x009c)
+#define FLIX7610_SYSCONF2_SYS_CFG40 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00a0)
+#define FLIX7610_SYSCONF2_SYS_CFG41 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00a4)
+#define FLIX7610_SYSCONF2_SYS_CFG42 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00a8)
+#define FLIX7610_SYSCONF2_SYS_CFG43 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00ac)
+#define FLIX7610_SYSCONF2_SYS_CFG44 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00b0)
+#define FLIX7610_SYSCONF2_SYS_CFG45 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00b4)
+#define FLIX7610_SYSCONF2_SYS_CFG46 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00b8)
+#define FLIX7610_SYSCONF2_SYS_CFG47 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00bc)
+#define FLIX7610_SYSCONF2_SYS_CFG48 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00c0)
+#define FLIX7610_SYSCONF2_SYS_CFG49 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00c4)
+#define FLIX7610_SYSCONF2_SYS_CFG50 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00c8)
+#define FLIX7610_SYSCONF2_SYS_CFG51 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00cc)
+#define FLIX7610_SYSCONF2_SYS_CFG52 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00d0)
+#define FLIX7610_SYSCONF2_SYS_CFG53 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00d4)
+#define FLIX7610_SYSCONF2_SYS_CFG54 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00d8)
+#define FLIX7610_SYSCONF2_SYS_CFG55 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00dc)
+#define FLIX7610_SYSCONF2_SYS_CFG56 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00E0)
+#define FLIX7610_SYSCONF2_SYS_STA00 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00E4)
+#define FLIX7610_SYSCONF2_SYS_STA01 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00E8)
+#define FLIX7610_SYSCONF2_SYS_STA02 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00EC)
+#define FLIX7610_SYSCONF2_SYS_STA03 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00F0)
+#define FLIX7610_SYSCONF2_SYS_STA04 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00F4)
+#define FLIX7610_SYSCONF2_SYS_STA05 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00F8)
+
+/* SYSCONF Bank 3 */
+#define FLIX7610_SYSCONF3_SYS_CFG600 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF3_SYS_CFG601 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF3_SYS_CFG602 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF3_SYS_CFG603 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF3_SYS_CFG604 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF3_SYS_CFG605 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF3_SYS_CFG606 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF3_SYS_CFG607 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF3_SYS_CFG608 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF3_SYS_CFG609 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF3_SYS_CFG610 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF3_SYS_CFG611 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF3_SYS_CFG612 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0030)
+#define FLIX7610_SYSCONF3_SYS_CFG613 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0034)
+#define FLIX7610_SYSCONF3_SYS_CFG614 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0038)
+#define FLIX7610_SYSCONF3_SYS_CFG615 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x003C)
+#define FLIX7610_SYSCONF3_SYS_CFG616 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0040)
+#define FLIX7610_SYSCONF3_SYS_CFG617 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0044)
+#define FLIX7610_SYSCONF3_SYS_CFG618 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0048)
+#define FLIX7610_SYSCONF3_SYS_CFG619 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x004C)
+#define FLIX7610_SYSCONF3_SYS_CFG620 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0050)
+#define FLIX7610_SYSCONF3_SYS_CFG621 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0054)
+#define FLIX7610_SYSCONF3_SYS_CFG622 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0058)
+#define FLIX7610_SYSCONF3_SYS_CFG623 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x005c)
+#define FLIX7610_SYSCONF3_SYS_CFG624 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0060)
+#define FLIX7610_SYSCONF3_SYS_CFG625 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0064)
+#define FLIX7610_SYSCONF3_SYS_CFG626 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0068)
+#define FLIX7610_SYSCONF3_SYS_CFG627 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x006c)
+#define FLIX7610_SYSCONF3_SYS_CFG628 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0070)
+#define FLIX7610_SYSCONF3_SYS_CFG629 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0074)
+#define FLIX7610_SYSCONF3_SYS_CFG630 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0078)
+#define FLIX7610_SYSCONF3_SYS_CFG631 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x007c)
+#define FLIX7610_SYSCONF3_SYS_CFG632 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0080)
+#define FLIX7610_SYSCONF3_SYS_CFG633 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0084)
+#define FLIX7610_SYSCONF3_SYS_CFG634 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0088)
+#define FLIX7610_SYSCONF3_SYS_CFG635 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x008c)
+#define FLIX7610_SYSCONF3_SYS_CFG636 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0090)
+#define FLIX7610_SYSCONF3_SYS_CFG637 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0094)
+#define FLIX7610_SYSCONF3_SYS_CFG638 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0098)
+#define FLIX7610_SYSCONF3_SYS_CFG639 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x009c)
+#define FLIX7610_SYSCONF3_SYS_CFG640 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00a0)
+#define FLIX7610_SYSCONF3_SYS_CFG641 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00a4)
+#define FLIX7610_SYSCONF3_SYS_CFG642 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00a8)
+#define FLIX7610_SYSCONF3_SYS_CFG643 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00ac)
+#define FLIX7610_SYSCONF3_SYS_CFG644 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00b0)
+#define FLIX7610_SYSCONF3_SYS_CFG645 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00b4)
+#define FLIX7610_SYSCONF3_SYS_CFG646 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00b8)
+#define FLIX7610_SYSCONF3_SYS_CFG647 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00bc)
+#define FLIX7610_SYSCONF3_SYS_CFG648 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00c0)
+#define FLIX7610_SYSCONF3_SYS_CFG649 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00c4)
+#define FLIX7610_SYSCONF3_SYS_CFG650 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00c8)
+#define FLIX7610_SYSCONF3_SYS_CFG651 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00cc)
+#define FLIX7610_SYSCONF3_SYS_CFG652 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00d0)
+#define FLIX7610_SYSCONF3_SYS_CFG653 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00d4)
+#define FLIX7610_SYSCONF3_SYS_CFG654 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00d8)
+#define FLIX7610_SYSCONF3_SYS_CFG655 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00dc)
+#define FLIX7610_SYSCONF3_SYS_CFG656 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00E0)
+#define FLIX7610_SYSCONF3_SYS_CFG657 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00E4)
+#define FLIX7610_SYSCONF3_SYS_CFG658 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00E8)
+#define FLIX7610_SYSCONF3_SYS_CFG659 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00EC)
+#define FLIX7610_SYSCONF3_SYS_CFG660 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00F0)
+#define FLIX7610_SYSCONF3_SYS_CFG661 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00F4)
+#define FLIX7610_SYSCONF3_SYS_CFG662 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00F8)
+#define FLIX7610_SYSCONF3_SYS_CFG663 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00FC)
+#define FLIX7610_SYSCONF3_SYS_CFG664 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0100)
+
+/* SYSCONF Bank 4 */
+#define FLIX7610_SYSCONF4_SYS_CFG00 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF4_SYS_CFG01 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF4_SYS_CFG02 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF4_SYS_CFG03 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF4_SYS_CFG04 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF4_SYS_CFG05 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF4_SYS_CFG06 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF4_SYS_CFG07 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF4_SYS_CFG08 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF4_SYS_CFG09 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF4_SYS_CFG10 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF4_SYS_CFG11 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF4_SYS_CFG12 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0030)
+#define FLIX7610_SYSCONF4_SYS_CFG13 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0034)
+#define FLIX7610_SYSCONF4_SYS_CFG14 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0038)
+#define FLIX7610_SYSCONF4_SYS_CFG15 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x003C)
+#define FLIX7610_SYSCONF4_SYS_CFG16 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0040)
+#define FLIX7610_SYSCONF4_SYS_CFG17 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0044)
+#define FLIX7610_SYSCONF4_SYS_CFG18 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0048)
+#define FLIX7610_SYSCONF4_SYS_CFG19 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x004C)
+#define FLIX7610_SYSCONF4_SYS_CFG20 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0050)
+#define FLIX7610_SYSCONF4_SYS_CFG21 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0054)
+#define FLIX7610_SYSCONF4_SYS_CFG22 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0058)
+#define FLIX7610_SYSCONF4_SYS_CFG23 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x005c)
+#define FLIX7610_SYSCONF4_SYS_CFG24 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0060)
+#define FLIX7610_SYSCONF4_SYS_CFG25 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0064)
+#define FLIX7610_SYSCONF4_SYS_CFG26 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0068)
+#define FLIX7610_SYSCONF4_SYS_CFG27 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x006c)
+#define FLIX7610_SYSCONF4_SYS_CFG28 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0070)
+#define FLIX7610_SYSCONF4_SYS_CFG29 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0074)
+#define FLIX7610_SYSCONF4_SYS_CFG30 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0078)
+#define FLIX7610_SYSCONF4_SYS_CFG31 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x007c)
+#define FLIX7610_SYSCONF4_SYS_CFG32 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0080)
+#define FLIX7610_SYSCONF4_SYS_CFG33 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0084)
+#define FLIX7610_SYSCONF4_SYS_CFG34 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0088)
+#define FLIX7610_SYSCONF4_SYS_CFG35 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x008c)
+#define FLIX7610_SYSCONF4_SYS_CFG36 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0090)
+#define FLIX7610_SYSCONF4_SYS_CFG37 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0094)
+#define FLIX7610_SYSCONF4_SYS_CFG38 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0098)
+#define FLIX7610_SYSCONF4_SYS_CFG39 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x009c)
+#define FLIX7610_SYSCONF4_SYS_CFG40 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00a0)
+#define FLIX7610_SYSCONF4_SYS_CFG41 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00a4)
+#define FLIX7610_SYSCONF4_SYS_CFG42 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00a8)
+#define FLIX7610_SYSCONF4_SYS_CFG43 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00ac)
+#define FLIX7610_SYSCONF4_SYS_CFG44 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00b0)
+#define FLIX7610_SYSCONF4_SYS_CFG45 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00b4)
+#define FLIX7610_SYSCONF4_SYS_CFG46 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00b8)
+#define FLIX7610_SYSCONF4_SYS_CFG47 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00bc)
+#define FLIX7610_SYSCONF4_SYS_CFG48 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00c0)
+#define FLIX7610_SYSCONF4_SYS_CFG49 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00c4)
+#define FLIX7610_SYSCONF4_SYS_CFG50 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00c8)
+#define FLIX7610_SYSCONF4_SYS_CFG51 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00cc)
+#define FLIX7610_SYSCONF4_SYS_CFG52 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00d0)
+#define FLIX7610_SYSCONF4_SYS_CFG53 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00d4)
+#define FLIX7610_SYSCONF4_SYS_CFG54 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00d8)
+#define FLIX7610_SYSCONF4_SYS_CFG55 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00dc)
+#define FLIX7610_SYSCONF4_SYS_CFG56 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00E0)
+#define FLIX7610_SYSCONF4_SYS_CFG57 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00E4)
+#define FLIX7610_SYSCONF4_SYS_CFG58 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00E8)
+#define FLIX7610_SYSCONF4_SYS_CFG59 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00Ec)
+#define FLIX7610_SYSCONF4_SYS_CFG60 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00F0)
+#define FLIX7610_SYSCONF4_SYS_CFG61 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00F4)
+#define FLIX7610_SYSCONF4_SYS_CFG62 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00F8)
+#define FLIX7610_SYSCONF4_SYS_CFG63 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00FC)
+#define FLIX7610_SYSCONF4_SYS_CFG64 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0100)
+#define FLIX7610_SYSCONF4_SYS_CFG65 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0104)
+#define FLIX7610_SYSCONF4_SYS_CFG66 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0108)
+#define FLIX7610_SYSCONF4_SYS_CFG67 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x010c)
+#define FLIX7610_SYSCONF4_SYS_CFG68 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0110)
+#define FLIX7610_SYSCONF4_SYS_CFG69 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0114)
+#define FLIX7610_SYSCONF4_SYS_CFG70 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0118)
+#define FLIX7610_SYSCONF4_SYS_STA00 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x011C)
+#define FLIX7610_SYSCONF4_SYS_STA01 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0120)
+#define FLIX7610_SYSCONF4_SYS_STA02 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0124)
+#define FLIX7610_SYSCONF4_SYS_STA03 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0128)
+
+#endif /* __FLIX7610REG_H */
diff -Nru linux/source/src/bsp/fli7610/cortexa9/mbox.c linux/source/src/bsp/fli7610/cortexa9/mbox.c
--- multicom-4.0.6/linux/source/src/bsp/fli7610/cortexa9/mbox.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/cortexa9/mbox.c	2012-07-02 15:35:30.000000000 +0100
@@ -0,0 +1,184 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ * fli7610 arm cortexa9
+ */
+
+/*
+ * Mailbox allocation
+ * MBOX1_0x000 -> a9     [IRQ 1]
+ * MBOX0_0x100 -> rt     [IRQ 0]
+ * MBOX4_0x100 -> video0 [IRQ 0]
+ * MBOX2_0x100 -> video1 [IRQ 0]
+ * MBOX1_0x100 -> audio  [IRQ 0]
+ * MBOX5_0x100 -> gp0    [IRQ 0]
+ * MBOX3_0x100 -> gp1    [IRQ 0]
+
+ * MBOX0_0x000 ->  ???
+ * MBOX2_0x000 ->  ???
+ * MBOX3_0x000 ->  ???
+ * MBOX4_0x000 ->  ???
+ * MBOX5_0x000 ->  ???
+ * MBOX6_0x000 ->  ???
+ * MBOX6_0x100 ->  ???
+ * MBOX7_0x000 ->  ???
+ * MBOX7_0x100 ->  ???
+ *
+ * IRQ line naming
+ * IRQ0 ---> ST40_IRQ
+ * IRQ1 ---> ST200_IRQ
+ */
+
+#include <bsp/_bsp.h>
+
+#define MBOX0_ADDR	0xfde0e000
+#define MBOX1_ADDR	0xfde0e800
+#define MBOX2_ADDR	0xfde0f000
+#define MBOX3_ADDR	0xfde0f800
+#define MBOX4_ADDR	0xfde10000
+#define MBOX5_ADDR	0xfde10800
+#define MBOX6_ADDR	0xfde11000
+#define MBOX7_ADDR	0xfde11800
+
+#ifdef __os21__
+#error OS21 not supported on fli7610 arm cortexa9 core
+#endif
+
+#ifdef __KERNEL__
+
+/* Based on an IRQ base of 32 + offsets in ADCS xxxxx (Table xxxxx) */
+#define IRQ_BASE	(32)
+#define MBOX0_IRQ1 (IRQ_BASE + 1)
+#define MBOX1_IRQ1	(IRQ_BASE + 2)
+#define MBOX2_IRQ1	(IRQ_BASE + 3)
+#define MBOX3_IRQ1	(IRQ_BASE + 4)
+#define MBOX4_IRQ1	(IRQ_BASE + 5)
+#define MBOX5_IRQ1	(IRQ_BASE + 6)
+#define MBOX6_IRQ1	(IRQ_BASE + 7)
+#define MBOX7_IRQ1	(IRQ_BASE + 8)
+
+#endif
+
+struct bsp_mbox_regs bsp_mailboxes[] =
+{
+  {
+    .base	= (void *) (MBOX0_ADDR), 								/*  Mailbox (MBOX0.1) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX0_ADDR+0x100), 		/* Mailbox (MBOX0.2) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX1_ADDR), 							/* Mailbox (MBOX1.1) */
+    .interrupt	= MBOX1_IRQ1,																/* *WE* own this one */
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX1_ADDR+0x100), 		/* Mailbox (MBOX1.2) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+
+  { .base	= (void *) (MBOX2_ADDR),									/* Mailbox (MBOX2.1) */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  { .base	= (void *) (MBOX2_ADDR+0x100),			/* Mailbox (MBOX2.2) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+
+  { .base	= (void *) (MBOX3_ADDR),								/* Mailbox (MBOX3.1) */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  { .base	= (void *) (MBOX3_ADDR+0x100),		/* Mailbox (MBOX3.2) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+
+  {
+    .base	= (void *) (MBOX4_ADDR), 							/* Mailbox (MBOX4.1) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX4_ADDR+0x100), 	/* Mailbox (MBOX4.2) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+
+  {
+    .base	= (void *) (MBOX5_ADDR), 							/* Mailbox (MBOX5.1) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX5_ADDR+0x100), 	/* Mailbox (MBOX5.2) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+
+  { .base	= (void *) (MBOX6_ADDR),								/* Mailbox (MBOX6.1) */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  { .base	= (void *) (MBOX6_ADDR+0x100),		/* Mailbox (MBOX6.2) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+
+  { .base	= (void *) (MBOX7_ADDR),								/* Mailbox (MBOX7.1) */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  { .base	= (void *) (MBOX7_ADDR+0x100),		/* Mailbox (MBOX7.2) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+};
+
+unsigned int bsp_mailbox_count = sizeof(bsp_mailboxes)/sizeof(bsp_mailboxes[0]);
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru linux/source/src/bsp/fli7610/cortexa9/name.c linux/source/src/bsp/fli7610/cortexa9/name.c
--- multicom-4.0.6/linux/source/src/bsp/fli7610/cortexa9/name.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/cortexa9/name.c	2012-07-02 15:35:30.000000000 +0100
@@ -0,0 +1,42 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ * sti7200 ST40
+ */
+
+#include <bsp/_bsp.h>
+
+const char * bsp_cpu_name = "host";
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru linux/source/src/bsp/fli7610/cortexa9/reset.c linux/source/src/bsp/fli7610/cortexa9/reset.c
--- multicom-4.0.6/linux/source/src/bsp/fli7610/cortexa9/reset.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/cortexa9/reset.c	2012-07-02 15:35:30.000000000 +0100
@@ -0,0 +1,87 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/* 
+ * 
+ */ 
+
+#include <bsp/_bsp.h>
+
+#include "flix7610reg.h"
+
+struct bsp_reg_mask bsp_sys_reset_bypass[] = {
+  {FLIX7610_SYSCONF3_SYS_CFG629, ~0, (1 << 1)},
+  {FLIX7610_SYSCONF3_SYS_CFG629, ~0, (1 << 5)}, 				/* enable BART for RT core */
+//  {FLIX7610_SYSCONF3_SYS_CFG629, ~(0xF >> 18), (0x44000000 >> 18)},	/* RT core BART loads from 0x44000000) */
+  {FLIX7610_SYSCONF3_SYS_CFG629, ~(0xF >> 18), (0x80000000 >> 18)},	/* RT core BART loads from 0x44000000) */
+};
+
+/* Size of the above array */
+unsigned int bsp_sys_reset_bypass_count = sizeof(bsp_sys_reset_bypass)/sizeof(bsp_sys_reset_bypass[0]);
+
+struct bsp_boot_address_reg bsp_sys_boot_registers[] = {
+  {FLIX7610_SYSCONF3_SYS_CFG647, 0, 0x00000007},   /* host 														*/
+  {FLIX7610_SYSCONF3_SYS_CFG648, 0, 0xFFFFFFFE},   /* rt 																*/
+  {FLIX7610_SYSCONF3_SYS_CFG649, 0, 0xFFFFFFE0},   /* video_0								 			*/
+  {FLIX7610_SYSCONF3_SYS_CFG652, 0, 0xFFFFFFE0},   /* video_1 											*/
+  {FLIX7610_SYSCONF3_SYS_CFG650, 0, 0xFFFFFFE0},   /* audio_0 -aud 						*/
+  {FLIX7610_SYSCONF3_SYS_CFG651, 0, 0xFFFFFFE0},   /* audio_1 -sec0 -gp0	*/
+  {FLIX7610_SYSCONF3_SYS_CFG653, 0, 0xFFFFFFE0},   /* sec1-gp1										 */
+};
+/* Size of the above array */
+unsigned int bsp_sys_boot_registers_count = sizeof(bsp_sys_boot_registers)/sizeof(bsp_sys_boot_registers[0]);
+
+/* FLIX7610 reset bits are active low - mask and ~mask will be used and value
+   should be 0.
+ */
+struct bsp_reg_mask bsp_sys_reset_registers[] = {
+  {FLIX7610_SYSCONF3_SYS_CFG644, ~(1 << 0), 0},	 /* host 														*/
+  {FLIX7610_SYSCONF3_SYS_CFG644, ~(1 << 2), 0},	 /* rt 																*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 27), 0},	/* video_0 											*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 29), 0},	/* video_1 											*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 26), 0},	/* audio_0 -aud 						*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 28), 0},	/* audio_1 -sec0 -gp0	*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 30), 0},	/* sec1-gp1										 */
+};
+/* Size of the above array */
+unsigned int bsp_sys_reset_registers_count = sizeof(bsp_sys_reset_registers)/sizeof(bsp_sys_reset_registers[0]);
+
+/* FLIX7610 has no boot enables - purely controlled by reset bits */
+struct bsp_reg_mask bsp_sys_boot_enable[] = {
+  {NULL, 0, 0},
+  {NULL, 0, 0},
+  {NULL, 0, 0},
+  {NULL, 0, 0},
+  {NULL, 0, 0},
+  {NULL, 0, 0},
+  {NULL, 0, 0}
+};
+
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru linux/source/src/bsp/fli7610/st231/audio/mbox.c linux/source/src/bsp/fli7610/st231/audio/mbox.c
--- multicom-4.0.6/linux/source/src/bsp/fli7610/st231/audio/mbox.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/st231/audio/mbox.c	2012-07-02 15:35:30.000000000 +0100
@@ -0,0 +1,184 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * NMHDK/fli7610 audio
+ */
+
+/*
+ * Mailbox allocation
+ * MBOX1_0x000 -> a9     [IRQ 1]
+ * MBOX0_0x100 -> rt     [IRQ 0]
+ * MBOX4_0x100 -> video0 [IRQ 0]
+ * MBOX2_0x100 -> video1 [IRQ 0]
+ * MBOX1_0x100 -> audio  [IRQ 0]
+ * MBOX5_0x100 -> gp0    [IRQ 0]
+ * MBOX3_0x100 -> gp1    [IRQ 0]
+
+ * MBOX0_0x000 ->  ???
+ * MBOX2_0x000 ->  ???
+ * MBOX3_0x000 ->  ???
+ * MBOX4_0x000 ->  ???
+ * MBOX5_0x000 ->  ???
+ * MBOX6_0x000 ->  ???
+ * MBOX6_0x100 ->  ???
+ * MBOX7_0x000 ->  ???
+ * MBOX7_0x100 ->  ???
+ *
+ * IRQ line naming
+ * IRQ0 ---> ST40_IRQ
+ * IRQ1 ---> ST200_IRQ
+ */
+
+#include <bsp/_bsp.h>
+
+#define MBOX0_0_ADDR		0xfde0e000
+#define MBOX1_0_ADDR		0xfde0e800
+#define MBOX1_1_ADDR		0xfde0e900
+#define MBOX2_0_ADDR		0xfde0f000
+#define MBOX3_0_ADDR		0xfde0f800
+#define MBOX4_0_ADDR		0xfde10000
+#define MBOX5_0_ADDR		0xfde10800
+#define MBOX6_0_ADDR		0xfde11000
+#define MBOX7_0_ADDR		0xfde11800
+
+
+#ifdef __os21__
+#include <os21.h>
+/* #include <os21/st40/fli7610.h> */
+extern interrupt_name_t OS21_INTERRUPT_MAILBOX_1_1; //MBOX1 ST40_IRQ
+#define MBOX1_IRQ0	((unsigned int) &OS21_INTERRUPT_MAILBOX_1_1)
+#else
+#error Invalid OS type.
+#endif
+
+
+struct bsp_mbox_regs bsp_mailboxes[] =
+{
+  {
+    .base	= (void *) (MBOX0_0_ADDR), 		    /* MBOX0.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX0_0_ADDR+0x100), 		/* MBOX0.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX1_0_ADDR), 		    /* MBOX1.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX1_0_ADDR+0x100), 		/* MBOX1.1 Mailbox */
+    .interrupt	= MBOX1_IRQ0,									      /* We own this one */
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX2_0_ADDR), 		    /* MBOX2.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX2_0_ADDR+0x100),		 /* MBOX2.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX3_0_ADDR),							/* MBOX3.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX3_0_ADDR+0x100),		 /* MBOX3.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX4_0_ADDR),		      /* MBOX4.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX4_0_ADDR+0x100),		  /* MBOX4.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX5_0_ADDR),		      /* MBOX5.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX5_0_ADDR+0x100),		  /* MBOX5.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX6_0_ADDR),		      /* MBOX6.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX6_0_ADDR+0x100),		  /* MBOX6.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX7_0_ADDR),		      /* MBOX7.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX7_0_ADDR+0x100),		  /* MBOX7.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+};
+
+unsigned int bsp_mailbox_count = sizeof(bsp_mailboxes)/sizeof(bsp_mailboxes[0]);
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru linux/source/src/bsp/fli7610/st231/audio/name.c linux/source/src/bsp/fli7610/st231/audio/name.c
--- multicom-4.0.6/linux/source/src/bsp/fli7610/st231/audio/name.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/st231/audio/name.c	2012-07-02 15:35:30.000000000 +0100
@@ -0,0 +1,46 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * fli7610 ST231 AUDIO
+ */
+
+#include <bsp/_bsp.h>
+
+const char * bsp_cpu_name = "audio";
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru linux/source/src/bsp/fli7610/st231/gp0/mbox.c linux/source/src/bsp/fli7610/st231/gp0/mbox.c
--- multicom-4.0.6/linux/source/src/bsp/fli7610/st231/gp0/mbox.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/st231/gp0/mbox.c	2012-07-02 15:35:30.000000000 +0100
@@ -0,0 +1,187 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * NMHDK/fli7610 gp0
+ */
+
+/*
+ * Mailbox allocation
+ * MBOX1_0x000 -> a9     [IRQ 1]
+ * MBOX0_0x100 -> rt     [IRQ 0]
+ * MBOX4_0x100 -> video0 [IRQ 0]
+ * MBOX2_0x100 -> video1 [IRQ 0]
+ * MBOX1_0x100 -> audio  [IRQ 0]
+ * MBOX5_0x100 -> gp0    [IRQ 0]
+ * MBOX3_0x100 -> gp1    [IRQ 0]
+
+ * MBOX0_0x000 ->  ???
+ * MBOX2_0x000 ->  ???
+ * MBOX3_0x000 ->  ???
+ * MBOX4_0x000 ->  ???
+ * MBOX5_0x000 ->  ???
+ * MBOX6_0x000 ->  ???
+ * MBOX6_0x100 ->  ???
+ * MBOX7_0x000 ->  ???
+ * MBOX7_0x100 ->  ???
+ *
+ * IRQ line naming
+ * IRQ0 ---> ST40_IRQ
+ * IRQ1 ---> ST200_IRQ
+ */
+
+#include <bsp/_bsp.h>
+
+#define MBOX0_0_ADDR		0xfde0e000
+#define MBOX1_0_ADDR		0xfde0e800
+#define MBOX1_1_ADDR		0xfde0e900
+#define MBOX2_0_ADDR		0xfde0f000
+#define MBOX3_0_ADDR		0xfde0f800
+#define MBOX4_0_ADDR		0xfde10000
+#define MBOX5_0_ADDR		0xfde10800
+#define MBOX6_0_ADDR		0xfde11000
+#define MBOX7_0_ADDR		0xfde11800
+
+
+#ifdef __os21__
+
+#include <os21.h>
+
+/* #include <os21/st40/fli7610.h> */
+extern interrupt_name_t OS21_INTERRUPT_MAILBOX_5_1; //MBOX5 ST40_IRQ
+#define MBOX5_IRQ0	((unsigned int) &OS21_INTERRUPT_MAILBOX_5_1)
+
+#else
+#error Invalid OS type.
+#endif
+
+
+struct bsp_mbox_regs bsp_mailboxes[] =
+{
+  {
+    .base	= (void *) (MBOX0_0_ADDR), 		    /* MBOX0.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX0_0_ADDR+0x100), 		/* MBOX0.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX1_0_ADDR), 		    /* MBOX1.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX1_0_ADDR+0x100), 		/* MBOX1.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX2_0_ADDR), 		    /* MBOX2.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX2_0_ADDR+0x100),		 /* MBOX2.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX3_0_ADDR),							/* MBOX3.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX3_0_ADDR+0x100),		 /* MBOX3.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX4_0_ADDR),		      /* MBOX4.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX4_0_ADDR+0x100),		  /* MBOX4.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX5_0_ADDR),		      /* MBOX5.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX5_0_ADDR+0x100),		  /* MBOX5.1 Mailbox */
+    .interrupt	= MBOX5_IRQ0,                /* We own this one */
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX6_0_ADDR),		      /* MBOX6.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX6_0_ADDR+0x100),		  /* MBOX6.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX7_0_ADDR),		      /* MBOX7.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX7_0_ADDR+0x100),		  /* MBOX7.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+};
+
+unsigned int bsp_mailbox_count = sizeof(bsp_mailboxes)/sizeof(bsp_mailboxes[0]);
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru linux/source/src/bsp/fli7610/st231/gp0/name.c linux/source/src/bsp/fli7610/st231/gp0/name.c
--- multicom-4.0.6/linux/source/src/bsp/fli7610/st231/gp0/name.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/st231/gp0/name.c	2012-07-02 15:35:30.000000000 +0100
@@ -0,0 +1,46 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * fli7610 ST231 AUDIO1
+ */
+
+#include <bsp/_bsp.h>
+
+const char * bsp_cpu_name = "gp0";
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru linux/source/src/bsp/fli7610/st231/gp1/mbox.c linux/source/src/bsp/fli7610/st231/gp1/mbox.c
--- multicom-4.0.6/linux/source/src/bsp/fli7610/st231/gp1/mbox.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/st231/gp1/mbox.c	2012-07-02 15:35:30.000000000 +0100
@@ -0,0 +1,187 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * NMHDK/fli7610 host
+ */
+
+/*
+ * Mailbox allocation
+ * MBOX1_0x000 -> a9     [IRQ 1]
+ * MBOX0_0x100 -> rt     [IRQ 0]
+ * MBOX4_0x100 -> video0 [IRQ 0]
+ * MBOX2_0x100 -> video1 [IRQ 0]
+ * MBOX1_0x100 -> audio  [IRQ 0]
+ * MBOX5_0x100 -> gp0    [IRQ 0]
+ * MBOX3_0x100 -> gp1    [IRQ 0]
+
+ * MBOX0_0x000 ->  ???
+ * MBOX2_0x000 ->  ???
+ * MBOX3_0x000 ->  ???
+ * MBOX4_0x000 ->  ???
+ * MBOX5_0x000 ->  ???
+ * MBOX6_0x000 ->  ???
+ * MBOX6_0x100 ->  ???
+ * MBOX7_0x000 ->  ???
+ * MBOX7_0x100 ->  ???
+ *
+ * IRQ line naming
+ * IRQ0 ---> ST40_IRQ
+ * IRQ1 ---> ST200_IRQ
+ */
+
+#include <bsp/_bsp.h>
+
+#define MBOX0_0_ADDR		0xfde0e000
+#define MBOX1_0_ADDR		0xfde0e800
+#define MBOX1_1_ADDR		0xfde0e900
+#define MBOX2_0_ADDR		0xfde0f000
+#define MBOX3_0_ADDR		0xfde0f800
+#define MBOX4_0_ADDR		0xfde10000
+#define MBOX5_0_ADDR		0xfde10800
+#define MBOX6_0_ADDR		0xfde11000
+#define MBOX7_0_ADDR		0xfde11800
+
+
+#ifdef __os21__
+
+#include <os21.h>
+
+/* #include <os21/st40/fli7610.h> */
+extern interrupt_name_t OS21_INTERRUPT_MAILBOX_3_1; //MBOX3 ST40_IRQ
+#define MBOX3_IRQ0	((unsigned int) &OS21_INTERRUPT_MAILBOX_3_1)
+
+#else
+#error Invalid OS type.
+#endif
+
+
+struct bsp_mbox_regs bsp_mailboxes[] =
+{
+  {
+    .base	= (void *) (MBOX0_0_ADDR), 		    /* MBOX0.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX0_0_ADDR+0x100), 		/* MBOX0.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX1_0_ADDR), 		    /* MBOX1.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX1_0_ADDR+0x100), 		/* MBOX1.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX2_0_ADDR), 		    /* MBOX2.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX2_0_ADDR+0x100),		 /* MBOX2.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX3_0_ADDR),							/* MBOX3.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX3_0_ADDR+0x100),		 /* MBOX3.1 Mailbox */
+    .interrupt	= MBOX3_IRQ0,               /* We own this one */
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX4_0_ADDR),		      /* MBOX4.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX4_0_ADDR+0x100),		  /* MBOX4.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX5_0_ADDR),		      /* MBOX5.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX5_0_ADDR+0x100),		  /* MBOX5.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX6_0_ADDR),		      /* MBOX6.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX6_0_ADDR+0x100),		  /* MBOX6.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX7_0_ADDR),		      /* MBOX7.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX7_0_ADDR+0x100),		  /* MBOX7.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+};
+
+unsigned int bsp_mailbox_count = sizeof(bsp_mailboxes)/sizeof(bsp_mailboxes[0]);
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru linux/source/src/bsp/fli7610/st231/gp1/name.c linux/source/src/bsp/fli7610/st231/gp1/name.c
--- multicom-4.0.6/linux/source/src/bsp/fli7610/st231/gp1/name.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/st231/gp1/name.c	2012-07-02 15:35:30.000000000 +0100
@@ -0,0 +1,46 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * fli7610 ST231 General Purpose
+ */
+
+#include <bsp/_bsp.h>
+
+const char * bsp_cpu_name = "gp1";
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru linux/source/src/bsp/fli7610/st231/video0/mbox.c linux/source/src/bsp/fli7610/st231/video0/mbox.c
--- multicom-4.0.6/linux/source/src/bsp/fli7610/st231/video0/mbox.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/st231/video0/mbox.c	2012-07-02 15:35:30.000000000 +0100
@@ -0,0 +1,188 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * NMHDK/fli7610 st231 dmu0 [video 0]
+ */
+
+/*
+ * Mailbox allocation
+ * MBOX1_0x000 -> a9     [IRQ 1]
+ * MBOX0_0x100 -> rt     [IRQ 0]
+ * MBOX4_0x100 -> video0 [IRQ 0]
+ * MBOX2_0x100 -> video1 [IRQ 0]
+ * MBOX1_0x100 -> audio  [IRQ 0]
+ * MBOX5_0x100 -> gp0    [IRQ 0]
+ * MBOX3_0x100 -> gp1    [IRQ 0]
+
+ * MBOX0_0x000 ->  ???
+ * MBOX2_0x000 ->  ???
+ * MBOX3_0x000 ->  ???
+ * MBOX4_0x000 ->  ???
+ * MBOX5_0x000 ->  ???
+ * MBOX6_0x000 ->  ???
+ * MBOX6_0x100 ->  ???
+ * MBOX7_0x000 ->  ???
+ * MBOX7_0x100 ->  ???
+ *
+ * IRQ line naming
+ * IRQ0 ---> ST40_IRQ
+ * IRQ1 ---> ST200_IRQ
+ */
+
+#include <bsp/_bsp.h>
+
+#define MBOX0_0_ADDR		0xfde0e000
+#define MBOX1_0_ADDR		0xfde0e800
+#define MBOX1_1_ADDR		0xfde0e900
+#define MBOX2_0_ADDR		0xfde0f000
+#define MBOX3_0_ADDR		0xfde0f800
+#define MBOX4_0_ADDR		0xfde10000
+#define MBOX5_0_ADDR		0xfde10800
+#define MBOX6_0_ADDR		0xfde11000
+#define MBOX7_0_ADDR		0xfde11800
+
+
+#ifdef __os21__
+
+#include <os21.h>
+
+/* #include <os21/st40/fli7610.h> */
+extern interrupt_name_t OS21_INTERRUPT_MAILBOX_4_1; //MBOX4 ST40_IRQ
+//#define MBOX4_IRQ0	((unsigned int) &OS21_INTERRUPT_MAILBOX_9)
+#define MBOX4_IRQ0	((unsigned int) &OS21_INTERRUPT_MAILBOX_4_1)
+
+#else
+#error Invalid OS type.
+#endif
+
+
+struct bsp_mbox_regs bsp_mailboxes[] =
+{
+  {
+    .base	= (void *) (MBOX0_0_ADDR), 		    /* MBOX0.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX0_0_ADDR+0x100), 		/* MBOX0.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX1_0_ADDR), 		    /* MBOX1.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX1_0_ADDR+0x100), 		/* MBOX1.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX2_0_ADDR), 		    /* MBOX2.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX2_0_ADDR+0x100),		 /* MBOX2.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX3_0_ADDR),							/* MBOX3.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX3_0_ADDR+0x100),		 /* MBOX3.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX4_0_ADDR),		      /* MBOX4.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX4_0_ADDR+0x100),		  /* MBOX4.1 Mailbox */
+    .interrupt	= MBOX4_IRQ0,                 /* We OWN this one*/
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX5_0_ADDR),		      /* MBOX5.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX5_0_ADDR+0x100),		  /* MBOX5.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX6_0_ADDR),		      /* MBOX6.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX6_0_ADDR+0x100),		  /* MBOX6.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX7_0_ADDR),		      /* MBOX7.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX7_0_ADDR+0x100),		  /* MBOX7.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+};
+
+unsigned int bsp_mailbox_count = sizeof(bsp_mailboxes)/sizeof(bsp_mailboxes[0]);
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru linux/source/src/bsp/fli7610/st231/video0/name.c linux/source/src/bsp/fli7610/st231/video0/name.c
--- multicom-4.0.6/linux/source/src/bsp/fli7610/st231/video0/name.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/st231/video0/name.c	2012-07-02 15:35:30.000000000 +0100
@@ -0,0 +1,46 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * fli7610 ST231 VIDEO
+ */
+
+#include <bsp/_bsp.h>
+
+const char * bsp_cpu_name = "video0";
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru linux/source/src/bsp/fli7610/st231/video1/mbox.c linux/source/src/bsp/fli7610/st231/video1/mbox.c
--- multicom-4.0.6/linux/source/src/bsp/fli7610/st231/video1/mbox.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/st231/video1/mbox.c	2012-07-02 15:35:30.000000000 +0100
@@ -0,0 +1,187 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * NMHDK/fli7610 video1 - st231 dmu1
+ */
+
+/*
+ * Mailbox allocation
+ * MBOX1_0x000 -> a9     [IRQ 1]
+ * MBOX0_0x100 -> rt     [IRQ 0]
+ * MBOX4_0x100 -> video0 [IRQ 0]
+ * MBOX2_0x100 -> video1 [IRQ 0]
+ * MBOX1_0x100 -> audio  [IRQ 0]
+ * MBOX5_0x100 -> gp0    [IRQ 0]
+ * MBOX3_0x100 -> gp1    [IRQ 0]
+
+ * MBOX0_0x000 ->  ???
+ * MBOX2_0x000 ->  ???
+ * MBOX3_0x000 ->  ???
+ * MBOX4_0x000 ->  ???
+ * MBOX5_0x000 ->  ???
+ * MBOX6_0x000 ->  ???
+ * MBOX6_0x100 ->  ???
+ * MBOX7_0x000 ->  ???
+ * MBOX7_0x100 ->  ???
+ *
+ * IRQ line naming
+ * IRQ0 ---> ST40_IRQ
+ * IRQ1 ---> ST200_IRQ
+ */
+
+#include <bsp/_bsp.h>
+
+#define MBOX0_0_ADDR		0xfde0e000
+#define MBOX1_0_ADDR		0xfde0e800
+#define MBOX1_1_ADDR		0xfde0e900
+#define MBOX2_0_ADDR		0xfde0f000
+#define MBOX3_0_ADDR		0xfde0f800
+#define MBOX4_0_ADDR		0xfde10000
+#define MBOX5_0_ADDR		0xfde10800
+#define MBOX6_0_ADDR		0xfde11000
+#define MBOX7_0_ADDR		 0xfde11800
+
+
+#ifdef __os21__
+
+#include <os21.h>
+
+/* #include <os21/st40/fli7610.h> */
+extern interrupt_name_t OS21_INTERRUPT_MAILBOX_2_1; //MBOX2 ST40_IRQ
+#define MBOX2_IRQ0	((unsigned int) &OS21_INTERRUPT_MAILBOX_2_1)
+
+#else
+#error Invalid OS type.
+#endif
+
+
+struct bsp_mbox_regs bsp_mailboxes[] =
+{
+  {
+    .base	= (void *) (MBOX0_0_ADDR), 		    /* MBOX0.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX0_0_ADDR+0x100), 		/* MBOX0.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX1_0_ADDR), 		    /* MBOX1.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX1_0_ADDR+0x100), 		/* MBOX1.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX2_0_ADDR), 		    /* MBOX2.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX2_0_ADDR+0x100),		 /* MBOX2.1 Mailbox */
+    .interrupt	= MBOX2_IRQ0,                /* we own this one */
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX3_0_ADDR),							/* MBOX3.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX3_0_ADDR+0x100),		 /* MBOX3.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX4_0_ADDR),		      /* MBOX4.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX4_0_ADDR+0x100),		  /* MBOX4.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX5_0_ADDR),		      /* MBOX5.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX5_0_ADDR+0x100),		  /* MBOX5.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX6_0_ADDR),		      /* MBOX6.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX6_0_ADDR+0x100),		  /* MBOX6.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX7_0_ADDR),		      /* MBOX7.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX7_0_ADDR+0x100),		  /* MBOX7.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+};
+
+unsigned int bsp_mailbox_count = sizeof(bsp_mailboxes)/sizeof(bsp_mailboxes[0]);
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru linux/source/src/bsp/fli7610/st231/video1/name.c linux/source/src/bsp/fli7610/st231/video1/name.c
--- multicom-4.0.6/linux/source/src/bsp/fli7610/st231/video1/name.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/st231/video1/name.c	2012-07-02 15:35:30.000000000 +0100
@@ -0,0 +1,46 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * fli7610 ST231 VIDEO
+ */
+
+#include <bsp/_bsp.h>
+
+const char * bsp_cpu_name = "video1";
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru linux/source/src/bsp/fli7610/st40/fli7610reg.h linux/source/src/bsp/fli7610/st40/fli7610reg.h
--- multicom-4.0.6/linux/source/src/bsp/fli7610/st40/fli7610reg.h	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/st40/fli7610reg.h	2012-07-02 15:35:46.000000000 +0100
@@ -0,0 +1,65 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/*
+ */
+
+/*
+ */
+
+#ifndef __FLI7610REG_H
+#define __FLI7610REG_H
+
+#include "sh4regtype.h"
+
+/*----------------------------------------------------------------------------*/
+
+/*
+ * Base addresses for control register banks.
+ */
+
+
+/* FLI7610 control registers */
+#ifndef FLI7610_SYSCONF_BANK0_REGS_BASE
+#define FLI7610_SYSCONF_BANK0_REGS_BASE 0xfd320000
+#endif
+
+/*----------------------------------------------------------------------------*/
+
+#include "st40reg.h"
+
+/*
+ * FLI7610 SYSCFG control registers
+ */
+
+#define FLI7610_SYSCONF_SYS_CFG00 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0004)
+#define FLI7610_SYSCONF_SYS_CFG01 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0008)
+#define FLI7610_SYSCONF_SYS_CFG02 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x000c)
+#define FLI7610_SYSCONF_SYS_CFG03 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0010)
+#define FLI7610_SYSCONF_SYS_CFG04 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0014)
+#define FLI7610_SYSCONF_SYS_CFG05 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0018)
+#define FLI7610_SYSCONF_SYS_CFG06 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x001c)
+#define FLI7610_SYSCONF_SYS_CFG07 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0020)
+#define FLI7610_SYSCONF_SYS_CFG08 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0024)
+
+#endif /* __FLI7610REG_H */
diff -Nru linux/source/src/bsp/fli7610/st40/flix7610reg.h linux/source/src/bsp/fli7610/st40/flix7610reg.h
--- multicom-4.0.6/linux/source/src/bsp/fli7610/st40/flix7610reg.h	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/st40/flix7610reg.h	2012-07-02 15:35:46.000000000 +0100
@@ -0,0 +1,337 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/*
+ */
+
+/*
+ */
+
+#ifndef __FLIX7610REG_H
+#define __FLIX7610REG_H
+
+#include "sh4regtype.h"
+
+/*----------------------------------------------------------------------------*/
+
+/*
+ * Base addresses for control register banks.
+ */
+
+/* Generic SH4 control registers */
+#ifndef SH4_TMU_REGS_BASE
+#define SH4_TMU_REGS_BASE 0xffd80000
+#endif
+
+
+/* FLI7610 control registers */
+#ifndef FLIX7610_SYSCONF0_REGS_BASE
+#define FLIX7610_SYSCONF0_REGS_BASE 0xfd320000
+#endif
+
+#ifndef FLIX7610_SYSCONF1_REGS_BASE
+#define FLIX7610_SYSCONF1_REGS_BASE 0xfd690000
+#endif
+
+#ifndef FLIX7610_SYSCONF2_REGS_BASE
+#define FLIX7610_SYSCONF2_REGS_BASE 0xfd6a0000
+#endif
+
+#ifndef FLIX7610_SYSCONF3_REGS_BASE
+#define FLIX7610_SYSCONF3_REGS_BASE 0xfdde0000
+#endif
+
+#ifndef FLIX7610_SYSCONF4_REGS_BASE
+#define FLIX7610_SYSCONF4_REGS_BASE 0xfddf0000
+#endif
+
+
+
+#include "st40reg.h"
+
+
+
+/* SYSCONF Bank 0 */
+#define FLIX7610_SYSCONF0_SYS_STA00 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF0_SYS_CFG00 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF0_SYS_CFG01 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF0_SYS_CFG02 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF0_SYS_CFG03 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF0_SYS_CFG04 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF0_SYS_CFG05 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF0_SYS_CFG06 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF0_SYS_CFG07 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF0_SYS_CFG08 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF0_SYS_CFG12 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF0_SYS_CFG13 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF0_SYS_CFG14 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0030)
+
+/* SYSCONF Bank 1 */
+#define FLIX7610_SYSCONF1_SYS_STA00 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF1_SYS_STA01 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF1_SYS_STA02 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF1_SYS_STA03 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF1_SYS_STA04 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF1_SYS_STA05 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF1_SYS_STA06 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF1_SYS_STA07 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF1_SYS_STA08 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF1_SYS_STA09 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF1_SYS_STA10 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF1_SYS_STA11 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF1_SYS_STA12 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0030)
+#define FLIX7610_SYSCONF1_SYS_STA13 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0034)
+#define FLIX7610_SYSCONF1_SYS_STA14 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0038)
+#define FLIX7610_SYSCONF1_SYS_CFG00 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x003C)
+#define FLIX7610_SYSCONF1_SYS_CFG01 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0040)
+#define FLIX7610_SYSCONF1_SYS_CFG02 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0044)
+#define FLIX7610_SYSCONF1_SYS_CFG03 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0048)
+#define FLIX7610_SYSCONF1_SYS_CFG04 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x004C)
+#define FLIX7610_SYSCONF1_SYS_CFG05 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0050)
+#define FLIX7610_SYSCONF1_SYS_CFG06 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0054)
+#define FLIX7610_SYSCONF1_SYS_CFG07 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0058)
+#define FLIX7610_SYSCONF1_SYS_CFG08 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x005C)
+#define FLIX7610_SYSCONF1_SYS_CFG09 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0060)
+#define FLIX7610_SYSCONF1_SYS_CFG10 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0064)
+#define FLIX7610_SYSCONF1_SYS_CFG11 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0068)
+#define FLIX7610_SYSCONF1_SYS_CFG12 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x006C)
+#define FLIX7610_SYSCONF1_SYS_CFG13 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0070)
+#define FLIX7610_SYSCONF1_SYS_CFG14 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0074)
+#define FLIX7610_SYSCONF1_SYS_CFG15 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0078)
+#define FLIX7610_SYSCONF1_SYS_CFG16 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x007C)
+#define FLIX7610_SYSCONF1_SYS_CFG17 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0080)
+#define FLIX7610_SYSCONF1_SYS_CFG18 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0084)
+#define FLIX7610_SYSCONF1_SYS_CFG19 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0088)
+#define FLIX7610_SYSCONF1_SYS_CFG20 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x008C)
+#define FLIX7610_SYSCONF1_SYS_CFG21 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0090)
+
+/* SYSCONF Bank 2 */
+#define FLIX7610_SYSCONF2_SYS_CFG00 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF2_SYS_CFG01 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF2_SYS_CFG02 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF2_SYS_CFG03 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF2_SYS_CFG04 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF2_SYS_CFG05 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF2_SYS_CFG06 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF2_SYS_CFG07 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF2_SYS_CFG08 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF2_SYS_CFG09 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF2_SYS_CFG10 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF2_SYS_CFG11 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF2_SYS_CFG12 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0030)
+#define FLIX7610_SYSCONF2_SYS_CFG13 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0034)
+#define FLIX7610_SYSCONF2_SYS_CFG14 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0038)
+#define FLIX7610_SYSCONF2_SYS_CFG15 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x003C)
+#define FLIX7610_SYSCONF2_SYS_CFG16 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0040)
+#define FLIX7610_SYSCONF2_SYS_CFG17 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0044)
+#define FLIX7610_SYSCONF2_SYS_CFG18 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0048)
+#define FLIX7610_SYSCONF2_SYS_CFG19 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x004C)
+#define FLIX7610_SYSCONF2_SYS_CFG20 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0050)
+#define FLIX7610_SYSCONF2_SYS_CFG21 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0054)
+#define FLIX7610_SYSCONF2_SYS_CFG22 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0058)
+#define FLIX7610_SYSCONF2_SYS_CFG23 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x005c)
+#define FLIX7610_SYSCONF2_SYS_CFG24 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0060)
+#define FLIX7610_SYSCONF2_SYS_CFG25 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0064)
+#define FLIX7610_SYSCONF2_SYS_CFG26 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0068)
+#define FLIX7610_SYSCONF2_SYS_CFG27 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x006c)
+#define FLIX7610_SYSCONF2_SYS_CFG28 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0070)
+#define FLIX7610_SYSCONF2_SYS_CFG29 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0074)
+#define FLIX7610_SYSCONF2_SYS_CFG30 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0078)
+#define FLIX7610_SYSCONF2_SYS_CFG31 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x007c)
+#define FLIX7610_SYSCONF2_SYS_CFG32 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0080)
+#define FLIX7610_SYSCONF2_SYS_CFG33 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0084)
+#define FLIX7610_SYSCONF2_SYS_CFG34 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0088)
+#define FLIX7610_SYSCONF2_SYS_CFG35 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x008c)
+#define FLIX7610_SYSCONF2_SYS_CFG36 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0090)
+#define FLIX7610_SYSCONF2_SYS_CFG37 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0094)
+#define FLIX7610_SYSCONF2_SYS_CFG38 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0098)
+#define FLIX7610_SYSCONF2_SYS_CFG39 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x009c)
+#define FLIX7610_SYSCONF2_SYS_CFG40 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00a0)
+#define FLIX7610_SYSCONF2_SYS_CFG41 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00a4)
+#define FLIX7610_SYSCONF2_SYS_CFG42 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00a8)
+#define FLIX7610_SYSCONF2_SYS_CFG43 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00ac)
+#define FLIX7610_SYSCONF2_SYS_CFG44 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00b0)
+#define FLIX7610_SYSCONF2_SYS_CFG45 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00b4)
+#define FLIX7610_SYSCONF2_SYS_CFG46 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00b8)
+#define FLIX7610_SYSCONF2_SYS_CFG47 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00bc)
+#define FLIX7610_SYSCONF2_SYS_CFG48 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00c0)
+#define FLIX7610_SYSCONF2_SYS_CFG49 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00c4)
+#define FLIX7610_SYSCONF2_SYS_CFG50 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00c8)
+#define FLIX7610_SYSCONF2_SYS_CFG51 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00cc)
+#define FLIX7610_SYSCONF2_SYS_CFG52 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00d0)
+#define FLIX7610_SYSCONF2_SYS_CFG53 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00d4)
+#define FLIX7610_SYSCONF2_SYS_CFG54 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00d8)
+#define FLIX7610_SYSCONF2_SYS_CFG55 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00dc)
+#define FLIX7610_SYSCONF2_SYS_CFG56 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00E0)
+#define FLIX7610_SYSCONF2_SYS_STA00 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00E4)
+#define FLIX7610_SYSCONF2_SYS_STA01 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00E8)
+#define FLIX7610_SYSCONF2_SYS_STA02 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00EC)
+#define FLIX7610_SYSCONF2_SYS_STA03 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00F0)
+#define FLIX7610_SYSCONF2_SYS_STA04 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00F4)
+#define FLIX7610_SYSCONF2_SYS_STA05 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00F8)
+
+/* SYSCONF Bank 3 */
+#define FLIX7610_SYSCONF3_SYS_CFG600 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF3_SYS_CFG601 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF3_SYS_CFG602 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF3_SYS_CFG603 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF3_SYS_CFG604 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF3_SYS_CFG605 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF3_SYS_CFG606 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF3_SYS_CFG607 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF3_SYS_CFG608 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF3_SYS_CFG609 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF3_SYS_CFG610 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF3_SYS_CFG611 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF3_SYS_CFG612 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0030)
+#define FLIX7610_SYSCONF3_SYS_CFG613 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0034)
+#define FLIX7610_SYSCONF3_SYS_CFG614 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0038)
+#define FLIX7610_SYSCONF3_SYS_CFG615 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x003C)
+#define FLIX7610_SYSCONF3_SYS_CFG616 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0040)
+#define FLIX7610_SYSCONF3_SYS_CFG617 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0044)
+#define FLIX7610_SYSCONF3_SYS_CFG618 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0048)
+#define FLIX7610_SYSCONF3_SYS_CFG619 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x004C)
+#define FLIX7610_SYSCONF3_SYS_CFG620 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0050)
+#define FLIX7610_SYSCONF3_SYS_CFG621 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0054)
+#define FLIX7610_SYSCONF3_SYS_CFG622 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0058)
+#define FLIX7610_SYSCONF3_SYS_CFG623 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x005c)
+#define FLIX7610_SYSCONF3_SYS_CFG624 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0060)
+#define FLIX7610_SYSCONF3_SYS_CFG625 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0064)
+#define FLIX7610_SYSCONF3_SYS_CFG626 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0068)
+#define FLIX7610_SYSCONF3_SYS_CFG627 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x006c)
+#define FLIX7610_SYSCONF3_SYS_CFG628 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0070)
+#define FLIX7610_SYSCONF3_SYS_CFG629 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0074)
+#define FLIX7610_SYSCONF3_SYS_CFG630 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0078)
+#define FLIX7610_SYSCONF3_SYS_CFG631 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x007c)
+#define FLIX7610_SYSCONF3_SYS_CFG632 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0080)
+#define FLIX7610_SYSCONF3_SYS_CFG633 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0084)
+#define FLIX7610_SYSCONF3_SYS_CFG634 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0088)
+#define FLIX7610_SYSCONF3_SYS_CFG635 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x008c)
+#define FLIX7610_SYSCONF3_SYS_CFG636 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0090)
+#define FLIX7610_SYSCONF3_SYS_CFG637 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0094)
+#define FLIX7610_SYSCONF3_SYS_CFG638 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0098)
+#define FLIX7610_SYSCONF3_SYS_CFG639 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x009c)
+#define FLIX7610_SYSCONF3_SYS_CFG640 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00a0)
+#define FLIX7610_SYSCONF3_SYS_CFG641 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00a4)
+#define FLIX7610_SYSCONF3_SYS_CFG642 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00a8)
+#define FLIX7610_SYSCONF3_SYS_CFG643 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00ac)
+#define FLIX7610_SYSCONF3_SYS_CFG644 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00b0)
+#define FLIX7610_SYSCONF3_SYS_CFG645 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00b4)
+#define FLIX7610_SYSCONF3_SYS_CFG646 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00b8)
+#define FLIX7610_SYSCONF3_SYS_CFG647 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00bc)
+#define FLIX7610_SYSCONF3_SYS_CFG648 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00c0)
+#define FLIX7610_SYSCONF3_SYS_CFG649 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00c4)
+#define FLIX7610_SYSCONF3_SYS_CFG650 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00c8)
+#define FLIX7610_SYSCONF3_SYS_CFG651 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00cc)
+#define FLIX7610_SYSCONF3_SYS_CFG652 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00d0)
+#define FLIX7610_SYSCONF3_SYS_CFG653 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00d4)
+#define FLIX7610_SYSCONF3_SYS_CFG654 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00d8)
+#define FLIX7610_SYSCONF3_SYS_CFG655 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00dc)
+#define FLIX7610_SYSCONF3_SYS_CFG656 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00E0)
+#define FLIX7610_SYSCONF3_SYS_CFG657 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00E4)
+#define FLIX7610_SYSCONF3_SYS_CFG658 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00E8)
+#define FLIX7610_SYSCONF3_SYS_CFG659 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00EC)
+#define FLIX7610_SYSCONF3_SYS_CFG660 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00F0)
+#define FLIX7610_SYSCONF3_SYS_CFG661 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00F4)
+#define FLIX7610_SYSCONF3_SYS_CFG662 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00F8)
+#define FLIX7610_SYSCONF3_SYS_CFG663 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00FC)
+#define FLIX7610_SYSCONF3_SYS_CFG664 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0100)
+
+/* SYSCONF Bank 4 */
+#define FLIX7610_SYSCONF4_SYS_CFG00 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF4_SYS_CFG01 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF4_SYS_CFG02 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF4_SYS_CFG03 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF4_SYS_CFG04 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF4_SYS_CFG05 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF4_SYS_CFG06 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF4_SYS_CFG07 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF4_SYS_CFG08 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF4_SYS_CFG09 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF4_SYS_CFG10 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF4_SYS_CFG11 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF4_SYS_CFG12 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0030)
+#define FLIX7610_SYSCONF4_SYS_CFG13 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0034)
+#define FLIX7610_SYSCONF4_SYS_CFG14 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0038)
+#define FLIX7610_SYSCONF4_SYS_CFG15 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x003C)
+#define FLIX7610_SYSCONF4_SYS_CFG16 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0040)
+#define FLIX7610_SYSCONF4_SYS_CFG17 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0044)
+#define FLIX7610_SYSCONF4_SYS_CFG18 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0048)
+#define FLIX7610_SYSCONF4_SYS_CFG19 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x004C)
+#define FLIX7610_SYSCONF4_SYS_CFG20 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0050)
+#define FLIX7610_SYSCONF4_SYS_CFG21 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0054)
+#define FLIX7610_SYSCONF4_SYS_CFG22 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0058)
+#define FLIX7610_SYSCONF4_SYS_CFG23 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x005c)
+#define FLIX7610_SYSCONF4_SYS_CFG24 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0060)
+#define FLIX7610_SYSCONF4_SYS_CFG25 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0064)
+#define FLIX7610_SYSCONF4_SYS_CFG26 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0068)
+#define FLIX7610_SYSCONF4_SYS_CFG27 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x006c)
+#define FLIX7610_SYSCONF4_SYS_CFG28 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0070)
+#define FLIX7610_SYSCONF4_SYS_CFG29 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0074)
+#define FLIX7610_SYSCONF4_SYS_CFG30 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0078)
+#define FLIX7610_SYSCONF4_SYS_CFG31 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x007c)
+#define FLIX7610_SYSCONF4_SYS_CFG32 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0080)
+#define FLIX7610_SYSCONF4_SYS_CFG33 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0084)
+#define FLIX7610_SYSCONF4_SYS_CFG34 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0088)
+#define FLIX7610_SYSCONF4_SYS_CFG35 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x008c)
+#define FLIX7610_SYSCONF4_SYS_CFG36 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0090)
+#define FLIX7610_SYSCONF4_SYS_CFG37 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0094)
+#define FLIX7610_SYSCONF4_SYS_CFG38 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0098)
+#define FLIX7610_SYSCONF4_SYS_CFG39 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x009c)
+#define FLIX7610_SYSCONF4_SYS_CFG40 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00a0)
+#define FLIX7610_SYSCONF4_SYS_CFG41 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00a4)
+#define FLIX7610_SYSCONF4_SYS_CFG42 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00a8)
+#define FLIX7610_SYSCONF4_SYS_CFG43 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00ac)
+#define FLIX7610_SYSCONF4_SYS_CFG44 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00b0)
+#define FLIX7610_SYSCONF4_SYS_CFG45 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00b4)
+#define FLIX7610_SYSCONF4_SYS_CFG46 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00b8)
+#define FLIX7610_SYSCONF4_SYS_CFG47 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00bc)
+#define FLIX7610_SYSCONF4_SYS_CFG48 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00c0)
+#define FLIX7610_SYSCONF4_SYS_CFG49 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00c4)
+#define FLIX7610_SYSCONF4_SYS_CFG50 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00c8)
+#define FLIX7610_SYSCONF4_SYS_CFG51 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00cc)
+#define FLIX7610_SYSCONF4_SYS_CFG52 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00d0)
+#define FLIX7610_SYSCONF4_SYS_CFG53 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00d4)
+#define FLIX7610_SYSCONF4_SYS_CFG54 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00d8)
+#define FLIX7610_SYSCONF4_SYS_CFG55 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00dc)
+#define FLIX7610_SYSCONF4_SYS_CFG56 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00E0)
+#define FLIX7610_SYSCONF4_SYS_CFG57 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00E4)
+#define FLIX7610_SYSCONF4_SYS_CFG58 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00E8)
+#define FLIX7610_SYSCONF4_SYS_CFG59 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00Ec)
+#define FLIX7610_SYSCONF4_SYS_CFG60 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00F0)
+#define FLIX7610_SYSCONF4_SYS_CFG61 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00F4)
+#define FLIX7610_SYSCONF4_SYS_CFG62 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00F8)
+#define FLIX7610_SYSCONF4_SYS_CFG63 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00FC)
+#define FLIX7610_SYSCONF4_SYS_CFG64 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0100)
+#define FLIX7610_SYSCONF4_SYS_CFG65 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0104)
+#define FLIX7610_SYSCONF4_SYS_CFG66 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0108)
+#define FLIX7610_SYSCONF4_SYS_CFG67 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x010c)
+#define FLIX7610_SYSCONF4_SYS_CFG68 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0110)
+#define FLIX7610_SYSCONF4_SYS_CFG69 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0114)
+#define FLIX7610_SYSCONF4_SYS_CFG70 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0118)
+#define FLIX7610_SYSCONF4_SYS_STA00 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x011C)
+#define FLIX7610_SYSCONF4_SYS_STA01 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0120)
+#define FLIX7610_SYSCONF4_SYS_STA02 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0124)
+#define FLIX7610_SYSCONF4_SYS_STA03 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0128)
+
+#endif /* __FLIX7610REG_H */
diff -Nru linux/source/src/bsp/fli7610/st40/pokeloop.S linux/source/src/bsp/fli7610/st40/pokeloop.S
--- multicom-4.0.6/linux/source/src/bsp/fli7610/st40/pokeloop.S	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/st40/pokeloop.S	2012-07-02 15:35:07.000000000 +0100
@@ -0,0 +1,335 @@
+/*
+ * File     : pokeloop.S
+ * Synopsys : ST40 poke loop code.
+ *
+ * Copyright (c) 2004-2008 STMicroelectronics Limited.  All rights reserved.
+ *
+ */
+
+#include "poketable.h"
+
+#	.global		__pokeLoop
+
+/*
+ * The poke table is a series of long words, in the format:
+ *
+ *	opcode, operand, operand (, operand)*
+ *
+ * An opcode of 0 marks the table end.
+ *
+ * MUST_RUN_FROM_ICACHE must be defined to a non-zero value if this code is to
+ * be run from a 32 bytes per line instruction cache (it will jump through
+ * itself once before starting to ensure all lines are cached).  If it is not
+ * defined at all, it will be defined to 1.
+ */
+#ifndef MUST_RUN_FROM_ICACHE
+#define MUST_RUN_FROM_ICACHE 1
+#endif /* !MUST_RUN_FROM_ICACHE */
+
+/*
+ * Routine to setup peripheral registers.
+ * It is executed from within the I-cache (if MUST_RUN_FROM_ICACHE is defined),
+ * with all its data in the D-cache.  It is the caller's responsibility to
+ * ensure the data is all in the D-cache.
+ *
+ * This code and the poke table should be put in the same unique section to
+ * ensure they are contiguous in memory.  This will ensure that, as long as the
+ * data cache is large enough, the SwitchJumpTable and the poke table will not
+ * be on the same cache line (guaranteeing functionality on a direct-mapped
+ * cache.
+ *
+ * The poke loop code honours the architecture ABI for parameter passing, with
+ * the address of the poke table to process as the first argument, and a device
+ * ID to use in the IF_DEVID operations as the second argument.
+ */
+
+#ifndef POKELOOPSECTION
+#define POKELOOPSECTION	.text.pokesection
+#endif /* !POKELOOPSECTION */
+	.pushsection	POKELOOPSECTION
+
+	.balign	32
+__pokeLoop:
+
+	/* Ensure the jump table is in the data cache */
+	mova	SwitchJumpTable, r0	/* Keep this in r0 for use in DoPoking */
+	mov	r0, r6
+	pref	@r6			/* 2 prefetches as could cover 2 cache lines */
+	add	#32, r6
+	pref	@r6
+
+#if (MUST_RUN_FROM_ICACHE != 0)
+	/* Do a single code jump-through to pull the code into the instruction
+	 * cache - we have put a jump point in every cache line.  One way to do
+         * this is to use "sh4objdump -d" on an executable containing this code,
+         * and visually inspect that each jump-through point is in a separate
+         * 0x20 range.
+	 * We set the T bit so we can use 1 instruction jumps for the
+	 * jump-through.
+	 */
+	sett
+	bt	8f
+#endif /* MUST_RUN_FROM_ICACHE != 0 */
+
+DoPoking:
+	mov.l	@r4+, r7	/* opcode */
+	mov.l	@r4+, r1	/* operand 1 */
+	mov.l	@r4+, r2	/* operand 2 */
+
+	mov.b	@(r0, r7), r7
+	extu.b	r7, r7
+	braf	r7
+	  nop
+SwitchJumpFrom:
+
+/* The SwitchJumpTable must be in increasing numeric order of opcode (with
+ * padding for any missing entries).  Distance between SwitchJumpTable and any
+ * of the operations must be less than 255 bytes (the assembler should point it
+ * out if we ever break that condition and have to switch to 16 bit values).
+ */
+	.balign 4
+SwitchJumpTable:
+	.byte	DoRet - SwitchJumpFrom
+	.byte	DoPoke8 - SwitchJumpFrom
+	.byte	DoPoke16 - SwitchJumpFrom
+	.byte	DoPoke32 - SwitchJumpFrom
+	.byte	DoOr8 - SwitchJumpFrom
+	.byte	DoOr16 - SwitchJumpFrom
+	.byte	DoOr32 - SwitchJumpFrom
+	.byte	DoUpdate8 - SwitchJumpFrom
+	.byte	DoUpdate16 - SwitchJumpFrom
+	.byte	DoUpdate32 - SwitchJumpFrom
+	.byte	DoPokeUpdate32 - SwitchJumpFrom
+	.byte	DoWhileNe8 - SwitchJumpFrom
+	.byte	DoWhileNe16 - SwitchJumpFrom
+	.byte	DoWhileNe32 - SwitchJumpFrom
+	.byte	DoIfEq32 - SwitchJumpFrom
+	.byte	DoIfGT32 - SwitchJumpFrom
+	.byte	DoElse - SwitchJumpFrom
+	.byte	DoDelay - SwitchJumpFrom
+	.byte	DoIfDevIDGE - SwitchJumpFrom
+	.byte	DoIfDevIDLE - SwitchJumpFrom
+
+	.balign	2
+#if (MUST_RUN_FROM_ICACHE != 0)
+8:	bt	8f
+#endif /* MUST_RUN_FROM_ICACHE != 0 */
+
+/* END_MARKER */
+DoRet:
+	rts			/* Return point */
+	  nop
+
+/* POKE8(A, VAL) */
+DoPoke8:
+	bra	DoPoking
+	  mov.b	r2, @r1		/* *A = VAL */
+
+/* POKE16(A, VAL) */
+DoPoke16:
+	bra	DoPoking
+	  mov.w	r2, @r1		/* *A = VAL */
+
+/* POKE32(A, VAL) */
+DoPoke32:
+	bra	DoPoking
+	  mov.l	r2, @r1		/* *A = VAL */
+
+#if (MUST_RUN_FROM_ICACHE != 0)
+8:	bt	8f
+#endif /* MUST_RUN_FROM_ICACHE != 0 */
+
+/* OR8(A, VAL) */
+DoOr8:
+	mov.b	@r1, r3		/* *A */
+	or	r2, r3		/* *A | OR */
+	bra	DoPoking
+	  mov.b	r3, @r1		/* *A |= OR */
+
+/* OR16(A, VAL) */
+DoOr16:
+	mov.w	@r1, r3		/* *A */
+	or	r2, r3		/* *A | OR */
+	bra	DoPoking
+	  mov.w	r3, @r1		/* *A |= OR */
+
+/* OR32(A, VAL) */
+DoOr32:
+	mov.l	@r1, r3		/* *A */
+	or	r2, r3		/* *A | OR */
+	bra	DoPoking
+	  mov.l	r3, @r1		/* *A |= OR */
+
+/* UPDATE8(A, AND, OR) */
+DoUpdate8:
+	mov.b	@r1, r3		/* *A */
+	and	r2, r3		/* *A & AND */
+	mov.l	@r4+, r2	/* read OR */
+	or	r2, r3		/* (*A & AND) | OR */
+	bra	DoPoking
+	  mov.b	r3, @r1		/* *A = ((*A & AND) | OR) */
+
+#if (MUST_RUN_FROM_ICACHE != 0)
+8:	bt	8f
+#endif /* MUST_RUN_FROM_ICACHE != 0 */
+
+/* UPDATE16(A, AND, OR) */
+DoUpdate16:
+	mov.w	@r1, r3		/* *A */
+	and	r2, r3		/* *A & AND */
+	mov.l	@r4+, r2	/* read OR */
+	or	r2, r3		/* (*A & AND) | OR */
+	bra	DoPoking
+	  mov.w	r3, @r1		/* *A = ((*A & AND) | OR) */
+
+/* UPDATE32(A, AND, OR) */
+DoUpdate32:
+	mov.l	@r1, r3		/* *A */
+	and	r2, r3		/* *A & AND */
+	mov.l	@r4+, r2	/* read OR */
+	or	r2, r3		/* (*A & AND) | OR */
+	bra	DoPoking
+	  mov.l	r3, @r1		/* *A = ((*A & AND) | OR) */
+
+#if (MUST_RUN_FROM_ICACHE != 0)
+8:	bt	8f
+#endif /* MUST_RUN_FROM_ICACHE != 0 */
+
+/* POKE_UPDATE32(A1, A2, AND, SHIFT, OR) */
+DoPokeUpdate32:
+	mov.l	@r2, r3		/* *A2 */
+	mov.l	@r4+, r2	/* read AND */
+	and	r2, r3		/* *A2 & AND */
+	mov.l	@r4+, r2	/* read SHIFT */
+	shld	r2, r3		/* (*A2 & AND) << SHIFT */
+	mov.l	@r4+, r2	/* read OR */
+	or	r2, r3		/* ((*A2 & AND) << SHIFT) | OR */
+	bra	DoPoking
+	  mov.l	r3, @r1		/* *A1 = (((*A2 & AND) << SHIFT) | OR) */
+
+/* WHILE_NE8(A, AND, VAL) */
+DoWhileNe8:
+	mov.l	@r4+, r7	/* read VAL */
+1:	mov.b	@r1, r3		/* *A */
+	extu.b	r3, r3		/* 32bit(*A) */
+	and	r2, r3		/* *A & AND */
+	cmp/eq	r3, r7		/* if ((*A & AND) == VAL) */
+	bf	1b		/* loop if false */
+	bt	DoPoking
+
+#if (MUST_RUN_FROM_ICACHE != 0)
+8:	bt	8f
+#endif /* MUST_RUN_FROM_ICACHE != 0 */
+
+/* WHILE_NE16(A, AND, VAL) */
+DoWhileNe16:
+	mov.l	@r4+, r7	/* read VAL */
+1:	mov.w	@r1, r3		/* *A */
+	extu.w	r3, r3		/* 32bit(*A) */
+	and	r2, r3		/* *A & AND */
+	cmp/eq	r3, r7		/* if ((*A & AND) == VAL) */
+	bf	1b		/* loop if false */
+	bt	DoPoking
+
+/* WHILE_NE32(A, AND, VAL) */
+DoWhileNe32:
+	mov.l	@r4+, r7	/* read VAL */
+1:	mov.l	@r1, r3		/* *A */
+	and	r2, r3		/* *A & AND */
+	cmp/eq	r3, r7		/* if ((*A & AND) == VAL) */
+	bf	1b		/* loop if false */
+	bt	DoPoking
+
+#if (MUST_RUN_FROM_ICACHE != 0)
+8:	bt	8f
+#endif /* MUST_RUN_FROM_ICACHE != 0 */
+
+/* IF_EQ32(NESTLEVEL, A, AND, VAL)
+   Note that NESTLEVEL is not in the actual table, but there is a distance
+   field following VAL.
+ */
+DoIfEq32:
+	mov.l	@r1, r1		/* *A */
+	and	r2, r1		/* *A & AND */
+	mov.l	@r4+, r2	/* read VAL */
+	mov.l	@r4+, r3	/* read distance to ELSE/ENDIF */
+	cmp/eq	r2, r1		/* if ((*A & AND) == VAL) */
+	bt	DoPoking	/* go ahead with these pokes */
+	add	r3, r4		/* skip forward through pokes to ELSE or ENDIF */
+	bf	DoPoking
+
+/* IF_GT32(NESTLEVEL, A, AND, VAL)
+   Note that NESTLEVEL is not in the actual table, but there is a distance
+   field following VAL.
+ */
+DoIfGT32:
+	mov.l	@r1, r1		/* *A */
+	and	r2, r1		/* *A & AND */
+	mov.l	@r4+, r2	/* read VAL */
+	mov.l	@r4+, r3	/* read distance to ELSE/ENDIF */
+	cmp/hi	r2, r1		/* if ((*A & AND) > VAL) */
+	bt	DoPoking	/* go ahead with these pokes if true*/
+	add	r3, r4		/* skip forward through pokes to ELSE or ENDIF */
+	bf	DoPoking
+
+#if (MUST_RUN_FROM_ICACHE != 0)
+8:	bt	8f
+#endif /* MUST_RUN_FROM_ICACHE != 0 */
+
+/* ELSE(NESTLEVEL)
+   Note that NESTLEVEL is not in the actual table, but there is a distance
+   field following the opcode.
+ */
+DoElse:
+	add	#-4, r4		/* We took 1 arg too many from r4 for an else */
+	bra	DoPoking
+	  add	r1, r4		/* skip through to ENDIF */
+
+/* DELAY(ITERATIONS) */
+DoDelay:
+1:	dt	r1		/* if (--OPERATIONS == 0) */
+	bf	1b
+	add	#-4, r4		/* We took 1 arg too many from r4 for a delay */
+	bt	DoPoking
+
+/* IF_DEVID_GE(NESTLEVEL, VAL)
+   Note that NESTLEVEL is not in the actual table, but there is a distance
+   field following VAL.
+ */
+DoIfDevIDGE:
+	cmp/hs	r1, r5		/* if (device ID >= VAL) */
+	bt	DoPoking	/* go ahead with these pokes if true */
+	bra	DoPoking
+	  add	r2, r4
+
+/* IF_DEVID_LE(NESTLEVEL, VAL)
+   Note that NESTLEVEL is not in the actual table, but there is a distance
+   field following VAL.
+ */
+DoIfDevIDLE:
+	cmp/hi	r5, r1		/* if (device ID <= VAL) */
+	bt	1f		/* go ahead with these pokes if true */
+	add	r2, r4
+1:	bra	DoPoking
+	  nop
+
+#if (MUST_RUN_FROM_ICACHE != 0)
+8:	/* The final jump back to where we start performing the pokes */
+	bra	DoPoking
+	  nop
+#endif /* MUST_RUN_FROM_ICACHE != 0 */
+
+	.align	4
+mbox_a:
+	.long	0xfdac1070
+
+mbox_p6:
+	.long	0x12345676
+
+mbox_p7:
+	.long	0x12345677
+
+mbox_p8:
+	.long	0x12345678
+
+	.popsection
diff -Nru linux/source/src/bsp/fli7610/st40/poketable.h linux/source/src/bsp/fli7610/st40/poketable.h
--- multicom-4.0.6/linux/source/src/bsp/fli7610/st40/poketable.h	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/st40/poketable.h	2012-07-02 15:35:46.000000000 +0100
@@ -0,0 +1,149 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/**************************************************************
+ * This file is part of the latest release of the Multicom4 project. This release
+ * is fully functional and provides all of the original MME functionality.This
+ * release  is now considered stable and ready for integration with other software
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the
+ * terms of the GNU General Public License as published by the Free Software Foundation
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4;
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place -
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.
+ * Contact multicom.support@st.com.
+**************************************************************/
+
+/*
+ * File     : pokeloop.h
+ * Synopsys : Header containing macro definitions needed for poke tables and the
+ *            poke loop code which uses them.
+ *
+ */
+
+#ifndef __POKE_LOOP_H_
+#define __POKE_LOOP_H_
+
+/* Opcode values */
+#define OP_END_POKES					0
+#define OP_POKE8					1
+#define OP_POKE16					2
+#define OP_POKE32					3
+#define OP_OR8						4
+#define OP_OR16						5
+#define OP_OR32						6
+#define OP_UPDATE8					7
+#define OP_UPDATE16					8
+#define OP_UPDATE32					9
+#define OP_POKE_UPDATE32				10
+#define OP_WHILE_NE8					11
+#define OP_WHILE_NE16					12
+#define OP_WHILE_NE32					13
+#define OP_IF_EQ32					14
+#define OP_IF_GT32					15
+#define OP_ELSE						16
+#define OP_DELAY					17
+#define OP_IF_DEVID_GE					18
+#define OP_IF_DEVID_LE					19
+
+#ifdef __ASSEMBLER__
+
+#ifdef __st200__
+/* The ST200 Toolset has a version of GNU as which does not support the .warning
+   or .error directives, so we switch in the .print directive instead to do the
+   best we can.
+ */
+#define ASM_WARNING(STR)	.print "Warning:"; .print STR
+#define ASM_ERROR(STR)		.print STR; .err
+#else
+#define ASM_WARNING(STR)	.warning STR
+#define ASM_ERROR(STR)		.error STR
+#endif /* __st200__ */
+
+/* Poke table commands */
+#define POKE8(A, VAL)					.long OP_POKE8, A, VAL
+#define POKE16(A, VAL)					.long OP_POKE16, A, VAL
+#define POKE32(A, VAL)					.long OP_POKE32, A, VAL
+#define OR8(A, VAL)					.long OP_OR8, A, VAL
+#define OR16(A, VAL)					.long OP_OR16, A, VAL
+#define OR32(A, VAL)					.long OP_OR32, A, VAL
+#define UPDATE8(A, AND, OR)				.long OP_UPDATE8, A, AND, OR
+#define UPDATE16(A, AND, OR)				.long OP_UPDATE16, A, AND, OR
+#define UPDATE32(A, AND, OR)				.long OP_UPDATE32, A, AND, OR
+#define POKE_UPDATE32(A1, A2, AND, SHIFT, OR)		.long OP_POKE_UPDATE32, A1, A2, AND, SHIFT, OR
+#define WHILE_NE8(A, AND, VAL)				.long OP_WHILE_NE8, A, AND, VAL; .if (VAL > 0xFF); ASM_ERROR("Value VAL in WHILE_NE8 should fit in 8 bits"); .endif
+#define WHILE_NE16(A, AND, VAL)				.long OP_WHILE_NE16, A, AND, VAL; .if (VAL > 0xFFFF); ASM_ERROR("Value VAL in WHILE_NE16 should fit in 16 bits"); .endif
+#define WHILE_NE32(A, AND, VAL)				.long OP_WHILE_NE32, A, AND, VAL
+#define IF_EQ32(NESTLEVEL, A, AND, VAL)			.long OP_IF_EQ32, A, AND, VAL, (NESTLEVEL ## f - .)
+#define IF_GT32(NESTLEVEL, A, AND, VAL)			.long OP_IF_GT32, A, AND, VAL, (NESTLEVEL ## f - .)
+/* An explicit ELSE will skip the OP_ELSE embedded in the ENDIF to make things faster */
+#define ELSE(NESTLEVEL)					.long OP_ELSE; NESTLEVEL: ; .long (NESTLEVEL ## f - .)
+ /* ENDIF includes an OP_ELSE so that we end up at the correct position regardless of whether there is an explcit ELSE in the IF construct */
+#define ENDIF(NESTLEVEL)				.long OP_ELSE; NESTLEVEL: ; .long 0
+#define DELAY(ITERATIONS)				.long OP_DELAY, (ITERATIONS + 1)
+/* The 2nd argument to the poke loop code (in R5 for ST40, or $r0.17 for ST200)
+ * must be the device ID to compare against for these operations to work - the
+ * poke loop code does not try to retrieve the device ID itself.
+ */
+#define IF_DEVID_GE(NESTLEVEL, VAL)			.long OP_IF_DEVID_GE, VAL, (NESTLEVEL ## f - .)
+#define IF_DEVID_LE(NESTLEVEL, VAL)			.long OP_IF_DEVID_LE, VAL, (NESTLEVEL ## f - .)
+/* The end marker needs two extra entries which get read by the code, but are
+   never used.
+ */
+#define END_MARKER					.long OP_END_POKES, 0, 0
+
+/*
+ * For compatibility with old poke tables we define some of the old names.
+ * Normally we warn about using the old names, but the warnings can be turned
+ * off by defining the macro POKETABLE_NO_WARNINGS.
+ */
+#ifdef POKETABLE_NO_WARNINGS
+	#define POKE_CHAR(A, VAL)	POKE8(A, VAL)
+	#define POKE_SHORT(A, VAL)	POKE16(A, VAL)
+	#define POKE_LONG(A, VAL)	POKE32(A, VAL)
+	#define OR_LONG(A, VAL)		OR32(A, VAL)
+	#define UPDATE_LONG(A, AND, OR)	UPDATE32(A, AND, OR)
+	#define POKE_UPDATE_LONG(A1, A2, AND, SHIFT, OR) POKE_UPDATE32(A1, A2, AND, SHIFT, OR)
+	#define WHILE_NE(A, AND, VAL)	WHILE_NE32(A, AND, VAL)
+#else
+	#define POKE_CHAR(A, VAL)	POKE8(A, VAL); ASM_WARNING("POKE_CHAR() is deprecated; use POKE8()")
+	#define POKE_SHORT(A, VAL)	POKE16(A, VAL); ASM_WARNING("POKE_SHORT() is deprecated; use POKE16()")
+	#define POKE_LONG(A, VAL)	POKE32(A, VAL); ASM_WARNING("POKE_LONG() is deprecated; use POKE32()")
+	#define OR_LONG(A, VAL)		OR32(A, VAL); ASM_WARNING("OR_LONG() is deprecated; use OR32()")
+	#define UPDATE_LONG(A, AND, OR)	UPDATE32(A, AND, OR); ASM_WARNING("UPDATE_LONG() is deprecated; use UPDATE32()")
+	#define POKE_UPDATE_LONG(A1, A2, AND, SHIFT, OR) POKE_UPDATE32(A1, A2, AND, SHIFT, OR); ASM_WARNING("POKE_UPDATE_LONG() is deprecated; use POKE_UPDATE32()")
+	#define WHILE_NE(A, AND, VAL)	WHILE_NE32(A, AND, VAL); ASM_WARNING("WHILE_NE() is deprecated; use WHILE_NE32()")
+#endif /* !POKETABLE_NO_WARNINGS */
+
+#endif /* __ASSEMBLER__ */
+
+#endif /* !__POKE_LOOP_H_ */
diff -Nru linux/source/src/bsp/fli7610/st40/reset.c linux/source/src/bsp/fli7610/st40/reset.c
--- multicom-4.0.6/linux/source/src/bsp/fli7610/st40/reset.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/st40/reset.c	2012-07-02 15:35:30.000000000 +0100
@@ -0,0 +1,87 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/* 
+ * 
+ */ 
+
+#include <bsp/_bsp.h>
+
+#include "flix7610reg.h"
+
+struct bsp_reg_mask bsp_sys_reset_bypass[] = {
+  {FLIX7610_SYSCONF3_SYS_CFG629, ~0, (1 << 1)},
+  {FLIX7610_SYSCONF3_SYS_CFG629, ~0, (1 << 5)}, 				/* enable BART for RT core */
+//  {FLIX7610_SYSCONF3_SYS_CFG629, ~(0xF >> 18), (0x44000000 >> 18)},	/* RT core BART loads from 0x44000000) */
+  {FLIX7610_SYSCONF3_SYS_CFG629, ~(0xF >> 18), (0x80000000 >> 18)},	/* RT core BART loads from 0x44000000) */
+};
+
+/* Size of the above array */
+unsigned int bsp_sys_reset_bypass_count = sizeof(bsp_sys_reset_bypass)/sizeof(bsp_sys_reset_bypass[0]);
+
+struct bsp_boot_address_reg bsp_sys_boot_registers[] = {
+  {FLIX7610_SYSCONF3_SYS_CFG647, 0, 0x00000007},   /* host 														*/
+  {FLIX7610_SYSCONF3_SYS_CFG648, 0, 0xFFFFFFFE},   /* rt 																*/
+  {FLIX7610_SYSCONF3_SYS_CFG649, 0, 0xFFFFFFE0},   /* video_0								 			*/
+  {FLIX7610_SYSCONF3_SYS_CFG652, 0, 0xFFFFFFE0},   /* video_1 											*/
+  {FLIX7610_SYSCONF3_SYS_CFG650, 0, 0xFFFFFFE0},   /* audio_0 -aud 						*/
+  {FLIX7610_SYSCONF3_SYS_CFG651, 0, 0xFFFFFFE0},   /* audio_1 -sec0 -gp0	*/
+  {FLIX7610_SYSCONF3_SYS_CFG653, 0, 0xFFFFFFE0},   /* sec1-gp1										 */  
+};
+/* Size of the above array */
+unsigned int bsp_sys_boot_registers_count = sizeof(bsp_sys_boot_registers)/sizeof(bsp_sys_boot_registers[0]);
+
+/* FLIX7610 reset bits are active low - mask and ~mask will be used and value
+   should be 0.
+ */
+struct bsp_reg_mask bsp_sys_reset_registers[] = {
+  {FLIX7610_SYSCONF3_SYS_CFG644, ~(1 << 0), 0},	 /* host 														*/
+  {FLIX7610_SYSCONF3_SYS_CFG644, ~(1 << 2), 0},	 /* rt 																*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 27), 0},	/* video_0 											*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 29), 0},	/* video_1 											*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 26), 0},	/* audio_0 -aud 						*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 28), 0},	/* audio_1 -sec0 -gp0	*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 30), 0},	/* sec1-gp1										 */
+};
+/* Size of the above array */
+unsigned int bsp_sys_reset_registers_count = sizeof(bsp_sys_reset_registers)/sizeof(bsp_sys_reset_registers[0]);
+
+/* FLIX7610 has no boot enables - purely controlled by reset bits */
+struct bsp_reg_mask bsp_sys_boot_enable[] = {
+  {NULL, 0, 0},
+  {NULL, 0, 0},
+  {NULL, 0, 0},
+  {NULL, 0, 0},
+  {NULL, 0, 0},
+  {NULL, 0, 0},  
+  {NULL, 0, 0}
+};
+
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru linux/source/src/bsp/fli7610/st40/rt/mbox.c linux/source/src/bsp/fli7610/st40/rt/mbox.c
--- multicom-4.0.6/linux/source/src/bsp/fli7610/st40/rt/mbox.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/st40/rt/mbox.c	2012-07-02 15:35:30.000000000 +0100
@@ -0,0 +1,184 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ * b2000/fli7610 host
+ */
+
+/*
+ * Mailbox allocation
+ * MBOX1_0x000 -> a9     [IRQ 1]
+ * MBOX0_0x100 -> rt     [IRQ 0]
+ * MBOX4_0x100 -> video0 [IRQ 0]
+ * MBOX2_0x100 -> video1 [IRQ 0]
+ * MBOX1_0x100 -> audio  [IRQ 0]
+ * MBOX5_0x100 -> gp0    [IRQ 0]
+ * MBOX3_0x100 -> gp1    [IRQ 0]
+
+ * MBOX0_0x000 ->  ???
+ * MBOX2_0x000 ->  ???
+ * MBOX3_0x000 ->  ???
+ * MBOX4_0x000 ->  ???
+ * MBOX5_0x000 ->  ???
+ * MBOX6_0x000 ->  ???
+ * MBOX6_0x100 ->  ???
+ * MBOX7_0x000 ->  ???
+ * MBOX7_0x100 ->  ???
+ *
+ * IRQ line naming
+ * IRQ0 ---> ST40_IRQ
+ * IRQ1 ---> ST200_IRQ
+ */
+
+#include <bsp/_bsp.h>
+
+#define MBOX0_0_ADDR		0xfde0e000
+#define MBOX1_0_ADDR		0xfde0e800
+#define MBOX1_1_ADDR		0xfde0e900
+#define MBOX2_0_ADDR		0xfde0f000
+#define MBOX3_0_ADDR		0xfde0f800
+#define MBOX4_0_ADDR		0xfde10000
+#define MBOX5_0_ADDR		0xfde10800
+#define MBOX6_0_ADDR		0xfde11000
+#define MBOX7_0_ADDR	 0xfde11800
+
+
+#ifdef __os21__
+
+#include <os21.h>
+
+/* #include <os21/st40/fli7610.h> */
+extern interrupt_name_t OS21_INTERRUPT_MAILBOX_1; //MBOX0 ST40_IRQ
+#define MBOX0_IRQ0	((unsigned int) &OS21_INTERRUPT_MAILBOX_1)
+
+#else
+
+#error Invalid OS type.
+
+#endif
+
+struct bsp_mbox_regs bsp_mailboxes[] =
+{
+  {
+    .base	= (void *) (MBOX0_0_ADDR), 		    /* MBOX0.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX0_0_ADDR+0x100), 		/* MBOX0.1 Mailbox */
+    .interrupt	= MBOX0_IRQ0,								      /* We own this*/
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX1_0_ADDR), 		    /* MBOX1.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX1_0_ADDR+0x100), 		/* MBOX1.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX2_0_ADDR), 		    /* MBOX2.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX2_0_ADDR+0x100),		 /* MBOX2.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX3_0_ADDR),							/* MBOX3.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX3_0_ADDR+0x100),		 /* MBOX3.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX4_0_ADDR),		      /* MBOX4.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX4_0_ADDR+0x100),		  /* MBOX4.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX5_0_ADDR),		      /* MBOX5.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX5_0_ADDR+0x100),		  /* MBOX5.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX6_0_ADDR),		      /* MBOX6.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX6_0_ADDR+0x100),		  /* MBOX6.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX7_0_ADDR),		      /* MBOX7.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX7_0_ADDR+0x100),		  /* MBOX7.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+};
+
+unsigned int bsp_mailbox_count = sizeof(bsp_mailboxes)/sizeof(bsp_mailboxes[0]);
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru linux/source/src/bsp/fli7610/st40/rt/name.c linux/source/src/bsp/fli7610/st40/rt/name.c
--- multicom-4.0.6/linux/source/src/bsp/fli7610/st40/rt/name.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/st40/rt/name.c	2012-07-02 15:35:30.000000000 +0100
@@ -0,0 +1,42 @@
+/**************************************************************
+ * Copyright (C) 2010   STMicroelectronics. All Rights Reserved.
+ * This file is part of the latest release of the Multicom4 project. This release 
+ * is fully functional and provides all of the original MME functionality.This 
+ * release  is now considered stable and ready for integration with other software 
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the 
+ * terms of the GNU General Public License as published by the Free Software Foundation 
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4; 
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - 
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.  
+ * Contact multicom.support@st.com. 
+**************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ * fli7610 ST40 real time
+ */
+
+#include <bsp/_bsp.h>
+
+const char * bsp_cpu_name = "rt";
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru linux/source/src/bsp/fli7610/st40/rt/rt.romgen linux/source/src/bsp/fli7610/st40/rt/rt.romgen
--- multicom-4.0.6/linux/source/src/bsp/fli7610/st40/rt/rt.romgen	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/st40/rt/rt.romgen	2012-07-02 15:35:07.000000000 +0100
@@ -0,0 +1,87 @@
+/*
+This file was automatically generated on Tue 20 Apr 10 at 14:43:47 by user hazellp, host dingly using romgen R1.5.0 with the ST TargetPack hdk7108stx7108
+
+TargetPack files used:
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/cores/jtag_core.xml
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/cores/st231.xml
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/cores/st40_300.xml
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/cores/st40_300_design.xml
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/cores/st40_ccn_regs.xml
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/cores/st40_pmb_addr_array_regs.xml
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/cores/st40_pmb_data_array_regs.xml
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/cores/st40_pmb_regs.py
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/debug/tapmux.xml
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/socs/peripherals/convertor.py
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/socs/peripherals/st40_emi_regs.xml
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/socs/peripherals/tapmux.py
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/utilities/tap/__init__.py
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/utilities/tap/jtag.py
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/utilities/utilities.py
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/boards/hdk7108stx7108/hdk7108stx7108.py
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/boards/hdk7108stx7108/hdk7108stx7108.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/boards/hdk7108stx7108/hdk7108stx7108_design.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/boards/hdk7108stx7108/tm1668_fp.pyc
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/boards/hdk7108stx7108/tm1668_fp.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/clk_common.pyc
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/l2_cache_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/st40_ddr3mixer_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/st40_ddr3pctl_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/st40_ddr3phy_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108.pyc
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108_clockgena_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108_clockgenb_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108_ddrdbg.pyc
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108_design.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108_sysconf_0_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108_sysconf_1_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108_sysconf_2_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108_sysconf_3_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108_sysconf_4_regs.xml
+*/
+POKE32(0xf7100000, 0x00000000)
+POKE32(0xf6100000, 0x80000000)
+POKE32(0xf7100100, 0x00000000)
+POKE32(0xf6100100, 0x80000000)
+POKE32(0xf7100200, 0x00000000)
+POKE32(0xf6100200, 0x80000000)
+POKE32(0xf7100300, 0x00000000)
+POKE32(0xf6100300, 0x80000000)
+POKE32(0xf7100400, 0x00000000)
+POKE32(0xf6100400, 0x80000000)
+POKE32(0xf7100500, 0x00000000)
+POKE32(0xf6100500, 0x80000000)
+POKE32(0xf7100600, 0x00000000)
+POKE32(0xf6100600, 0x80000000)
+POKE32(0xf7100700, 0x00000000)
+POKE32(0xf6100700, 0x80000000)
+POKE32(0xf7100800, 0x00000000)
+POKE32(0xf6100800, 0x80000000)
+POKE32(0xf7100900, 0x00000000)
+POKE32(0xf6100900, 0x80000000)
+POKE32(0xf7100a00, 0x00000000)
+POKE32(0xf6100a00, 0x80000000)
+POKE32(0xf7100b00, 0x00000000)
+POKE32(0xf6100b00, 0x80000000)
+POKE32(0xf7100c00, 0x00000000)
+POKE32(0xf6100c00, 0x80000000)
+POKE32(0xf7100d00, 0x00000000)
+POKE32(0xf6100d00, 0x80000000)
+POKE32(0xf7100e00, 0x00000000)
+POKE32(0xf6100e00, 0x80000000)
+POKE32(0xf7100f00, 0x00000000)
+POKE32(0xf6100f00, 0x80000000)
+POKE32(0xf6100000, 0x80000000)
+POKE32(0xf7100000, 0x40000188)
+POKE32(0xf6100100, 0x88000000)
+POKE32(0xf7100100, 0x48000188)
+POKE32(0xf6100200, 0xa0000000)
+POKE32(0xf7100200, 0x80000188)
+POKE32(0xf6100300, 0xa8000000)
+POKE32(0xf7100300, 0x88000188)
+OR32(0xff000010, 0x00000010)
+IF_EQ32(1, 0xff000010, 0x00000010, 0x00000010)
+  UPDATE32(0xff000010, 0xffffffef, 0x00000010)
+ELSE(1)
+  UPDATE32(0xff000070, 0x7fffffff, 0x80000000)
+ENDIF(1)
diff -Nru linux/source/src/bsp/fli7610/st40/rt/startseinit.S linux/source/src/bsp/fli7610/st40/rt/startseinit.S
--- multicom-4.0.6/linux/source/src/bsp/fli7610/st40/rt/startseinit.S	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/linux/source/src/bsp/fli7610/st40/rt/startseinit.S	2012-07-02 15:35:07.000000000 +0100
@@ -0,0 +1,160 @@
+/*
+ * File     : startseinit.S
+ * Synopsis : Code to transition an ST40 from 29-bit mode to 32-bit SE mode,
+ *            configuring the PMBs, before jumping to normal application
+ *            entrypoint.
+ *
+ * Copyright (c) 2008-2010 STMicroelectronics Limited.  All right reserved.
+ *
+ * For ST40 applications which need to run in SE mode with configured PMBs we
+ * can link the following code and use __start_se_init as the executable entry-
+ * point.
+ *
+ * This code will check whether SE mode is on, and if not configure the PMBs and
+ * enable it.  It is PIC code so that even after linking it can be run from any
+ * address (e.g. it can be copied around and still work, or it can be run from
+ * a 29-bit BART address equivalent to the 32-bit address it is linked for.
+ *
+ * If AT is on, we disable it and run from P0 while turning SE on as we know we
+ * can access the 29-bit RAM via P0 and it will not disappear when SE mode is
+ * enabled.  If we were running from P1 or P2 we would need to know the PMBs
+ * were going to identity map the RAM to the same address, and we cannot
+ * guarantee that (indeed it is not the case for the default way the toolset
+ * configures the PMBs).
+ *
+ * This code uses pokeloop.S and pmbconfig_<platform>.S (or the filename
+ * in the PMBCONFIGINCLUDE macro).
+ */
+
+/*
+ * This code is directly lifted from the OS21 VOB ; examples/st40/os21/romloader/startseinit.S
+ */
+
+#define _SH4REG_ASM_
+#include <asmdefs.h>
+
+/* Make this code specific to the RT on fli7610 */
+#define PMBCONFIGINCLUDE "rt.romgen"
+#include "../flix7610reg.h"
+
+/* This is the symbol we will jump to after enabling SE mode - normally start
+   for the standard C runtime initialisation.
+ */
+#ifndef CRT_ENTRYPOINT
+#define CRT_ENTRYPOINT			start
+#endif /* CRT_ENTRYPOINT */
+
+	.section	.alt0text, "ax", @progbits
+	.org	0
+	.global	__start_se_init
+	.import	CRT_ENTRYPOINT
+	.balign	2
+
+__start_se_init:
+	/* First check whether SE mode is already on (both MMUCR and PASCR) */
+#ifndef __SH4_300__
+	MOV_CONST32_R0	SH4_CCN_MMUCR		/* R0 = MMUCR address */
+	mov.l	@r0, r1
+	mov	#(1 << 4), r0			/* R0 = MMUCR SE bit */
+	tst	r0, r1				/* In SE mode? */
+	bf	crtjmp				/* Skip straight to normal entrypoint */
+#endif /* !__SH4_300__ */
+
+#ifndef __SH4_200__
+	MOV_CONST32_R0	SH4_CCN_PASCR		/* R0 = PASCR address */
+	mov.l	@r0, r1
+	MOV_CONST32_R0	(1 << 31)		/* R0 = PASCR SE bit */
+	tst	r0, r1				/* In SE mode? */
+	bf	crtjmp				/* Skip straight to normal entrypoint */
+#endif /*!__SH4_200__ */
+
+	/*
+	 * We're not in SE mode.  Ensure we're running from P0 before
+	 * continuing.  We need to disable AT (address translation in P0 and P3)
+	 * if it is on.
+	 */
+	MOV_CONST32_R0	SH4_CCN_MMUCR		/* R0 = MMUCR address */
+	mov	r0, r2				/* R2 = MMUCR address */
+	mov.l	@r2, r1
+	mov	#(1 << 0), r0			/* R0 = MMUCR AT bit */
+	not	r0, r0
+	and	r1, r0				/* Force AT bit to 0 */
+	mov.l	r0, @r2				/* AT mode off (if it was on) */
+
+	/* Jump to P0 using an rte */
+	stc	sr, r1				/* Ensure SR register remains the same after rte */
+	ldc	r1, ssr
+	mova	1f, r0				/* Use rte to jump to P0 address */
+	mov	r0, r1
+	MOV_CONST32_R0	0x1FFFFFFF		/* R0 = P0 mask */
+	and	r0, r1
+	ldc	r1, spc
+	rte
+	  nop
+
+	.balign	4
+	/*
+	 * Enable I-cache & D-cache; D-cache in copy-back mode if not already
+	   enabled.
+	 */
+1:	MOV_CONST32_R0	SH4_CCN_CCR		/* R0 = CCR address */
+	mov	r0, r2				/* R2 = CCR address */
+	mov.l	@r2, r1
+	MOV_CONST32_R0	((1 << 8) | (1 << 0))	/* Bits 0 & 8 for OC & IC enable */
+	and	r0, r1
+	cmp/eq	r1, r0				/* Both caches enabled? */
+	bt	1f
+	MOV_CONST32_R0	0x8000090D		/* Caches on, D-cache copy-back,
+						   enhanced mode on SH4-200
+						   series cores */
+	mov.l	r0, @r2
+
+	/* Ensure instruction coherency using an rte */
+	INSTRUCTION_COHERE_TO	1f
+
+	.balign	4
+	/*
+	 * We now call the poke loop with the __pmb_setup_table address in R4 to
+	 * configure the PMBs as required for 32-bit 'space enhancement' mode
+	 * and set the SE bit.
+	 */
+1:	PIC_MOV32	__pmb_setup_table, r4	/* R4 = PMB pokes start address */
+	PIC_CALL	__pokeLoop
+
+	/*
+	 * Ensure cache coherency using an rte at the same time as jumping to
+	 * the C runtime entrypoint.
+	 */
+crtjmp:	stc	sr, r0				/* Ensure SR register remains the same after rte */
+	ldc	r0, ssr
+	mov.l	crt_entrypoint_p, r0		/* Use rte to jump to the normal entrypoint */
+	ldc	r0, spc
+	rte
+	  nop
+
+	.balign	4
+PIC_LABEL	__pmb_setup_table
+PIC_LABEL	__pokeLoop
+
+crt_entrypoint_p:
+	.long	CRT_ENTRYPOINT
+
+/* Include the poke loop code and poke table so we know the poke table code and
+ * pmbconfig_*.S file are consistently preprocessed (they have the same
+ * poketable.h).
+ */
+#define MUST_RUN_FROM_ICACHE		0
+#define POKELOOPSECTION			.alt0text
+#define PMB_CONFIG_TABLE_ONLY
+#include "../pokeloop.S"
+	.balign	4
+__pmb_setup_table:
+#ifdef PMBCONFIGINCLUDE
+#include PMBCONFIGINCLUDE
+#else /* !PMBCONFIGINCLUDE */
+#error No PMB configuration specified for startseinit.S - define PMBCONFIGINCLUDE
+#endif /* PMBCONFIGINCLUDE */
+
+	END_MARKER
+__end_pmb_init:
+	.end
diff -Nru linux/source/src/bsp/makebspst231.inc linux/source/src/bsp/makebspst231.inc
--- multicom-4.0.6/linux/source/src/bsp/makebspst231.inc	2012-03-09 18:06:00.000000000 +0000
+++ multicom-4.0.6/linux/source/src/bsp/makebspst231.inc	2012-07-02 15:35:49.000000000 +0100
@@ -96,9 +96,16 @@
 BSP_CORES = audio0 audio1 video
 $(foreach core,$(BSP_CORES),$(eval $(call BSPLIB_template,$(BSP_SOC),$(core))))
 
+#
 # stxh415
 #
 BSP_SOC   = stxh415
-#BSP_CORES = audio0 audio1 video0 video1 security
 BSP_CORES = audio0  audio1 gp video0 video1
 $(foreach core,$(BSP_CORES),$(eval $(call BSPLIB_template,$(BSP_SOC),$(core))))
+
+#
+# fli7610
+#
+BSP_SOC   = fli7610
+BSP_CORES = audio  gp0 gp1 video0 video1
+$(foreach core,$(BSP_CORES),$(eval $(call BSPLIB_template,$(BSP_SOC),$(core))))
\ No newline at end of file
diff -Nru linux/source/src/bsp/makebspst40.inc linux/source/src/bsp/makebspst40.inc
--- multicom-4.0.6/linux/source/src/bsp/makebspst40.inc	2012-03-09 18:06:00.000000000 +0000
+++ multicom-4.0.6/linux/source/src/bsp/makebspst40.inc	2012-07-02 15:35:49.000000000 +0100
@@ -103,3 +103,9 @@
 BSP_CORES = rt
 $(foreach core,$(BSP_CORES),$(eval $(call BSPLIB_template,$(BSP_SOC),$(core))))
 
+#
+# fli7610
+#
+BSP_SOC   = fli7610
+BSP_CORES = rt
+$(foreach core,$(BSP_CORES),$(eval $(call BSPLIB_template,$(BSP_SOC),$(core))))
diff -Nru linux/source/src/bsp/stxh415/st231/audio0/mbox.c linux/source/src/bsp/stxh415/st231/audio0/mbox.c
--- multicom-4.0.6/linux/source/src/bsp/stxh415/st231/audio0/mbox.c	2012-03-09 18:05:53.000000000 +0000
+++ multicom-4.0.6/linux/source/src/bsp/stxh415/st231/audio0/mbox.c	2012-07-02 15:35:29.000000000 +0100
@@ -70,8 +70,8 @@
 #ifdef __os21__
 #include <os21.h>
 /* #include <os21/st40/stiH415.h> */
-extern interrupt_name_t OS21_INTERRUPT_MAILBOX_1_1; //MBOX1 ST40_IRQ
-#define MBOX1_IRQ0	((unsigned int) &OS21_INTERRUPT_MAILBOX_1_1)
+extern interrupt_name_t OS21_INTERRUPT_MAILBOX_6_1; //MBOX1 ST40_IRQ
+#define MBOX6_IRQ0	((unsigned int) &OS21_INTERRUPT_MAILBOX_6_1)
 #else
 #error Invalid OS type.
 #endif
@@ -97,7 +97,7 @@
   },
   { 
     .base	= (void *) (MBOX1_0_ADDR+0x100), 		/* MBOX1.1 Mailbox */
-    .interrupt	= MBOX1_IRQ0,									      /* We own this one */
+    .interrupt	= 0,									      /* We own this one */
     .flags      = 0
   },
 
@@ -152,7 +152,7 @@
   },
   { 
     .base	= (void *) (MBOX6_0_ADDR+0x100),		  /* MBOX6.1 Mailbox */
-    .interrupt	= 0,
+    .interrupt	= MBOX6_IRQ0,
     .flags      = 0
   },
 
diff -Nru linux/source/src/ics/linux/ics_user_lib.c linux/source/src/ics/linux/ics_user_lib.c
--- multicom-4.0.6/linux/source/src/ics/linux/ics_user_lib.c	2012-03-09 18:05:50.000000000 +0000
+++ multicom-4.0.6/linux/source/src/ics/linux/ics_user_lib.c	2012-07-02 15:35:23.000000000 +0100
@@ -196,7 +196,7 @@
 		err = ics_user_init();
 		if (err != ICS_SUCCESS)
 			return -1;
-        }
+ }
 	
 	res = ioctl(deviceFd, ICS_IOC_CPUINFO, &info);
 
@@ -206,6 +206,82 @@
 	return info.cpuNum;
 }
 
+ICS_ERROR ics_cpu_init (ICS_UINT cpuNum, ICS_ULONG cpuMask, ICS_UINT flags)
+{
+	int res;
+	ICS_ERROR err;
+
+	ics_cpu_init_t init;
+
+	if (deviceFd == DEVICE_CLOSED) {
+		err = ics_user_init();
+		if (err != ICS_SUCCESS)
+			return 0;
+  }
+	
+ init.inittype = 1;
+ init.flags    = flags;
+ init.cpuNum   = cpuNum;
+ init.cpuMask  = cpuMask;
+
+	res = ioctl(deviceFd, ICS_IOC_CPUINIT, &init);
+
+	if (res != 0 || init.err != ICS_SUCCESS)
+		return -1;
+	
+	return ICS_SUCCESS;
+
+}
+
+ICS_ERROR ICS_cpu_init (ICS_UINT flags)
+{
+	int res;
+	ICS_ERROR err;
+
+	ics_cpu_init_t init;
+
+	if (deviceFd == DEVICE_CLOSED) {
+		err = ics_user_init();
+		if (err != ICS_SUCCESS)
+			return 0;
+  }
+	
+ init.inittype = 0;
+ init.flags    = flags;
+
+	res = ioctl(deviceFd, ICS_IOC_CPUINIT, &init);
+
+	if (res != 0 || init.err != ICS_SUCCESS)
+		return -1;
+	
+	return ICS_SUCCESS;
+}
+
+
+void ICS_cpu_term (ICS_UINT flags)
+{
+	int res;
+	ICS_ERROR err;
+
+	ics_cpu_term_t term;
+
+	if (deviceFd == DEVICE_CLOSED) {
+		err = ics_user_init();
+		if (err != ICS_SUCCESS)
+			return;
+ }
+	
+ term.flags =flags;
+
+	res = ioctl(deviceFd, ICS_IOC_CPUTERM, &term);
+
+	if (res != 0 || term.err != ICS_SUCCESS)
+		return;
+	
+	return;
+}
+
+
 ICS_ULONG ics_cpu_mask (void)
 {
 	int res;
@@ -312,6 +388,55 @@
   return version_string;
 }
 
+ICS_ERROR ICS_region_add (ICS_VOID *map, ICS_OFFSET paddr, ICS_SIZE size, ICS_MEM_FLAGS mflags, ICS_ULONG cpuMask,
+			  ICS_REGION *regionp)
+{
+	int res;
+	ICS_ERROR err;
+
+	ics_user_region_t userregion;
+
+	if (deviceFd == DEVICE_CLOSED) {
+		err = ics_user_init();
+		if (err != ICS_SUCCESS)
+			return ICS_NOT_INITIALIZED;
+        }
+
+
+	userregion.map      = map;
+	userregion.paddr    = paddr; 
+	userregion.size     = size;
+	userregion.mflags   = mflags;
+	userregion.cpuMask  = cpuMask;
+
+	res = ioctl(deviceFd, ICS_IOC_REGIONADD, &userregion);
+	err = (res == -EFAULT) ? ICS_INVALID_ARGUMENT : userregion.err;
+
+ *regionp = userregion.region;
+	return err;
+}
+
+ICS_ERROR ICS_region_remove (ICS_REGION region, ICS_UINT flags)
+{
+	int res;
+	ICS_ERROR err;
+
+	ics_user_region_t userregion;
+
+	if (deviceFd == DEVICE_CLOSED) {
+		err = ics_user_init();
+		if (err != ICS_SUCCESS)
+			return ICS_NOT_INITIALIZED;
+        }
+	
+	userregion.region  =  region;
+	userregion.mflags   = flags;
+
+	res = ioctl(deviceFd, ICS_IOC_REGIONREMOVE, &userregion);
+	err = (res == -EFAULT) ? ICS_INVALID_ARGUMENT : userregion.err;
+
+	return err;
+}
 /*
  * Local variables:
  * c-file-style: "linux"
diff -Nru linux/source/src/ics/linux/ics_user_module.c linux/source/src/ics/linux/ics_user_module.c
--- multicom-4.0.6/linux/source/src/ics/linux/ics_user_module.c	2012-03-09 18:05:50.000000000 +0000
+++ multicom-4.0.6/linux/source/src/ics/linux/ics_user_module.c	2012-07-02 15:35:23.000000000 +0100
@@ -299,6 +299,116 @@
 	return res;
 }
 
+int ics_user_cpu_init(ics_user_t *instance,void * arg)
+{
+
+	ICS_ERROR              err = ICS_INVALID_ARGUMENT;
+	int                    res = -ENODEV;
+
+	ics_cpu_init_t         *init = (ics_cpu_init_t *) arg;
+	ics_cpu_init_t          localinit;
+
+	/* copy the bsp parameters */
+	if (copy_from_user(&localinit, init, sizeof(localinit))) {
+		res = -EFAULT;
+		goto errorExit;
+	}
+
+ if(localinit.inittype == 0 )	
+   err = ICS_cpu_init(localinit.flags);
+ else
+   err = ics_cpu_init(localinit.cpuNum, localinit.cpuMask, localinit.flags);
+
+	return put_user(err, &(init->err));
+
+errorExit:
+ (void) put_user(err, &(init->err));
+			
+	return res;
+}
+
+int ics_user_cpu_term(ics_user_t *instance,void * arg)
+{
+
+	ICS_ERROR              err = ICS_INVALID_ARGUMENT;
+	int                    res = -ENODEV;
+
+	ics_cpu_term_t         *term = (ics_cpu_term_t *) arg;
+	ics_cpu_term_t          localterm;
+
+	/* copy the bsp parameters */
+	if (copy_from_user(&localterm, term, sizeof(localterm))) {
+		res = -EFAULT;
+		goto errorExit;
+	}
+	
+ ICS_cpu_term(localterm.flags);
+ err = ICS_SUCCESS;
+
+	return put_user(err, &(term->err));
+
+errorExit:
+ (void) put_user(err, &(term->err));
+			
+	return res;
+}
+
+int ics_user_region_add(ics_user_t *instance,void * arg)
+{
+	ICS_ERROR              err = ICS_INVALID_ARGUMENT;
+	int                    res = -ENODEV;
+
+	ics_user_region_t         *region = (ics_user_region_t *) arg;
+	ics_user_region_t          localregion;
+
+	/* copy the region parameters */
+	if (copy_from_user(&localregion, region, sizeof(localregion))) {
+		res = -EFAULT;
+		goto errorExit;
+	}
+ 
+ /* Add region */
+ err = ICS_region_add(localregion.map,localregion.paddr,localregion.size,localregion.mflags,localregion.cpuMask,&localregion.region);
+
+ /*Copy output parmater from ICS_region_add */
+	res = copy_to_user(region,&localregion,sizeof(localregion));
+	if (res != 0)
+			goto errorExit;
+
+	return put_user(err, &(region->err));
+
+errorExit:
+ (void) put_user(err, &(region->err));
+			
+	return res;
+}
+
+int ics_user_region_remove(ics_user_t *instance,void * arg)
+{
+ ICS_ERROR              err = ICS_INVALID_ARGUMENT;
+	int                    res = -ENODEV;
+
+	ics_user_region_t         *region = (ics_user_region_t *) arg;
+	ics_user_region_t          localregion;
+
+	/* copy the region parameters */
+	if (copy_from_user(&localregion, region, sizeof(localregion))) {
+		res = -EFAULT;
+		goto errorExit;
+	}
+ 
+ /* Remove region */
+ err = ICS_region_remove(localregion.region,localregion.mflags);
+
+	return put_user(err, &(region->err));
+
+errorExit:
+ (void) put_user(err, &(region->err));
+			
+	return res;
+
+}
+
 int ics_user_cpu_info (ics_user_t *instance, void *arg)
 {
 	ICS_ERROR              err = ICS_INVALID_ARGUMENT;
@@ -462,6 +572,22 @@
 		res = ics_user_cpu_lookup(instance, (void *) arg);
 		break;
 
+	case ICS_IOC_CPUINIT:
+		res = ics_user_cpu_init(instance, (void *) arg);
+		break;
+
+	case ICS_IOC_CPUTERM:
+		res = ics_user_cpu_term(instance, (void *) arg);
+		break;
+
+	case ICS_IOC_REGIONADD:
+		res = ics_user_region_add(instance, (void *) arg);
+		break;
+
+	case ICS_IOC_REGIONREMOVE:
+		res = ics_user_region_remove(instance, (void *) arg);
+		break;
+
 	default:
 		break;
 	}
diff -Nru linux/source/src/ics/Makefile linux/source/src/ics/Makefile
--- multicom-4.0.6/linux/source/src/ics/Makefile	2012-03-09 18:06:00.000000000 +0000
+++ multicom-4.0.6/linux/source/src/ics/Makefile	2012-07-02 15:35:49.000000000 +0100
@@ -82,12 +82,16 @@
 bsp-prefix := $(BSP_SRCDIR)/stxh205
 endif
 
-#ifdef CONFIG_CPU_32v7
 ifdef CONFIG_MACH_STM_STIH415
 bsp-prefix := $(BSP_SRCDIR)/stxh415
 defualt-cpu	:=cortexa9
 endif
 
+ifdef CONFIG_MACH_STM_FLI7610
+bsp-prefix := $(BSP_SRCDIR)/fli7610
+defualt-cpu	:=cortexa9
+endif
+
 ics-objs := \
 	admin/admin.o \
 	admin/admin_client.o \
diff -Nru linux/source/src/ics/region/region.c linux/source/src/ics/region/region.c
--- multicom-4.0.6/linux/source/src/ics/region/region.c	2012-03-09 18:05:51.000000000 +0000
+++ multicom-4.0.6/linux/source/src/ics/region/region.c	2012-07-02 15:35:26.000000000 +0100
@@ -433,6 +433,11 @@
   {
     ICS_OFFSET    base;
     ICS_MEM_FLAGS mmflags;
+  
+   /* Can't find physical address on ARM uniprocessor-kernel if the memory is section
+    * mapped.
+    */
+#if !defined (__arm__) || defined (CONFIG_SMP) 
 
     /* Convert supplied virtual address to physical to generate the
      * region base offset
@@ -445,6 +450,7 @@
 		  map, base, paddr, err);
       goto error;
     }
+#endif /* !defined (__arm__) || defined (CONFIG_SMP) */
 
 #if 0
     /* XXXX Disabled this code as it can't reliably check
diff -Nru linux/source/src/mme/include/_mme_user.h linux/source/src/mme/include/_mme_user.h
--- multicom-4.0.6/linux/source/src/mme/include/_mme_user.h	2012-03-09 18:05:57.000000000 +0000
+++ multicom-4.0.6/linux/source/src/mme/include/_mme_user.h	2012-07-02 15:35:41.000000000 +0100
@@ -111,6 +111,7 @@
 extern int  mme_user_free_buffer (mme_user_t *instance, void *arg);
 extern void mme_user_buffer_release (mme_user_t *instance);
 extern int mme_user_mmeinit(mme_user_t *instance, void *arg);
+extern int mme_user_mmeterm(mme_user_t *instance, void *arg);
 extern int  mme_user_is_transformer_registered(mme_user_t *instance, void *arg);
 extern int  mme_user_set_tuneable(mme_user_t *instance, void *arg);
 extern int  mme_user_get_tuneable(mme_user_t *instance, void *arg);
diff -Nru linux/source/src/mme/linux/mme_user_init.c linux/source/src/mme/linux/mme_user_init.c
--- multicom-4.0.6/linux/source/src/mme/linux/mme_user_init.c	2012-03-09 18:05:49.000000000 +0000
+++ multicom-4.0.6/linux/source/src/mme/linux/mme_user_init.c	2012-07-02 15:35:20.000000000 +0100
@@ -54,3 +54,17 @@
  return res;
 }
 
+int mme_user_mmeterm(mme_user_t *instance, void *arg)
+{
+	 int                    res = -ENODEV;
+	 MME_ERROR              status = MME_INTERNAL_ERROR;
+
+  mme_userterm_t *user_mmeterm = (mme_userterm_t *) arg;
+
+  /* Init MME */
+  status = MME_Term(); 
+  if (put_user(status,&(user_mmeterm->status))) {
+		  res = -EFAULT;
+	 }
+ return res;
+}
diff -Nru linux/source/src/mme/linux/mme_user_lib.c linux/source/src/mme/linux/mme_user_lib.c
--- multicom-4.0.6/linux/source/src/mme/linux/mme_user_lib.c	2012-03-09 18:05:49.000000000 +0000
+++ multicom-4.0.6/linux/source/src/mme/linux/mme_user_lib.c	2012-07-02 15:35:20.000000000 +0100
@@ -119,8 +119,9 @@
 
 MME_ERROR MME_Term (void)
 {
-        int res;
-	int idx;
+  int res;
+	 int idx;
+  mme_userterm_t usermmeterm;
 
         if (deviceFd == DEVICE_CLOSED) {
 	        return MME_DRIVER_NOT_INITIALIZED;
@@ -131,6 +132,9 @@
 		if (insTrans[idx].handle != 0)
 			return MME_HANDLES_STILL_OPEN;
 
+
+	  res = ioctl(deviceFd, MME_IOC_MMETERM, &usermmeterm);
+
         res = close(deviceFd);
         if (res != 0) {
 	        return MME_HANDLES_STILL_OPEN;
diff -Nru linux/source/src/mme/linux/mme_user_module.c linux/source/src/mme/linux/mme_user_module.c
--- multicom-4.0.6/linux/source/src/mme/linux/mme_user_module.c	2012-03-09 18:05:49.000000000 +0000
+++ multicom-4.0.6/linux/source/src/mme/linux/mme_user_module.c	2012-07-02 15:35:20.000000000 +0100
@@ -302,6 +302,10 @@
 		res = mme_user_mmeinit(instance, (void *) arg);
 		break;
 
+	case MME_IOC_MMETERM:
+		res = mme_user_mmeterm(instance, (void *) arg);
+		break;
+
 	default:
 		break;
 	}
diff -Nru linux/test/src/include/harness.h linux/test/src/include/harness.h
--- multicom-4.0.6/linux/test/src/include/harness.h	2012-03-09 18:06:00.000000000 +0000
+++ multicom-4.0.6/linux/test/src/include/harness.h	2012-07-02 15:35:49.000000000 +0100
@@ -134,7 +134,6 @@
 #endif /* __sh__ || __arm__ */ 
 #endif /* CPU_LOAD */
 
-#if defined(__os21__) || defined(__KERNEL__)  
   {
     ICS_ERROR err;
     
@@ -142,12 +141,11 @@
     
     /* Initialise ICS system */
     err = ics_cpu_init(ics_cpuNum, ics_cpuMask, ICS_INIT_WATCHDOG);
-    //err = ics_cpu_init(ics_cpuNum, ics_cpuMask, ICS_INIT_CONNECT_ALL);
+    /* err = ics_cpu_init(ics_cpuNum, ics_cpuMask, ICS_INIT_CONNECT_ALL); */
     assert(err == ICS_SUCCESS);
     
     OS_PRINTF("running: ICS version '%s'\n", ics_cpu_version());
   }
-#endif /* __os21__ || __KERNEL__ */
 
 #ifdef __os21__
   /* Display this again after ics_cpu_init() so it is captured in the cyclic log */
@@ -173,9 +171,7 @@
 void harness_shutdown (void)
 {
 
-#if defined(__os21__)
   ICS_cpu_term(0);
-#endif
 
   platform_term();
 }
diff -Nru linux/test/src/tests/embx/perf/embx10_main.c linux/test/src/tests/embx/perf/embx10_main.c
--- multicom-4.0.6/linux/test/src/tests/embx/perf/embx10_main.c	2012-03-09 18:05:56.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/embx/perf/embx10_main.c	2012-07-02 15:35:40.000000000 +0100
@@ -48,7 +48,7 @@
 #define NSEC			1000*USEC
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/ics/channel/channel11_main.c linux/test/src/tests/ics/channel/channel11_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/channel/channel11_main.c	2012-03-09 18:05:54.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/channel/channel11_main.c	2012-07-02 15:35:33.000000000 +0100
@@ -52,7 +52,7 @@
 #define SELF		ics_cpuNum
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/ics/channel/channel12_main.c linux/test/src/tests/ics/channel/channel12_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/channel/channel12_main.c	2012-03-09 18:05:55.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/channel/channel12_main.c	2012-07-02 15:35:34.000000000 +0100
@@ -52,7 +52,7 @@
 #define SELF		ics_cpuNum
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/ics/channel/channel13_main.c linux/test/src/tests/ics/channel/channel13_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/channel/channel13_main.c	2012-03-09 18:05:55.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/channel/channel13_main.c	2012-07-02 15:35:35.000000000 +0100
@@ -53,7 +53,7 @@
 #define SELF		ics_cpuNum
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/ics/channel/channel14_main.c linux/test/src/tests/ics/channel/channel14_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/channel/channel14_main.c	2012-03-09 18:05:55.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/channel/channel14_main.c	2012-07-02 15:35:34.000000000 +0100
@@ -53,7 +53,7 @@
 #define SELF		ics_cpuNum
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/ics/channel/channel82_main.c linux/test/src/tests/ics/channel/channel82_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/channel/channel82_main.c	2012-03-09 18:05:55.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/channel/channel82_main.c	2012-07-02 15:35:34.000000000 +0100
@@ -39,7 +39,7 @@
  * All CPUs then fill each channel in a global exchange like pattern
  */
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru linux/test/src/tests/ics/channel/channel83_main.c linux/test/src/tests/ics/channel/channel83_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/channel/channel83_main.c	2012-03-09 18:05:55.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/channel/channel83_main.c	2012-07-02 15:35:35.000000000 +0100
@@ -28,7 +28,7 @@
 
 #define CPU_LOAD
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru linux/test/src/tests/ics/channel/channel84_main.c linux/test/src/tests/ics/channel/channel84_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/channel/channel84_main.c	2012-03-09 18:05:55.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/channel/channel84_main.c	2012-07-02 15:35:34.000000000 +0100
@@ -28,7 +28,7 @@
 
 #define CPU_LOAD
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru linux/test/src/tests/ics/channel/channel86_main.c linux/test/src/tests/ics/channel/channel86_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/channel/channel86_main.c	2012-03-09 18:05:55.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/channel/channel86_main.c	2012-07-02 15:35:35.000000000 +0100
@@ -28,7 +28,7 @@
 
 #define CPU_LOAD
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru linux/test/src/tests/ics/dyn/dyn10_main.c linux/test/src/tests/ics/dyn/dyn10_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/dyn/dyn10_main.c	2012-03-09 18:05:55.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/dyn/dyn10_main.c	2012-07-02 15:35:35.000000000 +0100
@@ -46,7 +46,7 @@
 #define TEST_MODULE	"ics/dyn/dyn"
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/ics/dyn/dyn11_main.c linux/test/src/tests/ics/dyn/dyn11_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/dyn/dyn11_main.c	2012-03-09 18:05:55.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/dyn/dyn11_main.c	2012-07-02 15:35:36.000000000 +0100
@@ -48,7 +48,7 @@
 #define MASTER		(SELF == 0)
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/ics/dyn/dyn12_main.c linux/test/src/tests/ics/dyn/dyn12_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/dyn/dyn12_main.c	2012-03-09 18:05:55.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/dyn/dyn12_main.c	2012-07-02 15:35:36.000000000 +0100
@@ -53,7 +53,7 @@
 #define MASTER		(SELF == 0)
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/ics/load/load00_main.c linux/test/src/tests/ics/load/load00_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/load/load00_main.c	2012-03-09 18:05:54.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/load/load00_main.c	2012-07-02 15:35:32.000000000 +0100
@@ -41,7 +41,7 @@
 #define CPU_MASK	(1UL << SELF) 	/* Only me */
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/ics/load/load01_main.c linux/test/src/tests/ics/load/load01_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/load/load01_main.c	2012-03-09 18:05:54.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/load/load01_main.c	2012-07-02 15:35:32.000000000 +0100
@@ -42,7 +42,7 @@
 
 /* Determines load filename */
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/ics/load/load10_main.c linux/test/src/tests/ics/load/load10_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/load/load10_main.c	2012-03-09 18:05:54.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/load/load10_main.c	2012-07-02 15:35:32.000000000 +0100
@@ -44,7 +44,7 @@
 #define REPS		10
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/ics/load/load82_main.c linux/test/src/tests/ics/load/load82_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/load/load82_main.c	2012-03-09 18:05:54.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/load/load82_main.c	2012-07-02 15:35:32.000000000 +0100
@@ -43,7 +43,7 @@
 #define MASTER_NAME	"MASTER"
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru linux/test/src/tests/ics/msg/msg11_main.c linux/test/src/tests/ics/msg/msg11_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/msg/msg11_main.c	2012-03-09 18:05:54.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/msg/msg11_main.c	2012-07-02 15:35:33.000000000 +0100
@@ -48,7 +48,7 @@
 #define PEER		(MASTER ? TEST_CPU : 0)
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/ics/msg/msg13_main.c linux/test/src/tests/ics/msg/msg13_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/msg/msg13_main.c	2012-03-09 18:05:54.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/msg/msg13_main.c	2012-07-02 15:35:33.000000000 +0100
@@ -51,7 +51,7 @@
 #define PEER		(MASTER ? TEST_CPU : 0)
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/ics/msg/msg81_main.c linux/test/src/tests/ics/msg/msg81_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/msg/msg81_main.c	2012-03-09 18:05:54.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/msg/msg81_main.c	2012-07-02 15:35:32.000000000 +0100
@@ -47,7 +47,7 @@
 #define SELF		ics_cpuNum
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #else
diff -Nru linux/test/src/tests/ics/msg/msg83_main.c linux/test/src/tests/ics/msg/msg83_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/msg/msg83_main.c	2012-03-09 18:05:54.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/msg/msg83_main.c	2012-07-02 15:35:33.000000000 +0100
@@ -48,7 +48,7 @@
 
 /* #define CPU_MASK	ics_cpuMask */
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #else
diff -Nru linux/test/src/tests/ics/msg/msg84_main.c linux/test/src/tests/ics/msg/msg84_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/msg/msg84_main.c	2012-03-09 18:05:54.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/msg/msg84_main.c	2012-07-02 15:35:33.000000000 +0100
@@ -49,7 +49,7 @@
 
 /* #define CPU_MASK	ics_cpuMask */
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #else
diff -Nru linux/test/src/tests/ics/perf/channel10_main.c linux/test/src/tests/ics/perf/channel10_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/perf/channel10_main.c	2012-03-09 18:05:55.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/perf/channel10_main.c	2012-07-02 15:35:36.000000000 +0100
@@ -39,7 +39,7 @@
 #define TEST			"ics/perf/channel10"
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/ics/perf/osbench10_main.c linux/test/src/tests/ics/perf/osbench10_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/perf/osbench10_main.c	2012-03-09 18:05:55.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/perf/osbench10_main.c	2012-07-02 15:35:36.000000000 +0100
@@ -34,7 +34,7 @@
 #define NSEC		1000*USEC
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/ics/perf/port80_main.c linux/test/src/tests/ics/perf/port80_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/perf/port80_main.c	2012-03-09 18:05:55.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/perf/port80_main.c	2012-07-02 15:35:36.000000000 +0100
@@ -54,7 +54,7 @@
 #define CPU_NAME		ics_cpu_name(ics_cpuNum)
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru linux/test/src/tests/ics/watchdog/watchdog81_main.c linux/test/src/tests/ics/watchdog/watchdog81_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/watchdog/watchdog81_main.c	2012-03-09 18:05:54.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/watchdog/watchdog81_main.c	2012-07-02 15:35:32.000000000 +0100
@@ -48,7 +48,7 @@
 #define REPS		10
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru linux/test/src/tests/ics/watchdog/watchdog82_main.c linux/test/src/tests/ics/watchdog/watchdog82_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/watchdog/watchdog82_main.c	2012-03-09 18:05:54.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/watchdog/watchdog82_main.c	2012-07-02 15:35:32.000000000 +0100
@@ -45,7 +45,7 @@
 #define REPS		10
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru linux/test/src/tests/ics/watchdog/watchdog83_main.c linux/test/src/tests/ics/watchdog/watchdog83_main.c
--- multicom-4.0.6/linux/test/src/tests/ics/watchdog/watchdog83_main.c	2012-03-09 18:05:54.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/ics/watchdog/watchdog83_main.c	2012-07-02 15:35:32.000000000 +0100
@@ -45,7 +45,7 @@
 #define REPS		10
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru linux/test/src/tests/mme/benchmark/benchmark10_main.c linux/test/src/tests/mme/benchmark/benchmark10_main.c
--- multicom-4.0.6/linux/test/src/tests/mme/benchmark/benchmark10_main.c	2012-03-09 18:05:55.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/mme/benchmark/benchmark10_main.c	2012-07-02 15:35:38.000000000 +0100
@@ -42,7 +42,7 @@
 
 #define TEST			"mme/benchmark/benchmark10"
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
@@ -65,6 +65,7 @@
 #define TRANSFORMER    "mme.benchmark"
 
 #if defined __linux__ && defined __KERNEL__
+#include <asm/io.h>		/* ioremap() etc */
 #define HIGH_PRECISION long /* this is good enough for LKM since HZ is small */
 #else
 #define HIGH_PRECISION double
@@ -78,6 +79,19 @@
 
 #if defined(CONF_MASTER)
 
+#ifndef ioremap_cache
+/* XXXX What can we do in this case ? */
+#if defined (__arm__)
+#define ioremap_cache ioremap_cached
+#else
+#define ioremap_cache ioremap
+#endif
+#endif
+extern ICS_ERROR ics_os_virt2phys (ICS_VOID *vaddr, ICS_OFFSET *paddrp, ICS_MEM_FLAGS *mflagsp);
+#if defined (__arm__)
+extern void set_iounmap_nonlazy(void);
+#endif
+struct bpa2_part *bpa2_partition=NULL; 
 static OS_SIGNAL callbackReceived;
 
 static void TransformerCallback(MME_Event_t Event, MME_Command_t *CallbackData, void *UserData)
@@ -132,28 +146,83 @@
 
 #if defined(__linux__) && defined(__KERNEL__) 
 void* big_malloc(size_t size) {
-    void* pAddr;
+   void* pAddr;
+   unsigned long addr;
+   unsigned long npages;
+   char *bigphys_part   = "bigphysarea";
 #if defined(__sh__) || defined(__arm__)
     if( size >= (PAGE_SIZE * 4) )
-	pAddr = (void *)bigphysarea_alloc( size );
+    {
+    		 bpa2_partition = bpa2_find_part(bigphys_part);
+    		 if (bpa2_partition)
+       {
+          npages = ((size-1)/PAGE_SIZE)+1;
+         	addr = bpa2_alloc_pages(bpa2_partition, npages,PAGE_SIZE,GFP_KERNEL);
+         	if (!addr)
+	         {
+            printf("%s:%d Failed bpa2_alloc_pages  memory addr@%p npages %d\n",__FUNCTION__,__LINE__,addr, npages);
+       	    return NULL;
+          }
+         	/* Always map memory CACHED */
+          pAddr = ioremap_cache(addr, npages*PAGE_SIZE);
+	
+        	 if (pAddr == NULL)
+	            printf("%s:%d Failed to map contig memory @ %lx size %d\n",__FUNCTION__,__LINE__,pAddr, size);
+       }
+	      else
+          pAddr = (void *)bigphysarea_alloc( size );
+    }
     else
 #endif
-	pAddr = (void *)kmalloc( size, GFP_KERNEL );
+       pAddr = (void *)kmalloc( size, GFP_KERNEL );
+       if (pAddr == NULL)
+          printf("%s:%d memory pAddr (%p) size %d\n",__FUNCTION__,__LINE__,pAddr, size);
     return pAddr;
 }
 
 
 void big_free(void* addr) {
 #if defined(__sh__) || defined(__arm__)
-    unsigned long  Base, Size;
-    unsigned long  Address = (unsigned long)addr;
+   unsigned long  Base, Size;
+   unsigned long  Address = (unsigned long)addr;
 
-    bigphysarea_memory( &Base, &Size );
-    if( (Address >= Base) && (Address < (Base + Size)) )
-        bigphysarea_free_pages((void*)addr);
-    else
+ 		if (bpa2_partition)
+   {
+     	ICS_ERROR     err;
+      ICS_MEM_FLAGS mflags;
+      ICS_OFFSET paddr;
+
+     	/* First need to convert vaddr back to phys */
+      err = ics_os_virt2phys(addr,&paddr,&mflags);
+      bpa2_memory(bpa2_partition,&Base, &Size );
+      if( (paddr >= Base) && (paddr < (Base + Size)) )
+      {
+
+#if defined (__arm__)
+         /* Call before iounmap(), if you want vm_area_struct's to be freed immediately.  */
+         /* Check kernel file vmalloc.c, if it exports the symbol "set_iounmap_nonlazy". */
+#ifndef DISABLE_IOUNMAP_NONLAZY
+         set_iounmap_nonlazy();
+#endif
+#endif
+
+     	   /* Now unmap vaddr space */
+    	    iounmap(addr);
+
+    	    if (err == ICS_SUCCESS)
+	           bpa2_free_pages(bpa2_partition, paddr);
+         return;
+      }
+   }
+    /* May be meomory is allocated from old legacy bigphyarea or from kmalloc area. */
+   {
+      bigphysarea_memory( &Base, &Size );
+      if( (Address >= Base) && (Address < (Base + Size)) )
+         bigphysarea_free_pages((void*)addr);
+      else
 #endif
-        free(addr);
+         free(addr);
+   }
 }
 
 #else
diff -Nru linux/test/src/tests/mme/buffercontent/buffercontent10_main.c linux/test/src/tests/mme/buffercontent/buffercontent10_main.c
--- multicom-4.0.6/linux/test/src/tests/mme/buffercontent/buffercontent10_main.c	2012-03-09 18:05:55.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/mme/buffercontent/buffercontent10_main.c	2012-07-02 15:35:38.000000000 +0100
@@ -35,7 +35,7 @@
 #define TEST			"mme/buffercontent/buffercontent10"
 #endif
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
@@ -66,6 +66,7 @@
 
 #if defined __linux__ && defined __KERNEL__
 #include <linux/mm.h>
+#include <asm/io.h>		/* ioremap() etc */
 #define HIGH_PRECISION long /* this is good enough for LKM since HZ is small */
 #else
 #include <stdlib.h>
@@ -145,6 +146,19 @@
 
 #if defined(CONF_MASTER)
 
+#ifndef ioremap_cache
+/* XXXX What can we do in this case ? */
+#if defined (__arm__)
+#define ioremap_cache ioremap_cached
+#else
+#define ioremap_cache ioremap
+#endif
+#endif
+extern ICS_ERROR ics_os_virt2phys (ICS_VOID *vaddr, ICS_OFFSET *paddrp, ICS_MEM_FLAGS *mflagsp);
+#if defined (__arm__)
+extern void set_iounmap_nonlazy(void);
+#endif
+struct bpa2_part *bpa2_partition=NULL; 
 static OS_SIGNAL callbackReceived;
 volatile int callbackCount=0;
 static void TransformerCallback(MME_Event_t Event, MME_Command_t *CallbackData, void *UserData)
@@ -163,28 +177,83 @@
 
 #if defined(__linux__) && defined(__KERNEL__) 
 void* big_malloc(size_t size) {
-    void* pAddr;
+   void* pAddr;
+   unsigned long addr;
+   unsigned long npages;
+   char *bigphys_part   = "bigphysarea";
 #if defined(__sh__) || defined(__arm__)
     if( size >= (PAGE_SIZE * 4) )
-        pAddr = (void *)bigphysarea_alloc( size );
+    {
+    		 bpa2_partition = bpa2_find_part(bigphys_part);
+    		 if (bpa2_partition)
+       {
+          npages = ((size-1)/PAGE_SIZE)+1;
+         	addr = bpa2_alloc_pages(bpa2_partition, npages,PAGE_SIZE,GFP_KERNEL);
+         	if (!addr)
+	         {
+            printf("%s:%d Failed bpa2_alloc_pages  memory addr@%p npages %d\n",__FUNCTION__,__LINE__,addr, npages);
+       	    return NULL;
+          }
+         	/* Always map memory CACHED */
+          pAddr = ioremap_cache(addr, npages*PAGE_SIZE);
+	
+        	 if (pAddr == NULL)
+	            printf("%s:%d Failed to map contig memory @ %lx size %d\n",__FUNCTION__,__LINE__,pAddr, size);
+       }
+	      else
+          pAddr = (void *)bigphysarea_alloc( size );
+    }
     else
 #endif
-        pAddr = (void *)kmalloc( size, GFP_KERNEL );
+       pAddr = (void *)kmalloc( size, GFP_KERNEL );
+       if (pAddr == NULL)
+          printf("%s:%d memory pAddr (%p) size %d\n",__FUNCTION__,__LINE__,pAddr, size);
     return pAddr;
 }
 
 
 void big_free(void* addr) {
 #if defined(__sh__) || defined(__arm__)
-    unsigned long  Base, Size;
-    unsigned long  Address = (unsigned long)addr;
+   unsigned long  Base, Size;
+   unsigned long  Address = (unsigned long)addr;
 
-    bigphysarea_memory( &Base, &Size );
-    if( (Address >= Base) && (Address < (Base + Size)) )
-        bigphysarea_free_pages((void*)addr);
-    else
+ 		if (bpa2_partition)
+   {
+     	ICS_ERROR     err;
+      ICS_MEM_FLAGS mflags;
+      ICS_OFFSET paddr;
+
+     	/* First need to convert vaddr back to phys */
+      err = ics_os_virt2phys(addr,&paddr,&mflags);
+      bpa2_memory(bpa2_partition,&Base, &Size );
+      if( (paddr >= Base) && (paddr < (Base + Size)) )
+      {
+
+#if defined (__arm__)
+         /* Call before iounmap(), if you want vm_area_struct's to be freed immediately.  */
+         /* Check kernel file vmalloc.c, if it exports the symbol "set_iounmap_nonlazy". */
+#ifndef DISABLE_IOUNMAP_NONLAZY
+         set_iounmap_nonlazy();
+#endif
+#endif
+
+     	   /* Now unmap vaddr space */
+    	    iounmap(addr);
+
+    	    if (err == ICS_SUCCESS)
+	           bpa2_free_pages(bpa2_partition, paddr);
+         return;
+      }
+   }
+    /* May be meomory is allocated from old legacy bigphyarea or from kmalloc area. */
+   {
+      bigphysarea_memory( &Base, &Size );
+      if( (Address >= Base) && (Address < (Base + Size)) )
+         bigphysarea_free_pages((void*)addr);
+      else
 #endif
-        free(addr);
+         free(addr);
+   }
 }
 
 #else
diff -Nru linux/test/src/tests/mme/kill/kill10_main.c linux/test/src/tests/mme/kill/kill10_main.c
--- multicom-4.0.6/linux/test/src/tests/mme/kill/kill10_main.c	2012-03-09 18:05:56.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/mme/kill/kill10_main.c	2012-07-02 15:35:40.000000000 +0100
@@ -38,7 +38,7 @@
 
 #define TEST			"mme/kill/kill10"
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/mme/limits/limits10_main.c linux/test/src/tests/mme/limits/limits10_main.c
--- multicom-4.0.6/linux/test/src/tests/mme/limits/limits10_main.c	2012-03-09 18:05:56.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/mme/limits/limits10_main.c	2012-07-02 15:35:38.000000000 +0100
@@ -44,7 +44,7 @@
 
 #define TEST			"mme/limits/limits10"
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/mme/notify/notify10_main.c linux/test/src/tests/mme/notify/notify10_main.c
--- multicom-4.0.6/linux/test/src/tests/mme/notify/notify10_main.c	2012-03-09 18:05:56.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/mme/notify/notify10_main.c	2012-07-02 15:35:39.000000000 +0100
@@ -46,7 +46,7 @@
 
 #define TEST			"mme/notify/notify10"
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/mme/params/params10_main.c linux/test/src/tests/mme/params/params10_main.c
--- multicom-4.0.6/linux/test/src/tests/mme/params/params10_main.c	2012-03-09 18:05:56.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/mme/params/params10_main.c	2012-07-02 15:35:39.000000000 +0100
@@ -41,7 +41,7 @@
 
 #define TEST			"mme/params/params10"
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/mme/perf/perf10_main.c linux/test/src/tests/mme/perf/perf10_main.c
--- multicom-4.0.6/linux/test/src/tests/mme/perf/perf10_main.c	2012-03-09 18:05:55.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/mme/perf/perf10_main.c	2012-07-02 15:35:36.000000000 +0100
@@ -31,7 +31,7 @@
 
 #define TEST			"mme/perf/perf10"
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/mme/perf/perf11_main.c linux/test/src/tests/mme/perf/perf11_main.c
--- multicom-4.0.6/linux/test/src/tests/mme/perf/perf11_main.c	2012-03-09 18:05:55.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/mme/perf/perf11_main.c	2012-07-02 15:35:37.000000000 +0100
@@ -31,7 +31,7 @@
 
 #define TEST			"mme/perf/perf11"
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/mme/register/register10_main.c linux/test/src/tests/mme/register/register10_main.c
--- multicom-4.0.6/linux/test/src/tests/mme/register/register10_main.c	2012-03-09 18:05:56.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/mme/register/register10_main.c	2012-07-02 15:35:39.000000000 +0100
@@ -44,7 +44,7 @@
 
 #define TEST			"mme/register/register10"
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/mme/simple/host.c linux/test/src/tests/mme/simple/host.c
--- multicom-4.0.6/linux/test/src/tests/mme/simple/host.c	2012-03-09 18:05:56.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/mme/simple/host.c	2012-07-02 15:35:39.000000000 +0100
@@ -136,6 +136,8 @@
 	SimpleParamsInit_t simpleParamsInit;
 	SimpleParamsInit_t simpleParamsStatus;
 	int i = 0;
+    ICS_REGION rgn; 
+    ICS_ERROR err; 
 
 	/* bring up the API */
 	harness_boot();
@@ -149,6 +151,17 @@
 	VERBOSE(printf(MACHINE "ics_cpu_lookup(audio1)=%d\n",ics_cpu_lookup("audio1")));
 	VERBOSE(printf(MACHINE "ics_cpu_lookup(video1)=%d\n",ics_cpu_lookup("video1")));
 
+    /* user space region add/remove test*/
+    err = ICS_region_add(NULL,0x82000000,(32*1024),ICS_CACHED,CPU_MASK,&rgn);
+    VERBOSE(printf(MACHINE "CACHED::ICS_region_add()=%s\n",ics_err_str(err)));
+    err = ICS_region_remove(rgn,0);
+    VERBOSE(printf(MACHINE "ICS_region_remove()=%s\n",ics_err_str(err)));
+
+    err = ICS_region_add(NULL,0x82000000,(32*1024),ICS_UNCACHED,CPU_MASK,&rgn);
+    VERBOSE(printf(MACHINE "UNCACHED::ICS_region_add()=%s\n",ics_err_str(err)));
+    err = ICS_region_remove(rgn,0);
+    VERBOSE(printf(MACHINE "ICS_region_remove()=%s\n",ics_err_str(err)));
+
 	MME(Init());
 #ifdef USERMODE
 	MME_E(MME_NOT_IMPLEMENTED, DeregisterTransport(TRANSPORT_NAME));
diff -Nru linux/test/src/tests/mme/simple/simple10_main.c linux/test/src/tests/mme/simple/simple10_main.c
--- multicom-4.0.6/linux/test/src/tests/mme/simple/simple10_main.c	2012-03-09 18:05:56.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/mme/simple/simple10_main.c	2012-07-02 15:35:39.000000000 +0100
@@ -44,7 +44,7 @@
 
 #define TEST			"mme/simple/simple10"
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/mme/transformer/trans10_main.c linux/test/src/tests/mme/transformer/trans10_main.c
--- multicom-4.0.6/linux/test/src/tests/mme/transformer/trans10_main.c	2012-03-09 18:05:56.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/mme/transformer/trans10_main.c	2012-07-02 15:35:39.000000000 +0100
@@ -33,7 +33,7 @@
 #define TEST			"mme/transformer/trans10"
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru linux/test/src/tests/mme/transformer/trans80_main.c linux/test/src/tests/mme/transformer/trans80_main.c
--- multicom-4.0.6/linux/test/src/tests/mme/transformer/trans80_main.c	2012-03-09 18:05:56.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/mme/transformer/trans80_main.c	2012-07-02 15:35:40.000000000 +0100
@@ -37,7 +37,7 @@
 
 /* #define DEBUG */
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru linux/test/src/tests/mme/transformer/trans81_main.c linux/test/src/tests/mme/transformer/trans81_main.c
--- multicom-4.0.6/linux/test/src/tests/mme/transformer/trans81_main.c	2012-03-09 18:05:56.000000000 +0000
+++ multicom-4.0.6/linux/test/src/tests/mme/transformer/trans81_main.c	2012-07-02 15:35:40.000000000 +0100
@@ -36,7 +36,7 @@
 
 #define CPU_LOAD
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru os21/source/include/ics/ics_ioctl.h os21/source/include/ics/ics_ioctl.h
--- multicom-4.0.6/os21/source/include/ics/ics_ioctl.h	2012-03-09 18:06:21.000000000 +0000
+++ multicom-4.0.6/os21/source/include/ics/ics_ioctl.h	2012-07-02 15:36:43.000000000 +0100
@@ -50,6 +50,24 @@
 	ICS_ERROR			 err;
 } ics_cpu_reset_t;
 
+typedef struct ics_cpu_init {
+	/* IN */
+ ICS_UINT			 inittype;
+ ICS_UINT			 flags;
+	ICS_UINT			 cpuNum;
+	ICS_ULONG			cpuMask;
+ /* OUT */
+	ICS_ERROR			 err;
+} ics_cpu_init_t;
+
+
+typedef struct ics_cpu_term {
+	/* IN */
+ ICS_UINT			 flags;
+ /* OUT */
+	ICS_ERROR			 err;
+} ics_cpu_term_t;
+
 typedef struct ics_cpu_info {
 	/* IN */
         /* OUT */
@@ -68,6 +86,19 @@
 	ICS_ERROR			 err;
 } ics_cpu_bsp_t;
 
+typedef struct ics_user_region {
+	/* IN */
+ ICS_VOID   *map;
+ ICS_OFFSET paddr;
+ ICS_SIZE   size;
+ ICS_MEM_FLAGS mflags;
+	ICS_ULONG		cpuMask;
+ ICS_REGION region;
+ 
+ /* OUT */
+	ICS_ERROR			 err;
+} ics_user_region_t;
+
 #define ICS_IOC_MAGIC 			'I'
 
 #define ICS_IOC_LOADELFFILE		_IOWR(ICS_IOC_MAGIC, 0x1, ics_load_elf_file_t)
@@ -75,7 +106,11 @@
 #define ICS_IOC_CPURESET		_IOWR(ICS_IOC_MAGIC, 0x3, ics_cpu_reset_t)
 #define ICS_IOC_CPUINFO			_IOW (ICS_IOC_MAGIC, 0x4, ics_cpu_info_t)
 #define ICS_IOC_CPUBSP			_IOWR(ICS_IOC_MAGIC, 0x5, ics_cpu_bsp_t)
-#define ICS_IOC_CPULOOKUP			_IOWR(ICS_IOC_MAGIC, 0x6, ics_cpu_bsp_t)
+#define ICS_IOC_CPULOOKUP		_IOWR(ICS_IOC_MAGIC, 0x6, ics_cpu_bsp_t)
+#define ICS_IOC_CPUINIT			_IOW (ICS_IOC_MAGIC, 0x7, ics_cpu_init_t)
+#define ICS_IOC_CPUTERM			_IOW (ICS_IOC_MAGIC, 0x8, ics_cpu_term_t)
+#define ICS_IOC_REGIONADD		_IOW (ICS_IOC_MAGIC, 0x9, ics_user_region_t)
+#define ICS_IOC_REGIONREMOVE    _IOW (ICS_IOC_MAGIC, 0x10, ics_user_region_t)
 
 #endif /* _ICS_IOCTL_H */
 
diff -Nru os21/source/include/mme/mme_ioctl.h os21/source/include/mme/mme_ioctl.h
--- multicom-4.0.6/os21/source/include/mme/mme_ioctl.h	2012-03-09 18:06:22.000000000 +0000
+++ multicom-4.0.6/os21/source/include/mme/mme_ioctl.h	2012-07-02 15:36:43.000000000 +0100
@@ -128,6 +128,11 @@
 	MME_ERROR			 status;
 } mme_userinit_t;
 
+typedef struct mme_userterm {
+        /* OUT */
+	MME_ERROR			 status;
+} mme_userterm_t;
+
 #define MME_IOC_MAGIC 			'M'
 
 #define MME_IOC_ABORTCOMMAND		_IOWR(MME_IOC_MAGIC, 0x1, mme_abort_command_t)
@@ -145,6 +150,7 @@
 #define MME_IOC_SETTUNEABLE		_IOWR(MME_IOC_MAGIC, 0x23, mme_tuneables_t)
 #define MME_IOC_GETTUNEABLE		_IOWR(MME_IOC_MAGIC, 0x24, mme_tuneables_t)
 #define MME_IOC_MMEINIT       		_IOWR(MME_IOC_MAGIC, 0x25, mme_userinit_t)
+#define MME_IOC_MMETERM       		_IOWR(MME_IOC_MAGIC, 0x26, mme_userterm_t)
 
 #endif /* _MME_IOCTL_H */
 
diff -Nru os21/source/include/mme.h os21/source/include/mme.h
--- multicom-4.0.6/os21/source/include/mme.h	2012-03-09 18:06:22.000000000 +0000
+++ multicom-4.0.6/os21/source/include/mme.h	2012-07-02 15:36:44.000000000 +0100
@@ -38,10 +38,10 @@
 
 /* Version info */
 
-#define __MULTICOM_VERSION__		"4.0.6 "
+#define __MULTICOM_VERSION__		"4.0.6 P3"
 #define __MULTICOM_VERSION_MAJOR__	(4)
 #define __MULTICOM_VERSION_MINOR__	(0)
-#define __MULTICOM_VERSION_PATCH__	(6)
+#define __MULTICOM_VERSION_PATCH__	(63)
 
 /* Version macros like the ones found in Linux */
 #define MULTICOM_VERSION(a,b,c)		(((a) << 16) + ((b) << 8) + (c))
diff -Nru os21/source/src/bsp/fli7610/cores.c os21/source/src/bsp/fli7610/cores.c
--- multicom-4.0.6/os21/source/src/bsp/fli7610/cores.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/cores.c	2012-07-02 15:36:27.000000000 +0100
@@ -0,0 +1,107 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/*  
+ * 
+ */ 
+
+#include <bsp/_bsp.h>
+
+/* NMHDK/fli7610 */
+
+/*
+ * Logical CPU numbering
+ *
+ *    0 cortexa9	host (MASTER)
+ *    1 st40 			rt
+ *    2 st231 		video0
+ *    3 st231 		video1
+ *    4 st231 		audio
+ *    5 st231 		gp0
+ *    6 st231 		gp1
+ *
+ */
+
+/*
+ * BSP CPU info
+ *
+ * This table provides the complete list of all the CPUs
+ * on the SoC.
+ * Each CPU is assigned a logical CPU number which is
+ * used by ICS to identify it. Logical CPU 0 is assumed
+ * to be the MASTER.
+ *
+ * The order of the CPUs in this table must match that of
+ * the other BSP tables (e.g. reset.c) so that the correct
+ * CPU registers are used for load/reset
+ */
+struct bsp_cpu_info bsp_cpus[] =
+{
+  {
+    .name 		= "host",		/* host */
+    .type     = "cortexa9",
+    .num	  	= 0,			/* MASTER */
+    .flags		= 0,
+  },
+
+  {
+    .name 		= "rt",			/* real time */
+    .type     = "st40",
+    .num		  = 1,			/* st40 */
+    .flags		= 0,
+  },
+
+  {
+    .name 		= "video0",		/* video */
+    .type     = "st231",
+    .num	  	= 2,
+    .flags		= 0,
+  },
+
+  {
+    .name 		= "video1", /* video 1 */
+    .type     = "st231",
+    .num		  = 3,
+    .flags		= 0,
+  },
+
+  {
+    .name 	  = "audio",/* audio */
+    .type     = "st231",
+    .num		  = 4,
+    .flags		= 0,
+  },
+
+  {
+    .name 		= "gp0",	 /* general purpose 0 */
+    .type     = "st231",
+    .num		  = 5,
+    .flags		= 0,
+  },
+
+  {
+    .name 		= "gp1",		/* general purpose 1 */
+    .type     = "st231",
+    .num		  = 6,
+    .flags		= 0,
+  },
+
+};
+
+unsigned int bsp_cpu_count = sizeof(bsp_cpus)/sizeof(bsp_cpus[0]);
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru os21/source/src/bsp/fli7610/cortexa9/fli7610reg.h os21/source/src/bsp/fli7610/cortexa9/fli7610reg.h
--- multicom-4.0.6/os21/source/src/bsp/fli7610/cortexa9/fli7610reg.h	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/cortexa9/fli7610reg.h	2012-07-02 15:36:42.000000000 +0100
@@ -0,0 +1,53 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/*
+ */
+
+/*
+ */
+
+#ifndef __FLI7610REG_H
+#define __FLI7610REG_H
+
+#include "sh4regtype.h"
+
+/*----------------------------------------------------------------------------*/
+
+/*
+ * Base addresses for control register banks.
+ */
+
+
+/* FLI7610 control registers */
+#ifndef FLI7610_SYSCONF_BANK0_REGS_BASE
+#define FLI7610_SYSCONF_BANK0_REGS_BASE 0xfd320000
+#endif
+
+/*----------------------------------------------------------------------------*/
+
+#include "st40reg.h"
+
+/*
+ * FLI7610 SYSCFG control registers
+ */
+
+#define FLI7610_SYSCONF_SYS_CFG00 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0004)
+#define FLI7610_SYSCONF_SYS_CFG01 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0008)
+#define FLI7610_SYSCONF_SYS_CFG02 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x000c)
+#define FLI7610_SYSCONF_SYS_CFG03 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0010)
+#define FLI7610_SYSCONF_SYS_CFG04 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0014)
+#define FLI7610_SYSCONF_SYS_CFG05 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0018)
+#define FLI7610_SYSCONF_SYS_CFG06 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x001c)
+#define FLI7610_SYSCONF_SYS_CFG07 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0020)
+#define FLI7610_SYSCONF_SYS_CFG08 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0024)
+
+#endif /* __FLI7610REG_H */
diff -Nru os21/source/src/bsp/fli7610/cortexa9/flix7610reg.h os21/source/src/bsp/fli7610/cortexa9/flix7610reg.h
--- multicom-4.0.6/os21/source/src/bsp/fli7610/cortexa9/flix7610reg.h	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/cortexa9/flix7610reg.h	2012-07-02 15:36:42.000000000 +0100
@@ -0,0 +1,325 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/*
+ */
+
+/*
+ */
+
+#ifndef __FLIX7610REG_H
+#define __FLIX7610REG_H
+
+#include "sh4regtype.h"
+
+/*----------------------------------------------------------------------------*/
+
+/*
+ * Base addresses for control register banks.
+ */
+
+/* Generic SH4 control registers */
+#ifndef SH4_TMU_REGS_BASE
+#define SH4_TMU_REGS_BASE 0xffd80000
+#endif
+
+
+/* FLI7610 control registers */
+#ifndef FLIX7610_SYSCONF0_REGS_BASE
+#define FLIX7610_SYSCONF0_REGS_BASE 0xfd320000
+#endif
+
+#ifndef FLIX7610_SYSCONF1_REGS_BASE
+#define FLIX7610_SYSCONF1_REGS_BASE 0xfd690000
+#endif
+
+#ifndef FLIX7610_SYSCONF2_REGS_BASE
+#define FLIX7610_SYSCONF2_REGS_BASE 0xfd6a0000
+#endif
+
+#ifndef FLIX7610_SYSCONF3_REGS_BASE
+#define FLIX7610_SYSCONF3_REGS_BASE 0xfdde0000
+#endif
+
+#ifndef FLIX7610_SYSCONF4_REGS_BASE
+#define FLIX7610_SYSCONF4_REGS_BASE 0xfddf0000
+#endif
+
+
+
+#include "st40reg.h"
+
+
+
+/* SYSCONF Bank 0 */
+#define FLIX7610_SYSCONF0_SYS_STA00 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF0_SYS_CFG00 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF0_SYS_CFG01 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF0_SYS_CFG02 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF0_SYS_CFG03 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF0_SYS_CFG04 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF0_SYS_CFG05 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF0_SYS_CFG06 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF0_SYS_CFG07 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF0_SYS_CFG08 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF0_SYS_CFG12 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF0_SYS_CFG13 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF0_SYS_CFG14 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0030)
+
+/* SYSCONF Bank 1 */
+#define FLIX7610_SYSCONF1_SYS_STA00 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF1_SYS_STA01 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF1_SYS_STA02 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF1_SYS_STA03 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF1_SYS_STA04 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF1_SYS_STA05 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF1_SYS_STA06 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF1_SYS_STA07 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF1_SYS_STA08 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF1_SYS_STA09 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF1_SYS_STA10 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF1_SYS_STA11 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF1_SYS_STA12 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0030)
+#define FLIX7610_SYSCONF1_SYS_STA13 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0034)
+#define FLIX7610_SYSCONF1_SYS_STA14 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0038)
+#define FLIX7610_SYSCONF1_SYS_CFG00 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x003C)
+#define FLIX7610_SYSCONF1_SYS_CFG01 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0040)
+#define FLIX7610_SYSCONF1_SYS_CFG02 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0044)
+#define FLIX7610_SYSCONF1_SYS_CFG03 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0048)
+#define FLIX7610_SYSCONF1_SYS_CFG04 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x004C)
+#define FLIX7610_SYSCONF1_SYS_CFG05 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0050)
+#define FLIX7610_SYSCONF1_SYS_CFG06 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0054)
+#define FLIX7610_SYSCONF1_SYS_CFG07 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0058)
+#define FLIX7610_SYSCONF1_SYS_CFG08 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x005C)
+#define FLIX7610_SYSCONF1_SYS_CFG09 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0060)
+#define FLIX7610_SYSCONF1_SYS_CFG10 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0064)
+#define FLIX7610_SYSCONF1_SYS_CFG11 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0068)
+#define FLIX7610_SYSCONF1_SYS_CFG12 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x006C)
+#define FLIX7610_SYSCONF1_SYS_CFG13 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0070)
+#define FLIX7610_SYSCONF1_SYS_CFG14 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0074)
+#define FLIX7610_SYSCONF1_SYS_CFG15 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0078)
+#define FLIX7610_SYSCONF1_SYS_CFG16 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x007C)
+#define FLIX7610_SYSCONF1_SYS_CFG17 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0080)
+#define FLIX7610_SYSCONF1_SYS_CFG18 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0084)
+#define FLIX7610_SYSCONF1_SYS_CFG19 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0088)
+#define FLIX7610_SYSCONF1_SYS_CFG20 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x008C)
+#define FLIX7610_SYSCONF1_SYS_CFG21 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0090)
+
+/* SYSCONF Bank 2 */
+#define FLIX7610_SYSCONF2_SYS_CFG00 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF2_SYS_CFG01 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF2_SYS_CFG02 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF2_SYS_CFG03 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF2_SYS_CFG04 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF2_SYS_CFG05 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF2_SYS_CFG06 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF2_SYS_CFG07 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF2_SYS_CFG08 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF2_SYS_CFG09 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF2_SYS_CFG10 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF2_SYS_CFG11 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF2_SYS_CFG12 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0030)
+#define FLIX7610_SYSCONF2_SYS_CFG13 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0034)
+#define FLIX7610_SYSCONF2_SYS_CFG14 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0038)
+#define FLIX7610_SYSCONF2_SYS_CFG15 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x003C)
+#define FLIX7610_SYSCONF2_SYS_CFG16 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0040)
+#define FLIX7610_SYSCONF2_SYS_CFG17 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0044)
+#define FLIX7610_SYSCONF2_SYS_CFG18 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0048)
+#define FLIX7610_SYSCONF2_SYS_CFG19 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x004C)
+#define FLIX7610_SYSCONF2_SYS_CFG20 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0050)
+#define FLIX7610_SYSCONF2_SYS_CFG21 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0054)
+#define FLIX7610_SYSCONF2_SYS_CFG22 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0058)
+#define FLIX7610_SYSCONF2_SYS_CFG23 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x005c)
+#define FLIX7610_SYSCONF2_SYS_CFG24 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0060)
+#define FLIX7610_SYSCONF2_SYS_CFG25 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0064)
+#define FLIX7610_SYSCONF2_SYS_CFG26 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0068)
+#define FLIX7610_SYSCONF2_SYS_CFG27 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x006c)
+#define FLIX7610_SYSCONF2_SYS_CFG28 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0070)
+#define FLIX7610_SYSCONF2_SYS_CFG29 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0074)
+#define FLIX7610_SYSCONF2_SYS_CFG30 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0078)
+#define FLIX7610_SYSCONF2_SYS_CFG31 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x007c)
+#define FLIX7610_SYSCONF2_SYS_CFG32 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0080)
+#define FLIX7610_SYSCONF2_SYS_CFG33 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0084)
+#define FLIX7610_SYSCONF2_SYS_CFG34 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0088)
+#define FLIX7610_SYSCONF2_SYS_CFG35 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x008c)
+#define FLIX7610_SYSCONF2_SYS_CFG36 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0090)
+#define FLIX7610_SYSCONF2_SYS_CFG37 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0094)
+#define FLIX7610_SYSCONF2_SYS_CFG38 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0098)
+#define FLIX7610_SYSCONF2_SYS_CFG39 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x009c)
+#define FLIX7610_SYSCONF2_SYS_CFG40 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00a0)
+#define FLIX7610_SYSCONF2_SYS_CFG41 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00a4)
+#define FLIX7610_SYSCONF2_SYS_CFG42 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00a8)
+#define FLIX7610_SYSCONF2_SYS_CFG43 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00ac)
+#define FLIX7610_SYSCONF2_SYS_CFG44 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00b0)
+#define FLIX7610_SYSCONF2_SYS_CFG45 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00b4)
+#define FLIX7610_SYSCONF2_SYS_CFG46 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00b8)
+#define FLIX7610_SYSCONF2_SYS_CFG47 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00bc)
+#define FLIX7610_SYSCONF2_SYS_CFG48 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00c0)
+#define FLIX7610_SYSCONF2_SYS_CFG49 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00c4)
+#define FLIX7610_SYSCONF2_SYS_CFG50 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00c8)
+#define FLIX7610_SYSCONF2_SYS_CFG51 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00cc)
+#define FLIX7610_SYSCONF2_SYS_CFG52 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00d0)
+#define FLIX7610_SYSCONF2_SYS_CFG53 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00d4)
+#define FLIX7610_SYSCONF2_SYS_CFG54 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00d8)
+#define FLIX7610_SYSCONF2_SYS_CFG55 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00dc)
+#define FLIX7610_SYSCONF2_SYS_CFG56 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00E0)
+#define FLIX7610_SYSCONF2_SYS_STA00 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00E4)
+#define FLIX7610_SYSCONF2_SYS_STA01 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00E8)
+#define FLIX7610_SYSCONF2_SYS_STA02 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00EC)
+#define FLIX7610_SYSCONF2_SYS_STA03 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00F0)
+#define FLIX7610_SYSCONF2_SYS_STA04 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00F4)
+#define FLIX7610_SYSCONF2_SYS_STA05 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00F8)
+
+/* SYSCONF Bank 3 */
+#define FLIX7610_SYSCONF3_SYS_CFG600 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF3_SYS_CFG601 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF3_SYS_CFG602 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF3_SYS_CFG603 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF3_SYS_CFG604 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF3_SYS_CFG605 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF3_SYS_CFG606 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF3_SYS_CFG607 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF3_SYS_CFG608 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF3_SYS_CFG609 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF3_SYS_CFG610 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF3_SYS_CFG611 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF3_SYS_CFG612 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0030)
+#define FLIX7610_SYSCONF3_SYS_CFG613 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0034)
+#define FLIX7610_SYSCONF3_SYS_CFG614 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0038)
+#define FLIX7610_SYSCONF3_SYS_CFG615 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x003C)
+#define FLIX7610_SYSCONF3_SYS_CFG616 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0040)
+#define FLIX7610_SYSCONF3_SYS_CFG617 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0044)
+#define FLIX7610_SYSCONF3_SYS_CFG618 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0048)
+#define FLIX7610_SYSCONF3_SYS_CFG619 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x004C)
+#define FLIX7610_SYSCONF3_SYS_CFG620 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0050)
+#define FLIX7610_SYSCONF3_SYS_CFG621 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0054)
+#define FLIX7610_SYSCONF3_SYS_CFG622 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0058)
+#define FLIX7610_SYSCONF3_SYS_CFG623 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x005c)
+#define FLIX7610_SYSCONF3_SYS_CFG624 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0060)
+#define FLIX7610_SYSCONF3_SYS_CFG625 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0064)
+#define FLIX7610_SYSCONF3_SYS_CFG626 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0068)
+#define FLIX7610_SYSCONF3_SYS_CFG627 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x006c)
+#define FLIX7610_SYSCONF3_SYS_CFG628 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0070)
+#define FLIX7610_SYSCONF3_SYS_CFG629 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0074)
+#define FLIX7610_SYSCONF3_SYS_CFG630 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0078)
+#define FLIX7610_SYSCONF3_SYS_CFG631 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x007c)
+#define FLIX7610_SYSCONF3_SYS_CFG632 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0080)
+#define FLIX7610_SYSCONF3_SYS_CFG633 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0084)
+#define FLIX7610_SYSCONF3_SYS_CFG634 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0088)
+#define FLIX7610_SYSCONF3_SYS_CFG635 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x008c)
+#define FLIX7610_SYSCONF3_SYS_CFG636 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0090)
+#define FLIX7610_SYSCONF3_SYS_CFG637 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0094)
+#define FLIX7610_SYSCONF3_SYS_CFG638 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0098)
+#define FLIX7610_SYSCONF3_SYS_CFG639 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x009c)
+#define FLIX7610_SYSCONF3_SYS_CFG640 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00a0)
+#define FLIX7610_SYSCONF3_SYS_CFG641 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00a4)
+#define FLIX7610_SYSCONF3_SYS_CFG642 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00a8)
+#define FLIX7610_SYSCONF3_SYS_CFG643 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00ac)
+#define FLIX7610_SYSCONF3_SYS_CFG644 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00b0)
+#define FLIX7610_SYSCONF3_SYS_CFG645 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00b4)
+#define FLIX7610_SYSCONF3_SYS_CFG646 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00b8)
+#define FLIX7610_SYSCONF3_SYS_CFG647 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00bc)
+#define FLIX7610_SYSCONF3_SYS_CFG648 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00c0)
+#define FLIX7610_SYSCONF3_SYS_CFG649 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00c4)
+#define FLIX7610_SYSCONF3_SYS_CFG650 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00c8)
+#define FLIX7610_SYSCONF3_SYS_CFG651 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00cc)
+#define FLIX7610_SYSCONF3_SYS_CFG652 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00d0)
+#define FLIX7610_SYSCONF3_SYS_CFG653 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00d4)
+#define FLIX7610_SYSCONF3_SYS_CFG654 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00d8)
+#define FLIX7610_SYSCONF3_SYS_CFG655 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00dc)
+#define FLIX7610_SYSCONF3_SYS_CFG656 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00E0)
+#define FLIX7610_SYSCONF3_SYS_CFG657 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00E4)
+#define FLIX7610_SYSCONF3_SYS_CFG658 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00E8)
+#define FLIX7610_SYSCONF3_SYS_CFG659 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00EC)
+#define FLIX7610_SYSCONF3_SYS_CFG660 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00F0)
+#define FLIX7610_SYSCONF3_SYS_CFG661 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00F4)
+#define FLIX7610_SYSCONF3_SYS_CFG662 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00F8)
+#define FLIX7610_SYSCONF3_SYS_CFG663 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00FC)
+#define FLIX7610_SYSCONF3_SYS_CFG664 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0100)
+
+/* SYSCONF Bank 4 */
+#define FLIX7610_SYSCONF4_SYS_CFG00 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF4_SYS_CFG01 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF4_SYS_CFG02 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF4_SYS_CFG03 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF4_SYS_CFG04 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF4_SYS_CFG05 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF4_SYS_CFG06 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF4_SYS_CFG07 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF4_SYS_CFG08 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF4_SYS_CFG09 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF4_SYS_CFG10 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF4_SYS_CFG11 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF4_SYS_CFG12 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0030)
+#define FLIX7610_SYSCONF4_SYS_CFG13 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0034)
+#define FLIX7610_SYSCONF4_SYS_CFG14 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0038)
+#define FLIX7610_SYSCONF4_SYS_CFG15 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x003C)
+#define FLIX7610_SYSCONF4_SYS_CFG16 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0040)
+#define FLIX7610_SYSCONF4_SYS_CFG17 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0044)
+#define FLIX7610_SYSCONF4_SYS_CFG18 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0048)
+#define FLIX7610_SYSCONF4_SYS_CFG19 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x004C)
+#define FLIX7610_SYSCONF4_SYS_CFG20 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0050)
+#define FLIX7610_SYSCONF4_SYS_CFG21 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0054)
+#define FLIX7610_SYSCONF4_SYS_CFG22 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0058)
+#define FLIX7610_SYSCONF4_SYS_CFG23 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x005c)
+#define FLIX7610_SYSCONF4_SYS_CFG24 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0060)
+#define FLIX7610_SYSCONF4_SYS_CFG25 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0064)
+#define FLIX7610_SYSCONF4_SYS_CFG26 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0068)
+#define FLIX7610_SYSCONF4_SYS_CFG27 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x006c)
+#define FLIX7610_SYSCONF4_SYS_CFG28 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0070)
+#define FLIX7610_SYSCONF4_SYS_CFG29 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0074)
+#define FLIX7610_SYSCONF4_SYS_CFG30 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0078)
+#define FLIX7610_SYSCONF4_SYS_CFG31 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x007c)
+#define FLIX7610_SYSCONF4_SYS_CFG32 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0080)
+#define FLIX7610_SYSCONF4_SYS_CFG33 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0084)
+#define FLIX7610_SYSCONF4_SYS_CFG34 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0088)
+#define FLIX7610_SYSCONF4_SYS_CFG35 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x008c)
+#define FLIX7610_SYSCONF4_SYS_CFG36 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0090)
+#define FLIX7610_SYSCONF4_SYS_CFG37 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0094)
+#define FLIX7610_SYSCONF4_SYS_CFG38 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0098)
+#define FLIX7610_SYSCONF4_SYS_CFG39 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x009c)
+#define FLIX7610_SYSCONF4_SYS_CFG40 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00a0)
+#define FLIX7610_SYSCONF4_SYS_CFG41 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00a4)
+#define FLIX7610_SYSCONF4_SYS_CFG42 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00a8)
+#define FLIX7610_SYSCONF4_SYS_CFG43 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00ac)
+#define FLIX7610_SYSCONF4_SYS_CFG44 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00b0)
+#define FLIX7610_SYSCONF4_SYS_CFG45 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00b4)
+#define FLIX7610_SYSCONF4_SYS_CFG46 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00b8)
+#define FLIX7610_SYSCONF4_SYS_CFG47 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00bc)
+#define FLIX7610_SYSCONF4_SYS_CFG48 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00c0)
+#define FLIX7610_SYSCONF4_SYS_CFG49 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00c4)
+#define FLIX7610_SYSCONF4_SYS_CFG50 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00c8)
+#define FLIX7610_SYSCONF4_SYS_CFG51 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00cc)
+#define FLIX7610_SYSCONF4_SYS_CFG52 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00d0)
+#define FLIX7610_SYSCONF4_SYS_CFG53 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00d4)
+#define FLIX7610_SYSCONF4_SYS_CFG54 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00d8)
+#define FLIX7610_SYSCONF4_SYS_CFG55 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00dc)
+#define FLIX7610_SYSCONF4_SYS_CFG56 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00E0)
+#define FLIX7610_SYSCONF4_SYS_CFG57 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00E4)
+#define FLIX7610_SYSCONF4_SYS_CFG58 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00E8)
+#define FLIX7610_SYSCONF4_SYS_CFG59 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00Ec)
+#define FLIX7610_SYSCONF4_SYS_CFG60 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00F0)
+#define FLIX7610_SYSCONF4_SYS_CFG61 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00F4)
+#define FLIX7610_SYSCONF4_SYS_CFG62 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00F8)
+#define FLIX7610_SYSCONF4_SYS_CFG63 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00FC)
+#define FLIX7610_SYSCONF4_SYS_CFG64 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0100)
+#define FLIX7610_SYSCONF4_SYS_CFG65 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0104)
+#define FLIX7610_SYSCONF4_SYS_CFG66 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0108)
+#define FLIX7610_SYSCONF4_SYS_CFG67 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x010c)
+#define FLIX7610_SYSCONF4_SYS_CFG68 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0110)
+#define FLIX7610_SYSCONF4_SYS_CFG69 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0114)
+#define FLIX7610_SYSCONF4_SYS_CFG70 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0118)
+#define FLIX7610_SYSCONF4_SYS_STA00 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x011C)
+#define FLIX7610_SYSCONF4_SYS_STA01 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0120)
+#define FLIX7610_SYSCONF4_SYS_STA02 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0124)
+#define FLIX7610_SYSCONF4_SYS_STA03 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0128)
+
+#endif /* __FLIX7610REG_H */
diff -Nru os21/source/src/bsp/fli7610/cortexa9/mbox.c os21/source/src/bsp/fli7610/cortexa9/mbox.c
--- multicom-4.0.6/os21/source/src/bsp/fli7610/cortexa9/mbox.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/cortexa9/mbox.c	2012-07-02 15:36:26.000000000 +0100
@@ -0,0 +1,172 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ * fli7610 arm cortexa9
+ */
+
+/*
+ * Mailbox allocation
+ * MBOX1_0x000 -> a9     [IRQ 1]
+ * MBOX0_0x100 -> rt     [IRQ 0]
+ * MBOX4_0x100 -> video0 [IRQ 0]
+ * MBOX2_0x100 -> video1 [IRQ 0]
+ * MBOX1_0x100 -> audio  [IRQ 0]
+ * MBOX5_0x100 -> gp0    [IRQ 0]
+ * MBOX3_0x100 -> gp1    [IRQ 0]
+
+ * MBOX0_0x000 ->  ???
+ * MBOX2_0x000 ->  ???
+ * MBOX3_0x000 ->  ???
+ * MBOX4_0x000 ->  ???
+ * MBOX5_0x000 ->  ???
+ * MBOX6_0x000 ->  ???
+ * MBOX6_0x100 ->  ???
+ * MBOX7_0x000 ->  ???
+ * MBOX7_0x100 ->  ???
+ *
+ * IRQ line naming
+ * IRQ0 ---> ST40_IRQ
+ * IRQ1 ---> ST200_IRQ
+ */
+
+#include <bsp/_bsp.h>
+
+#define MBOX0_ADDR	0xfde0e000
+#define MBOX1_ADDR	0xfde0e800
+#define MBOX2_ADDR	0xfde0f000
+#define MBOX3_ADDR	0xfde0f800
+#define MBOX4_ADDR	0xfde10000
+#define MBOX5_ADDR	0xfde10800
+#define MBOX6_ADDR	0xfde11000
+#define MBOX7_ADDR	0xfde11800
+
+#ifdef __os21__
+#error OS21 not supported on fli7610 arm cortexa9 core
+#endif
+
+#ifdef __KERNEL__
+
+/* Based on an IRQ base of 32 + offsets in ADCS xxxxx (Table xxxxx) */
+#define IRQ_BASE	(32)
+#define MBOX0_IRQ1 (IRQ_BASE + 1)
+#define MBOX1_IRQ1	(IRQ_BASE + 2)
+#define MBOX2_IRQ1	(IRQ_BASE + 3)
+#define MBOX3_IRQ1	(IRQ_BASE + 4)
+#define MBOX4_IRQ1	(IRQ_BASE + 5)
+#define MBOX5_IRQ1	(IRQ_BASE + 6)
+#define MBOX6_IRQ1	(IRQ_BASE + 7)
+#define MBOX7_IRQ1	(IRQ_BASE + 8)
+
+#endif
+
+struct bsp_mbox_regs bsp_mailboxes[] =
+{
+  {
+    .base	= (void *) (MBOX0_ADDR), 								/*  Mailbox (MBOX0.1) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX0_ADDR+0x100), 		/* Mailbox (MBOX0.2) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX1_ADDR), 							/* Mailbox (MBOX1.1) */
+    .interrupt	= MBOX1_IRQ1,																/* *WE* own this one */
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX1_ADDR+0x100), 		/* Mailbox (MBOX1.2) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+
+  { .base	= (void *) (MBOX2_ADDR),									/* Mailbox (MBOX2.1) */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  { .base	= (void *) (MBOX2_ADDR+0x100),			/* Mailbox (MBOX2.2) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+
+  { .base	= (void *) (MBOX3_ADDR),								/* Mailbox (MBOX3.1) */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  { .base	= (void *) (MBOX3_ADDR+0x100),		/* Mailbox (MBOX3.2) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+
+  {
+    .base	= (void *) (MBOX4_ADDR), 							/* Mailbox (MBOX4.1) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX4_ADDR+0x100), 	/* Mailbox (MBOX4.2) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+
+  {
+    .base	= (void *) (MBOX5_ADDR), 							/* Mailbox (MBOX5.1) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX5_ADDR+0x100), 	/* Mailbox (MBOX5.2) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+
+  { .base	= (void *) (MBOX6_ADDR),								/* Mailbox (MBOX6.1) */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  { .base	= (void *) (MBOX6_ADDR+0x100),		/* Mailbox (MBOX6.2) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+
+  { .base	= (void *) (MBOX7_ADDR),								/* Mailbox (MBOX7.1) */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  { .base	= (void *) (MBOX7_ADDR+0x100),		/* Mailbox (MBOX7.2) */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+};
+
+unsigned int bsp_mailbox_count = sizeof(bsp_mailboxes)/sizeof(bsp_mailboxes[0]);
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru os21/source/src/bsp/fli7610/cortexa9/name.c os21/source/src/bsp/fli7610/cortexa9/name.c
--- multicom-4.0.6/os21/source/src/bsp/fli7610/cortexa9/name.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/cortexa9/name.c	2012-07-02 15:36:26.000000000 +0100
@@ -0,0 +1,30 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ * sti7200 ST40
+ */
+
+#include <bsp/_bsp.h>
+
+const char * bsp_cpu_name = "host";
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru os21/source/src/bsp/fli7610/cortexa9/reset.c os21/source/src/bsp/fli7610/cortexa9/reset.c
--- multicom-4.0.6/os21/source/src/bsp/fli7610/cortexa9/reset.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/cortexa9/reset.c	2012-07-02 15:36:26.000000000 +0100
@@ -0,0 +1,75 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/* 
+ * 
+ */ 
+
+#include <bsp/_bsp.h>
+
+#include "flix7610reg.h"
+
+struct bsp_reg_mask bsp_sys_reset_bypass[] = {
+  {FLIX7610_SYSCONF3_SYS_CFG629, ~0, (1 << 1)},
+  {FLIX7610_SYSCONF3_SYS_CFG629, ~0, (1 << 5)}, 				/* enable BART for RT core */
+//  {FLIX7610_SYSCONF3_SYS_CFG629, ~(0xF >> 18), (0x44000000 >> 18)},	/* RT core BART loads from 0x44000000) */
+  {FLIX7610_SYSCONF3_SYS_CFG629, ~(0xF >> 18), (0x80000000 >> 18)},	/* RT core BART loads from 0x44000000) */
+};
+
+/* Size of the above array */
+unsigned int bsp_sys_reset_bypass_count = sizeof(bsp_sys_reset_bypass)/sizeof(bsp_sys_reset_bypass[0]);
+
+struct bsp_boot_address_reg bsp_sys_boot_registers[] = {
+  {FLIX7610_SYSCONF3_SYS_CFG647, 0, 0x00000007},   /* host 														*/
+  {FLIX7610_SYSCONF3_SYS_CFG648, 0, 0xFFFFFFFE},   /* rt 																*/
+  {FLIX7610_SYSCONF3_SYS_CFG649, 0, 0xFFFFFFE0},   /* video_0								 			*/
+  {FLIX7610_SYSCONF3_SYS_CFG652, 0, 0xFFFFFFE0},   /* video_1 											*/
+  {FLIX7610_SYSCONF3_SYS_CFG650, 0, 0xFFFFFFE0},   /* audio_0 -aud 						*/
+  {FLIX7610_SYSCONF3_SYS_CFG651, 0, 0xFFFFFFE0},   /* audio_1 -sec0 -gp0	*/
+  {FLIX7610_SYSCONF3_SYS_CFG653, 0, 0xFFFFFFE0},   /* sec1-gp1										 */
+};
+/* Size of the above array */
+unsigned int bsp_sys_boot_registers_count = sizeof(bsp_sys_boot_registers)/sizeof(bsp_sys_boot_registers[0]);
+
+/* FLIX7610 reset bits are active low - mask and ~mask will be used and value
+   should be 0.
+ */
+struct bsp_reg_mask bsp_sys_reset_registers[] = {
+  {FLIX7610_SYSCONF3_SYS_CFG644, ~(1 << 0), 0},	 /* host 														*/
+  {FLIX7610_SYSCONF3_SYS_CFG644, ~(1 << 2), 0},	 /* rt 																*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 27), 0},	/* video_0 											*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 29), 0},	/* video_1 											*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 26), 0},	/* audio_0 -aud 						*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 28), 0},	/* audio_1 -sec0 -gp0	*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 30), 0},	/* sec1-gp1										 */
+};
+/* Size of the above array */
+unsigned int bsp_sys_reset_registers_count = sizeof(bsp_sys_reset_registers)/sizeof(bsp_sys_reset_registers[0]);
+
+/* FLIX7610 has no boot enables - purely controlled by reset bits */
+struct bsp_reg_mask bsp_sys_boot_enable[] = {
+  {NULL, 0, 0},
+  {NULL, 0, 0},
+  {NULL, 0, 0},
+  {NULL, 0, 0},
+  {NULL, 0, 0},
+  {NULL, 0, 0},
+  {NULL, 0, 0}
+};
+
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru os21/source/src/bsp/fli7610/st231/audio/mbox.c os21/source/src/bsp/fli7610/st231/audio/mbox.c
--- multicom-4.0.6/os21/source/src/bsp/fli7610/st231/audio/mbox.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/st231/audio/mbox.c	2012-07-02 15:36:27.000000000 +0100
@@ -0,0 +1,172 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * NMHDK/fli7610 audio
+ */
+
+/*
+ * Mailbox allocation
+ * MBOX1_0x000 -> a9     [IRQ 1]
+ * MBOX0_0x100 -> rt     [IRQ 0]
+ * MBOX4_0x100 -> video0 [IRQ 0]
+ * MBOX2_0x100 -> video1 [IRQ 0]
+ * MBOX1_0x100 -> audio  [IRQ 0]
+ * MBOX5_0x100 -> gp0    [IRQ 0]
+ * MBOX3_0x100 -> gp1    [IRQ 0]
+
+ * MBOX0_0x000 ->  ???
+ * MBOX2_0x000 ->  ???
+ * MBOX3_0x000 ->  ???
+ * MBOX4_0x000 ->  ???
+ * MBOX5_0x000 ->  ???
+ * MBOX6_0x000 ->  ???
+ * MBOX6_0x100 ->  ???
+ * MBOX7_0x000 ->  ???
+ * MBOX7_0x100 ->  ???
+ *
+ * IRQ line naming
+ * IRQ0 ---> ST40_IRQ
+ * IRQ1 ---> ST200_IRQ
+ */
+
+#include <bsp/_bsp.h>
+
+#define MBOX0_0_ADDR		0xfde0e000
+#define MBOX1_0_ADDR		0xfde0e800
+#define MBOX1_1_ADDR		0xfde0e900
+#define MBOX2_0_ADDR		0xfde0f000
+#define MBOX3_0_ADDR		0xfde0f800
+#define MBOX4_0_ADDR		0xfde10000
+#define MBOX5_0_ADDR		0xfde10800
+#define MBOX6_0_ADDR		0xfde11000
+#define MBOX7_0_ADDR		0xfde11800
+
+
+#ifdef __os21__
+#include <os21.h>
+/* #include <os21/st40/fli7610.h> */
+extern interrupt_name_t OS21_INTERRUPT_MAILBOX_1_1; //MBOX1 ST40_IRQ
+#define MBOX1_IRQ0	((unsigned int) &OS21_INTERRUPT_MAILBOX_1_1)
+#else
+#error Invalid OS type.
+#endif
+
+
+struct bsp_mbox_regs bsp_mailboxes[] =
+{
+  {
+    .base	= (void *) (MBOX0_0_ADDR), 		    /* MBOX0.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX0_0_ADDR+0x100), 		/* MBOX0.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX1_0_ADDR), 		    /* MBOX1.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX1_0_ADDR+0x100), 		/* MBOX1.1 Mailbox */
+    .interrupt	= MBOX1_IRQ0,									      /* We own this one */
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX2_0_ADDR), 		    /* MBOX2.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX2_0_ADDR+0x100),		 /* MBOX2.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX3_0_ADDR),							/* MBOX3.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX3_0_ADDR+0x100),		 /* MBOX3.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX4_0_ADDR),		      /* MBOX4.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX4_0_ADDR+0x100),		  /* MBOX4.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX5_0_ADDR),		      /* MBOX5.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX5_0_ADDR+0x100),		  /* MBOX5.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX6_0_ADDR),		      /* MBOX6.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX6_0_ADDR+0x100),		  /* MBOX6.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX7_0_ADDR),		      /* MBOX7.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX7_0_ADDR+0x100),		  /* MBOX7.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+};
+
+unsigned int bsp_mailbox_count = sizeof(bsp_mailboxes)/sizeof(bsp_mailboxes[0]);
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru os21/source/src/bsp/fli7610/st231/audio/name.c os21/source/src/bsp/fli7610/st231/audio/name.c
--- multicom-4.0.6/os21/source/src/bsp/fli7610/st231/audio/name.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/st231/audio/name.c	2012-07-02 15:36:27.000000000 +0100
@@ -0,0 +1,34 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * fli7610 ST231 AUDIO
+ */
+
+#include <bsp/_bsp.h>
+
+const char * bsp_cpu_name = "audio";
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru os21/source/src/bsp/fli7610/st231/gp0/mbox.c os21/source/src/bsp/fli7610/st231/gp0/mbox.c
--- multicom-4.0.6/os21/source/src/bsp/fli7610/st231/gp0/mbox.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/st231/gp0/mbox.c	2012-07-02 15:36:27.000000000 +0100
@@ -0,0 +1,175 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * NMHDK/fli7610 gp0
+ */
+
+/*
+ * Mailbox allocation
+ * MBOX1_0x000 -> a9     [IRQ 1]
+ * MBOX0_0x100 -> rt     [IRQ 0]
+ * MBOX4_0x100 -> video0 [IRQ 0]
+ * MBOX2_0x100 -> video1 [IRQ 0]
+ * MBOX1_0x100 -> audio  [IRQ 0]
+ * MBOX5_0x100 -> gp0    [IRQ 0]
+ * MBOX3_0x100 -> gp1    [IRQ 0]
+
+ * MBOX0_0x000 ->  ???
+ * MBOX2_0x000 ->  ???
+ * MBOX3_0x000 ->  ???
+ * MBOX4_0x000 ->  ???
+ * MBOX5_0x000 ->  ???
+ * MBOX6_0x000 ->  ???
+ * MBOX6_0x100 ->  ???
+ * MBOX7_0x000 ->  ???
+ * MBOX7_0x100 ->  ???
+ *
+ * IRQ line naming
+ * IRQ0 ---> ST40_IRQ
+ * IRQ1 ---> ST200_IRQ
+ */
+
+#include <bsp/_bsp.h>
+
+#define MBOX0_0_ADDR		0xfde0e000
+#define MBOX1_0_ADDR		0xfde0e800
+#define MBOX1_1_ADDR		0xfde0e900
+#define MBOX2_0_ADDR		0xfde0f000
+#define MBOX3_0_ADDR		0xfde0f800
+#define MBOX4_0_ADDR		0xfde10000
+#define MBOX5_0_ADDR		0xfde10800
+#define MBOX6_0_ADDR		0xfde11000
+#define MBOX7_0_ADDR		0xfde11800
+
+
+#ifdef __os21__
+
+#include <os21.h>
+
+/* #include <os21/st40/fli7610.h> */
+extern interrupt_name_t OS21_INTERRUPT_MAILBOX_5_1; //MBOX5 ST40_IRQ
+#define MBOX5_IRQ0	((unsigned int) &OS21_INTERRUPT_MAILBOX_5_1)
+
+#else
+#error Invalid OS type.
+#endif
+
+
+struct bsp_mbox_regs bsp_mailboxes[] =
+{
+  {
+    .base	= (void *) (MBOX0_0_ADDR), 		    /* MBOX0.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX0_0_ADDR+0x100), 		/* MBOX0.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX1_0_ADDR), 		    /* MBOX1.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX1_0_ADDR+0x100), 		/* MBOX1.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX2_0_ADDR), 		    /* MBOX2.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX2_0_ADDR+0x100),		 /* MBOX2.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX3_0_ADDR),							/* MBOX3.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX3_0_ADDR+0x100),		 /* MBOX3.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX4_0_ADDR),		      /* MBOX4.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX4_0_ADDR+0x100),		  /* MBOX4.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX5_0_ADDR),		      /* MBOX5.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX5_0_ADDR+0x100),		  /* MBOX5.1 Mailbox */
+    .interrupt	= MBOX5_IRQ0,                /* We own this one */
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX6_0_ADDR),		      /* MBOX6.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX6_0_ADDR+0x100),		  /* MBOX6.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX7_0_ADDR),		      /* MBOX7.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX7_0_ADDR+0x100),		  /* MBOX7.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+};
+
+unsigned int bsp_mailbox_count = sizeof(bsp_mailboxes)/sizeof(bsp_mailboxes[0]);
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru os21/source/src/bsp/fli7610/st231/gp0/name.c os21/source/src/bsp/fli7610/st231/gp0/name.c
--- multicom-4.0.6/os21/source/src/bsp/fli7610/st231/gp0/name.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/st231/gp0/name.c	2012-07-02 15:36:27.000000000 +0100
@@ -0,0 +1,34 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * fli7610 ST231 AUDIO1
+ */
+
+#include <bsp/_bsp.h>
+
+const char * bsp_cpu_name = "gp0";
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru os21/source/src/bsp/fli7610/st231/gp1/mbox.c os21/source/src/bsp/fli7610/st231/gp1/mbox.c
--- multicom-4.0.6/os21/source/src/bsp/fli7610/st231/gp1/mbox.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/st231/gp1/mbox.c	2012-07-02 15:36:27.000000000 +0100
@@ -0,0 +1,175 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * NMHDK/fli7610 host
+ */
+
+/*
+ * Mailbox allocation
+ * MBOX1_0x000 -> a9     [IRQ 1]
+ * MBOX0_0x100 -> rt     [IRQ 0]
+ * MBOX4_0x100 -> video0 [IRQ 0]
+ * MBOX2_0x100 -> video1 [IRQ 0]
+ * MBOX1_0x100 -> audio  [IRQ 0]
+ * MBOX5_0x100 -> gp0    [IRQ 0]
+ * MBOX3_0x100 -> gp1    [IRQ 0]
+
+ * MBOX0_0x000 ->  ???
+ * MBOX2_0x000 ->  ???
+ * MBOX3_0x000 ->  ???
+ * MBOX4_0x000 ->  ???
+ * MBOX5_0x000 ->  ???
+ * MBOX6_0x000 ->  ???
+ * MBOX6_0x100 ->  ???
+ * MBOX7_0x000 ->  ???
+ * MBOX7_0x100 ->  ???
+ *
+ * IRQ line naming
+ * IRQ0 ---> ST40_IRQ
+ * IRQ1 ---> ST200_IRQ
+ */
+
+#include <bsp/_bsp.h>
+
+#define MBOX0_0_ADDR		0xfde0e000
+#define MBOX1_0_ADDR		0xfde0e800
+#define MBOX1_1_ADDR		0xfde0e900
+#define MBOX2_0_ADDR		0xfde0f000
+#define MBOX3_0_ADDR		0xfde0f800
+#define MBOX4_0_ADDR		0xfde10000
+#define MBOX5_0_ADDR		0xfde10800
+#define MBOX6_0_ADDR		0xfde11000
+#define MBOX7_0_ADDR		0xfde11800
+
+
+#ifdef __os21__
+
+#include <os21.h>
+
+/* #include <os21/st40/fli7610.h> */
+extern interrupt_name_t OS21_INTERRUPT_MAILBOX_3_1; //MBOX3 ST40_IRQ
+#define MBOX3_IRQ0	((unsigned int) &OS21_INTERRUPT_MAILBOX_3_1)
+
+#else
+#error Invalid OS type.
+#endif
+
+
+struct bsp_mbox_regs bsp_mailboxes[] =
+{
+  {
+    .base	= (void *) (MBOX0_0_ADDR), 		    /* MBOX0.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX0_0_ADDR+0x100), 		/* MBOX0.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX1_0_ADDR), 		    /* MBOX1.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX1_0_ADDR+0x100), 		/* MBOX1.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX2_0_ADDR), 		    /* MBOX2.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX2_0_ADDR+0x100),		 /* MBOX2.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX3_0_ADDR),							/* MBOX3.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX3_0_ADDR+0x100),		 /* MBOX3.1 Mailbox */
+    .interrupt	= MBOX3_IRQ0,               /* We own this one */
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX4_0_ADDR),		      /* MBOX4.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX4_0_ADDR+0x100),		  /* MBOX4.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX5_0_ADDR),		      /* MBOX5.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX5_0_ADDR+0x100),		  /* MBOX5.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX6_0_ADDR),		      /* MBOX6.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX6_0_ADDR+0x100),		  /* MBOX6.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX7_0_ADDR),		      /* MBOX7.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX7_0_ADDR+0x100),		  /* MBOX7.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+};
+
+unsigned int bsp_mailbox_count = sizeof(bsp_mailboxes)/sizeof(bsp_mailboxes[0]);
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru os21/source/src/bsp/fli7610/st231/gp1/name.c os21/source/src/bsp/fli7610/st231/gp1/name.c
--- multicom-4.0.6/os21/source/src/bsp/fli7610/st231/gp1/name.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/st231/gp1/name.c	2012-07-02 15:36:27.000000000 +0100
@@ -0,0 +1,34 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * fli7610 ST231 General Purpose
+ */
+
+#include <bsp/_bsp.h>
+
+const char * bsp_cpu_name = "gp1";
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru os21/source/src/bsp/fli7610/st231/video0/mbox.c os21/source/src/bsp/fli7610/st231/video0/mbox.c
--- multicom-4.0.6/os21/source/src/bsp/fli7610/st231/video0/mbox.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/st231/video0/mbox.c	2012-07-02 15:36:27.000000000 +0100
@@ -0,0 +1,176 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * NMHDK/fli7610 st231 dmu0 [video 0]
+ */
+
+/*
+ * Mailbox allocation
+ * MBOX1_0x000 -> a9     [IRQ 1]
+ * MBOX0_0x100 -> rt     [IRQ 0]
+ * MBOX4_0x100 -> video0 [IRQ 0]
+ * MBOX2_0x100 -> video1 [IRQ 0]
+ * MBOX1_0x100 -> audio  [IRQ 0]
+ * MBOX5_0x100 -> gp0    [IRQ 0]
+ * MBOX3_0x100 -> gp1    [IRQ 0]
+
+ * MBOX0_0x000 ->  ???
+ * MBOX2_0x000 ->  ???
+ * MBOX3_0x000 ->  ???
+ * MBOX4_0x000 ->  ???
+ * MBOX5_0x000 ->  ???
+ * MBOX6_0x000 ->  ???
+ * MBOX6_0x100 ->  ???
+ * MBOX7_0x000 ->  ???
+ * MBOX7_0x100 ->  ???
+ *
+ * IRQ line naming
+ * IRQ0 ---> ST40_IRQ
+ * IRQ1 ---> ST200_IRQ
+ */
+
+#include <bsp/_bsp.h>
+
+#define MBOX0_0_ADDR		0xfde0e000
+#define MBOX1_0_ADDR		0xfde0e800
+#define MBOX1_1_ADDR		0xfde0e900
+#define MBOX2_0_ADDR		0xfde0f000
+#define MBOX3_0_ADDR		0xfde0f800
+#define MBOX4_0_ADDR		0xfde10000
+#define MBOX5_0_ADDR		0xfde10800
+#define MBOX6_0_ADDR		0xfde11000
+#define MBOX7_0_ADDR		0xfde11800
+
+
+#ifdef __os21__
+
+#include <os21.h>
+
+/* #include <os21/st40/fli7610.h> */
+extern interrupt_name_t OS21_INTERRUPT_MAILBOX_4_1; //MBOX4 ST40_IRQ
+//#define MBOX4_IRQ0	((unsigned int) &OS21_INTERRUPT_MAILBOX_9)
+#define MBOX4_IRQ0	((unsigned int) &OS21_INTERRUPT_MAILBOX_4_1)
+
+#else
+#error Invalid OS type.
+#endif
+
+
+struct bsp_mbox_regs bsp_mailboxes[] =
+{
+  {
+    .base	= (void *) (MBOX0_0_ADDR), 		    /* MBOX0.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX0_0_ADDR+0x100), 		/* MBOX0.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX1_0_ADDR), 		    /* MBOX1.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX1_0_ADDR+0x100), 		/* MBOX1.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX2_0_ADDR), 		    /* MBOX2.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX2_0_ADDR+0x100),		 /* MBOX2.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX3_0_ADDR),							/* MBOX3.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX3_0_ADDR+0x100),		 /* MBOX3.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX4_0_ADDR),		      /* MBOX4.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX4_0_ADDR+0x100),		  /* MBOX4.1 Mailbox */
+    .interrupt	= MBOX4_IRQ0,                 /* We OWN this one*/
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX5_0_ADDR),		      /* MBOX5.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX5_0_ADDR+0x100),		  /* MBOX5.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX6_0_ADDR),		      /* MBOX6.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX6_0_ADDR+0x100),		  /* MBOX6.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX7_0_ADDR),		      /* MBOX7.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX7_0_ADDR+0x100),		  /* MBOX7.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+};
+
+unsigned int bsp_mailbox_count = sizeof(bsp_mailboxes)/sizeof(bsp_mailboxes[0]);
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru os21/source/src/bsp/fli7610/st231/video0/name.c os21/source/src/bsp/fli7610/st231/video0/name.c
--- multicom-4.0.6/os21/source/src/bsp/fli7610/st231/video0/name.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/st231/video0/name.c	2012-07-02 15:36:27.000000000 +0100
@@ -0,0 +1,34 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * fli7610 ST231 VIDEO
+ */
+
+#include <bsp/_bsp.h>
+
+const char * bsp_cpu_name = "video0";
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru os21/source/src/bsp/fli7610/st231/video1/mbox.c os21/source/src/bsp/fli7610/st231/video1/mbox.c
--- multicom-4.0.6/os21/source/src/bsp/fli7610/st231/video1/mbox.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/st231/video1/mbox.c	2012-07-02 15:36:27.000000000 +0100
@@ -0,0 +1,175 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * NMHDK/fli7610 video1 - st231 dmu1
+ */
+
+/*
+ * Mailbox allocation
+ * MBOX1_0x000 -> a9     [IRQ 1]
+ * MBOX0_0x100 -> rt     [IRQ 0]
+ * MBOX4_0x100 -> video0 [IRQ 0]
+ * MBOX2_0x100 -> video1 [IRQ 0]
+ * MBOX1_0x100 -> audio  [IRQ 0]
+ * MBOX5_0x100 -> gp0    [IRQ 0]
+ * MBOX3_0x100 -> gp1    [IRQ 0]
+
+ * MBOX0_0x000 ->  ???
+ * MBOX2_0x000 ->  ???
+ * MBOX3_0x000 ->  ???
+ * MBOX4_0x000 ->  ???
+ * MBOX5_0x000 ->  ???
+ * MBOX6_0x000 ->  ???
+ * MBOX6_0x100 ->  ???
+ * MBOX7_0x000 ->  ???
+ * MBOX7_0x100 ->  ???
+ *
+ * IRQ line naming
+ * IRQ0 ---> ST40_IRQ
+ * IRQ1 ---> ST200_IRQ
+ */
+
+#include <bsp/_bsp.h>
+
+#define MBOX0_0_ADDR		0xfde0e000
+#define MBOX1_0_ADDR		0xfde0e800
+#define MBOX1_1_ADDR		0xfde0e900
+#define MBOX2_0_ADDR		0xfde0f000
+#define MBOX3_0_ADDR		0xfde0f800
+#define MBOX4_0_ADDR		0xfde10000
+#define MBOX5_0_ADDR		0xfde10800
+#define MBOX6_0_ADDR		0xfde11000
+#define MBOX7_0_ADDR		 0xfde11800
+
+
+#ifdef __os21__
+
+#include <os21.h>
+
+/* #include <os21/st40/fli7610.h> */
+extern interrupt_name_t OS21_INTERRUPT_MAILBOX_2_1; //MBOX2 ST40_IRQ
+#define MBOX2_IRQ0	((unsigned int) &OS21_INTERRUPT_MAILBOX_2_1)
+
+#else
+#error Invalid OS type.
+#endif
+
+
+struct bsp_mbox_regs bsp_mailboxes[] =
+{
+  {
+    .base	= (void *) (MBOX0_0_ADDR), 		    /* MBOX0.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX0_0_ADDR+0x100), 		/* MBOX0.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX1_0_ADDR), 		    /* MBOX1.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX1_0_ADDR+0x100), 		/* MBOX1.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX2_0_ADDR), 		    /* MBOX2.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX2_0_ADDR+0x100),		 /* MBOX2.1 Mailbox */
+    .interrupt	= MBOX2_IRQ0,                /* we own this one */
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX3_0_ADDR),							/* MBOX3.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX3_0_ADDR+0x100),		 /* MBOX3.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX4_0_ADDR),		      /* MBOX4.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX4_0_ADDR+0x100),		  /* MBOX4.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX5_0_ADDR),		      /* MBOX5.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX5_0_ADDR+0x100),		  /* MBOX5.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX6_0_ADDR),		      /* MBOX6.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX6_0_ADDR+0x100),		  /* MBOX6.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX7_0_ADDR),		      /* MBOX7.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX7_0_ADDR+0x100),		  /* MBOX7.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+};
+
+unsigned int bsp_mailbox_count = sizeof(bsp_mailboxes)/sizeof(bsp_mailboxes[0]);
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru os21/source/src/bsp/fli7610/st231/video1/name.c os21/source/src/bsp/fli7610/st231/video1/name.c
--- multicom-4.0.6/os21/source/src/bsp/fli7610/st231/video1/name.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/st231/video1/name.c	2012-07-02 15:36:27.000000000 +0100
@@ -0,0 +1,34 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ *
+ */
+
+/*
+ * fli7610 ST231 VIDEO
+ */
+
+#include <bsp/_bsp.h>
+
+const char * bsp_cpu_name = "video1";
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru os21/source/src/bsp/fli7610/st40/fli7610reg.h os21/source/src/bsp/fli7610/st40/fli7610reg.h
--- multicom-4.0.6/os21/source/src/bsp/fli7610/st40/fli7610reg.h	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/st40/fli7610reg.h	2012-07-02 15:36:42.000000000 +0100
@@ -0,0 +1,53 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/*
+ */
+
+/*
+ */
+
+#ifndef __FLI7610REG_H
+#define __FLI7610REG_H
+
+#include "sh4regtype.h"
+
+/*----------------------------------------------------------------------------*/
+
+/*
+ * Base addresses for control register banks.
+ */
+
+
+/* FLI7610 control registers */
+#ifndef FLI7610_SYSCONF_BANK0_REGS_BASE
+#define FLI7610_SYSCONF_BANK0_REGS_BASE 0xfd320000
+#endif
+
+/*----------------------------------------------------------------------------*/
+
+#include "st40reg.h"
+
+/*
+ * FLI7610 SYSCFG control registers
+ */
+
+#define FLI7610_SYSCONF_SYS_CFG00 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0004)
+#define FLI7610_SYSCONF_SYS_CFG01 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0008)
+#define FLI7610_SYSCONF_SYS_CFG02 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x000c)
+#define FLI7610_SYSCONF_SYS_CFG03 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0010)
+#define FLI7610_SYSCONF_SYS_CFG04 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0014)
+#define FLI7610_SYSCONF_SYS_CFG05 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0018)
+#define FLI7610_SYSCONF_SYS_CFG06 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x001c)
+#define FLI7610_SYSCONF_SYS_CFG07 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0020)
+#define FLI7610_SYSCONF_SYS_CFG08 SH4_DWORD_REG(FLI7610_SYSCONF_BANK0_REGS_BASE + 0x0024)
+
+#endif /* __FLI7610REG_H */
diff -Nru os21/source/src/bsp/fli7610/st40/flix7610reg.h os21/source/src/bsp/fli7610/st40/flix7610reg.h
--- multicom-4.0.6/os21/source/src/bsp/fli7610/st40/flix7610reg.h	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/st40/flix7610reg.h	2012-07-02 15:36:42.000000000 +0100
@@ -0,0 +1,325 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/*
+ */
+
+/*
+ */
+
+#ifndef __FLIX7610REG_H
+#define __FLIX7610REG_H
+
+#include "sh4regtype.h"
+
+/*----------------------------------------------------------------------------*/
+
+/*
+ * Base addresses for control register banks.
+ */
+
+/* Generic SH4 control registers */
+#ifndef SH4_TMU_REGS_BASE
+#define SH4_TMU_REGS_BASE 0xffd80000
+#endif
+
+
+/* FLI7610 control registers */
+#ifndef FLIX7610_SYSCONF0_REGS_BASE
+#define FLIX7610_SYSCONF0_REGS_BASE 0xfd320000
+#endif
+
+#ifndef FLIX7610_SYSCONF1_REGS_BASE
+#define FLIX7610_SYSCONF1_REGS_BASE 0xfd690000
+#endif
+
+#ifndef FLIX7610_SYSCONF2_REGS_BASE
+#define FLIX7610_SYSCONF2_REGS_BASE 0xfd6a0000
+#endif
+
+#ifndef FLIX7610_SYSCONF3_REGS_BASE
+#define FLIX7610_SYSCONF3_REGS_BASE 0xfdde0000
+#endif
+
+#ifndef FLIX7610_SYSCONF4_REGS_BASE
+#define FLIX7610_SYSCONF4_REGS_BASE 0xfddf0000
+#endif
+
+
+
+#include "st40reg.h"
+
+
+
+/* SYSCONF Bank 0 */
+#define FLIX7610_SYSCONF0_SYS_STA00 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF0_SYS_CFG00 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF0_SYS_CFG01 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF0_SYS_CFG02 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF0_SYS_CFG03 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF0_SYS_CFG04 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF0_SYS_CFG05 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF0_SYS_CFG06 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF0_SYS_CFG07 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF0_SYS_CFG08 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF0_SYS_CFG12 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF0_SYS_CFG13 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF0_SYS_CFG14 SH4_DWORD_REG(FLIX7610_SYSCONF0_REGS_BASE + 0x0030)
+
+/* SYSCONF Bank 1 */
+#define FLIX7610_SYSCONF1_SYS_STA00 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF1_SYS_STA01 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF1_SYS_STA02 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF1_SYS_STA03 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF1_SYS_STA04 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF1_SYS_STA05 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF1_SYS_STA06 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF1_SYS_STA07 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF1_SYS_STA08 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF1_SYS_STA09 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF1_SYS_STA10 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF1_SYS_STA11 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF1_SYS_STA12 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0030)
+#define FLIX7610_SYSCONF1_SYS_STA13 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0034)
+#define FLIX7610_SYSCONF1_SYS_STA14 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0038)
+#define FLIX7610_SYSCONF1_SYS_CFG00 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x003C)
+#define FLIX7610_SYSCONF1_SYS_CFG01 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0040)
+#define FLIX7610_SYSCONF1_SYS_CFG02 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0044)
+#define FLIX7610_SYSCONF1_SYS_CFG03 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0048)
+#define FLIX7610_SYSCONF1_SYS_CFG04 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x004C)
+#define FLIX7610_SYSCONF1_SYS_CFG05 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0050)
+#define FLIX7610_SYSCONF1_SYS_CFG06 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0054)
+#define FLIX7610_SYSCONF1_SYS_CFG07 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0058)
+#define FLIX7610_SYSCONF1_SYS_CFG08 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x005C)
+#define FLIX7610_SYSCONF1_SYS_CFG09 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0060)
+#define FLIX7610_SYSCONF1_SYS_CFG10 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0064)
+#define FLIX7610_SYSCONF1_SYS_CFG11 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0068)
+#define FLIX7610_SYSCONF1_SYS_CFG12 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x006C)
+#define FLIX7610_SYSCONF1_SYS_CFG13 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0070)
+#define FLIX7610_SYSCONF1_SYS_CFG14 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0074)
+#define FLIX7610_SYSCONF1_SYS_CFG15 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0078)
+#define FLIX7610_SYSCONF1_SYS_CFG16 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x007C)
+#define FLIX7610_SYSCONF1_SYS_CFG17 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0080)
+#define FLIX7610_SYSCONF1_SYS_CFG18 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0084)
+#define FLIX7610_SYSCONF1_SYS_CFG19 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0088)
+#define FLIX7610_SYSCONF1_SYS_CFG20 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x008C)
+#define FLIX7610_SYSCONF1_SYS_CFG21 SH4_DWORD_REG(FLIX7610_SYSCONF1_REGS_BASE + 0x0090)
+
+/* SYSCONF Bank 2 */
+#define FLIX7610_SYSCONF2_SYS_CFG00 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF2_SYS_CFG01 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF2_SYS_CFG02 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF2_SYS_CFG03 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF2_SYS_CFG04 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF2_SYS_CFG05 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF2_SYS_CFG06 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF2_SYS_CFG07 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF2_SYS_CFG08 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF2_SYS_CFG09 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF2_SYS_CFG10 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF2_SYS_CFG11 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF2_SYS_CFG12 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0030)
+#define FLIX7610_SYSCONF2_SYS_CFG13 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0034)
+#define FLIX7610_SYSCONF2_SYS_CFG14 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0038)
+#define FLIX7610_SYSCONF2_SYS_CFG15 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x003C)
+#define FLIX7610_SYSCONF2_SYS_CFG16 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0040)
+#define FLIX7610_SYSCONF2_SYS_CFG17 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0044)
+#define FLIX7610_SYSCONF2_SYS_CFG18 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0048)
+#define FLIX7610_SYSCONF2_SYS_CFG19 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x004C)
+#define FLIX7610_SYSCONF2_SYS_CFG20 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0050)
+#define FLIX7610_SYSCONF2_SYS_CFG21 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0054)
+#define FLIX7610_SYSCONF2_SYS_CFG22 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0058)
+#define FLIX7610_SYSCONF2_SYS_CFG23 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x005c)
+#define FLIX7610_SYSCONF2_SYS_CFG24 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0060)
+#define FLIX7610_SYSCONF2_SYS_CFG25 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0064)
+#define FLIX7610_SYSCONF2_SYS_CFG26 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0068)
+#define FLIX7610_SYSCONF2_SYS_CFG27 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x006c)
+#define FLIX7610_SYSCONF2_SYS_CFG28 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0070)
+#define FLIX7610_SYSCONF2_SYS_CFG29 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0074)
+#define FLIX7610_SYSCONF2_SYS_CFG30 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0078)
+#define FLIX7610_SYSCONF2_SYS_CFG31 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x007c)
+#define FLIX7610_SYSCONF2_SYS_CFG32 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0080)
+#define FLIX7610_SYSCONF2_SYS_CFG33 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0084)
+#define FLIX7610_SYSCONF2_SYS_CFG34 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0088)
+#define FLIX7610_SYSCONF2_SYS_CFG35 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x008c)
+#define FLIX7610_SYSCONF2_SYS_CFG36 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0090)
+#define FLIX7610_SYSCONF2_SYS_CFG37 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0094)
+#define FLIX7610_SYSCONF2_SYS_CFG38 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x0098)
+#define FLIX7610_SYSCONF2_SYS_CFG39 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x009c)
+#define FLIX7610_SYSCONF2_SYS_CFG40 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00a0)
+#define FLIX7610_SYSCONF2_SYS_CFG41 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00a4)
+#define FLIX7610_SYSCONF2_SYS_CFG42 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00a8)
+#define FLIX7610_SYSCONF2_SYS_CFG43 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00ac)
+#define FLIX7610_SYSCONF2_SYS_CFG44 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00b0)
+#define FLIX7610_SYSCONF2_SYS_CFG45 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00b4)
+#define FLIX7610_SYSCONF2_SYS_CFG46 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00b8)
+#define FLIX7610_SYSCONF2_SYS_CFG47 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00bc)
+#define FLIX7610_SYSCONF2_SYS_CFG48 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00c0)
+#define FLIX7610_SYSCONF2_SYS_CFG49 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00c4)
+#define FLIX7610_SYSCONF2_SYS_CFG50 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00c8)
+#define FLIX7610_SYSCONF2_SYS_CFG51 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00cc)
+#define FLIX7610_SYSCONF2_SYS_CFG52 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00d0)
+#define FLIX7610_SYSCONF2_SYS_CFG53 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00d4)
+#define FLIX7610_SYSCONF2_SYS_CFG54 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00d8)
+#define FLIX7610_SYSCONF2_SYS_CFG55 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00dc)
+#define FLIX7610_SYSCONF2_SYS_CFG56 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00E0)
+#define FLIX7610_SYSCONF2_SYS_STA00 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00E4)
+#define FLIX7610_SYSCONF2_SYS_STA01 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00E8)
+#define FLIX7610_SYSCONF2_SYS_STA02 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00EC)
+#define FLIX7610_SYSCONF2_SYS_STA03 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00F0)
+#define FLIX7610_SYSCONF2_SYS_STA04 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00F4)
+#define FLIX7610_SYSCONF2_SYS_STA05 SH4_DWORD_REG(FLIX7610_SYSCONF2_REGS_BASE + 0x00F8)
+
+/* SYSCONF Bank 3 */
+#define FLIX7610_SYSCONF3_SYS_CFG600 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF3_SYS_CFG601 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF3_SYS_CFG602 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF3_SYS_CFG603 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF3_SYS_CFG604 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF3_SYS_CFG605 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF3_SYS_CFG606 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF3_SYS_CFG607 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF3_SYS_CFG608 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF3_SYS_CFG609 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF3_SYS_CFG610 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF3_SYS_CFG611 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF3_SYS_CFG612 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0030)
+#define FLIX7610_SYSCONF3_SYS_CFG613 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0034)
+#define FLIX7610_SYSCONF3_SYS_CFG614 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0038)
+#define FLIX7610_SYSCONF3_SYS_CFG615 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x003C)
+#define FLIX7610_SYSCONF3_SYS_CFG616 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0040)
+#define FLIX7610_SYSCONF3_SYS_CFG617 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0044)
+#define FLIX7610_SYSCONF3_SYS_CFG618 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0048)
+#define FLIX7610_SYSCONF3_SYS_CFG619 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x004C)
+#define FLIX7610_SYSCONF3_SYS_CFG620 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0050)
+#define FLIX7610_SYSCONF3_SYS_CFG621 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0054)
+#define FLIX7610_SYSCONF3_SYS_CFG622 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0058)
+#define FLIX7610_SYSCONF3_SYS_CFG623 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x005c)
+#define FLIX7610_SYSCONF3_SYS_CFG624 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0060)
+#define FLIX7610_SYSCONF3_SYS_CFG625 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0064)
+#define FLIX7610_SYSCONF3_SYS_CFG626 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0068)
+#define FLIX7610_SYSCONF3_SYS_CFG627 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x006c)
+#define FLIX7610_SYSCONF3_SYS_CFG628 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0070)
+#define FLIX7610_SYSCONF3_SYS_CFG629 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0074)
+#define FLIX7610_SYSCONF3_SYS_CFG630 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0078)
+#define FLIX7610_SYSCONF3_SYS_CFG631 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x007c)
+#define FLIX7610_SYSCONF3_SYS_CFG632 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0080)
+#define FLIX7610_SYSCONF3_SYS_CFG633 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0084)
+#define FLIX7610_SYSCONF3_SYS_CFG634 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0088)
+#define FLIX7610_SYSCONF3_SYS_CFG635 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x008c)
+#define FLIX7610_SYSCONF3_SYS_CFG636 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0090)
+#define FLIX7610_SYSCONF3_SYS_CFG637 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0094)
+#define FLIX7610_SYSCONF3_SYS_CFG638 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0098)
+#define FLIX7610_SYSCONF3_SYS_CFG639 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x009c)
+#define FLIX7610_SYSCONF3_SYS_CFG640 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00a0)
+#define FLIX7610_SYSCONF3_SYS_CFG641 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00a4)
+#define FLIX7610_SYSCONF3_SYS_CFG642 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00a8)
+#define FLIX7610_SYSCONF3_SYS_CFG643 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00ac)
+#define FLIX7610_SYSCONF3_SYS_CFG644 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00b0)
+#define FLIX7610_SYSCONF3_SYS_CFG645 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00b4)
+#define FLIX7610_SYSCONF3_SYS_CFG646 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00b8)
+#define FLIX7610_SYSCONF3_SYS_CFG647 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00bc)
+#define FLIX7610_SYSCONF3_SYS_CFG648 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00c0)
+#define FLIX7610_SYSCONF3_SYS_CFG649 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00c4)
+#define FLIX7610_SYSCONF3_SYS_CFG650 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00c8)
+#define FLIX7610_SYSCONF3_SYS_CFG651 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00cc)
+#define FLIX7610_SYSCONF3_SYS_CFG652 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00d0)
+#define FLIX7610_SYSCONF3_SYS_CFG653 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00d4)
+#define FLIX7610_SYSCONF3_SYS_CFG654 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00d8)
+#define FLIX7610_SYSCONF3_SYS_CFG655 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00dc)
+#define FLIX7610_SYSCONF3_SYS_CFG656 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00E0)
+#define FLIX7610_SYSCONF3_SYS_CFG657 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00E4)
+#define FLIX7610_SYSCONF3_SYS_CFG658 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00E8)
+#define FLIX7610_SYSCONF3_SYS_CFG659 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00EC)
+#define FLIX7610_SYSCONF3_SYS_CFG660 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00F0)
+#define FLIX7610_SYSCONF3_SYS_CFG661 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00F4)
+#define FLIX7610_SYSCONF3_SYS_CFG662 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00F8)
+#define FLIX7610_SYSCONF3_SYS_CFG663 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x00FC)
+#define FLIX7610_SYSCONF3_SYS_CFG664 SH4_DWORD_REG(FLIX7610_SYSCONF3_REGS_BASE + 0x0100)
+
+/* SYSCONF Bank 4 */
+#define FLIX7610_SYSCONF4_SYS_CFG00 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0000)
+#define FLIX7610_SYSCONF4_SYS_CFG01 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0004)
+#define FLIX7610_SYSCONF4_SYS_CFG02 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0008)
+#define FLIX7610_SYSCONF4_SYS_CFG03 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x000C)
+#define FLIX7610_SYSCONF4_SYS_CFG04 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0010)
+#define FLIX7610_SYSCONF4_SYS_CFG05 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0014)
+#define FLIX7610_SYSCONF4_SYS_CFG06 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0018)
+#define FLIX7610_SYSCONF4_SYS_CFG07 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x001C)
+#define FLIX7610_SYSCONF4_SYS_CFG08 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0020)
+#define FLIX7610_SYSCONF4_SYS_CFG09 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0024)
+#define FLIX7610_SYSCONF4_SYS_CFG10 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0028)
+#define FLIX7610_SYSCONF4_SYS_CFG11 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x002C)
+#define FLIX7610_SYSCONF4_SYS_CFG12 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0030)
+#define FLIX7610_SYSCONF4_SYS_CFG13 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0034)
+#define FLIX7610_SYSCONF4_SYS_CFG14 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0038)
+#define FLIX7610_SYSCONF4_SYS_CFG15 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x003C)
+#define FLIX7610_SYSCONF4_SYS_CFG16 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0040)
+#define FLIX7610_SYSCONF4_SYS_CFG17 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0044)
+#define FLIX7610_SYSCONF4_SYS_CFG18 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0048)
+#define FLIX7610_SYSCONF4_SYS_CFG19 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x004C)
+#define FLIX7610_SYSCONF4_SYS_CFG20 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0050)
+#define FLIX7610_SYSCONF4_SYS_CFG21 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0054)
+#define FLIX7610_SYSCONF4_SYS_CFG22 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0058)
+#define FLIX7610_SYSCONF4_SYS_CFG23 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x005c)
+#define FLIX7610_SYSCONF4_SYS_CFG24 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0060)
+#define FLIX7610_SYSCONF4_SYS_CFG25 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0064)
+#define FLIX7610_SYSCONF4_SYS_CFG26 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0068)
+#define FLIX7610_SYSCONF4_SYS_CFG27 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x006c)
+#define FLIX7610_SYSCONF4_SYS_CFG28 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0070)
+#define FLIX7610_SYSCONF4_SYS_CFG29 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0074)
+#define FLIX7610_SYSCONF4_SYS_CFG30 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0078)
+#define FLIX7610_SYSCONF4_SYS_CFG31 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x007c)
+#define FLIX7610_SYSCONF4_SYS_CFG32 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0080)
+#define FLIX7610_SYSCONF4_SYS_CFG33 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0084)
+#define FLIX7610_SYSCONF4_SYS_CFG34 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0088)
+#define FLIX7610_SYSCONF4_SYS_CFG35 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x008c)
+#define FLIX7610_SYSCONF4_SYS_CFG36 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0090)
+#define FLIX7610_SYSCONF4_SYS_CFG37 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0094)
+#define FLIX7610_SYSCONF4_SYS_CFG38 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0098)
+#define FLIX7610_SYSCONF4_SYS_CFG39 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x009c)
+#define FLIX7610_SYSCONF4_SYS_CFG40 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00a0)
+#define FLIX7610_SYSCONF4_SYS_CFG41 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00a4)
+#define FLIX7610_SYSCONF4_SYS_CFG42 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00a8)
+#define FLIX7610_SYSCONF4_SYS_CFG43 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00ac)
+#define FLIX7610_SYSCONF4_SYS_CFG44 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00b0)
+#define FLIX7610_SYSCONF4_SYS_CFG45 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00b4)
+#define FLIX7610_SYSCONF4_SYS_CFG46 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00b8)
+#define FLIX7610_SYSCONF4_SYS_CFG47 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00bc)
+#define FLIX7610_SYSCONF4_SYS_CFG48 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00c0)
+#define FLIX7610_SYSCONF4_SYS_CFG49 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00c4)
+#define FLIX7610_SYSCONF4_SYS_CFG50 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00c8)
+#define FLIX7610_SYSCONF4_SYS_CFG51 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00cc)
+#define FLIX7610_SYSCONF4_SYS_CFG52 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00d0)
+#define FLIX7610_SYSCONF4_SYS_CFG53 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00d4)
+#define FLIX7610_SYSCONF4_SYS_CFG54 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00d8)
+#define FLIX7610_SYSCONF4_SYS_CFG55 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00dc)
+#define FLIX7610_SYSCONF4_SYS_CFG56 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00E0)
+#define FLIX7610_SYSCONF4_SYS_CFG57 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00E4)
+#define FLIX7610_SYSCONF4_SYS_CFG58 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00E8)
+#define FLIX7610_SYSCONF4_SYS_CFG59 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00Ec)
+#define FLIX7610_SYSCONF4_SYS_CFG60 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00F0)
+#define FLIX7610_SYSCONF4_SYS_CFG61 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00F4)
+#define FLIX7610_SYSCONF4_SYS_CFG62 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00F8)
+#define FLIX7610_SYSCONF4_SYS_CFG63 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x00FC)
+#define FLIX7610_SYSCONF4_SYS_CFG64 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0100)
+#define FLIX7610_SYSCONF4_SYS_CFG65 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0104)
+#define FLIX7610_SYSCONF4_SYS_CFG66 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0108)
+#define FLIX7610_SYSCONF4_SYS_CFG67 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x010c)
+#define FLIX7610_SYSCONF4_SYS_CFG68 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0110)
+#define FLIX7610_SYSCONF4_SYS_CFG69 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0114)
+#define FLIX7610_SYSCONF4_SYS_CFG70 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0118)
+#define FLIX7610_SYSCONF4_SYS_STA00 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x011C)
+#define FLIX7610_SYSCONF4_SYS_STA01 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0120)
+#define FLIX7610_SYSCONF4_SYS_STA02 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0124)
+#define FLIX7610_SYSCONF4_SYS_STA03 SH4_DWORD_REG(FLIX7610_SYSCONF4_REGS_BASE + 0x0128)
+
+#endif /* __FLIX7610REG_H */
diff -Nru os21/source/src/bsp/fli7610/st40/pokeloop.S os21/source/src/bsp/fli7610/st40/pokeloop.S
--- multicom-4.0.6/os21/source/src/bsp/fli7610/st40/pokeloop.S	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/st40/pokeloop.S	2012-07-02 15:36:05.000000000 +0100
@@ -0,0 +1,335 @@
+/*
+ * File     : pokeloop.S
+ * Synopsys : ST40 poke loop code.
+ *
+ * Copyright (c) 2004-2008 STMicroelectronics Limited.  All rights reserved.
+ *
+ */
+
+#include "poketable.h"
+
+#	.global		__pokeLoop
+
+/*
+ * The poke table is a series of long words, in the format:
+ *
+ *	opcode, operand, operand (, operand)*
+ *
+ * An opcode of 0 marks the table end.
+ *
+ * MUST_RUN_FROM_ICACHE must be defined to a non-zero value if this code is to
+ * be run from a 32 bytes per line instruction cache (it will jump through
+ * itself once before starting to ensure all lines are cached).  If it is not
+ * defined at all, it will be defined to 1.
+ */
+#ifndef MUST_RUN_FROM_ICACHE
+#define MUST_RUN_FROM_ICACHE 1
+#endif /* !MUST_RUN_FROM_ICACHE */
+
+/*
+ * Routine to setup peripheral registers.
+ * It is executed from within the I-cache (if MUST_RUN_FROM_ICACHE is defined),
+ * with all its data in the D-cache.  It is the caller's responsibility to
+ * ensure the data is all in the D-cache.
+ *
+ * This code and the poke table should be put in the same unique section to
+ * ensure they are contiguous in memory.  This will ensure that, as long as the
+ * data cache is large enough, the SwitchJumpTable and the poke table will not
+ * be on the same cache line (guaranteeing functionality on a direct-mapped
+ * cache.
+ *
+ * The poke loop code honours the architecture ABI for parameter passing, with
+ * the address of the poke table to process as the first argument, and a device
+ * ID to use in the IF_DEVID operations as the second argument.
+ */
+
+#ifndef POKELOOPSECTION
+#define POKELOOPSECTION	.text.pokesection
+#endif /* !POKELOOPSECTION */
+	.pushsection	POKELOOPSECTION
+
+	.balign	32
+__pokeLoop:
+
+	/* Ensure the jump table is in the data cache */
+	mova	SwitchJumpTable, r0	/* Keep this in r0 for use in DoPoking */
+	mov	r0, r6
+	pref	@r6			/* 2 prefetches as could cover 2 cache lines */
+	add	#32, r6
+	pref	@r6
+
+#if (MUST_RUN_FROM_ICACHE != 0)
+	/* Do a single code jump-through to pull the code into the instruction
+	 * cache - we have put a jump point in every cache line.  One way to do
+         * this is to use "sh4objdump -d" on an executable containing this code,
+         * and visually inspect that each jump-through point is in a separate
+         * 0x20 range.
+	 * We set the T bit so we can use 1 instruction jumps for the
+	 * jump-through.
+	 */
+	sett
+	bt	8f
+#endif /* MUST_RUN_FROM_ICACHE != 0 */
+
+DoPoking:
+	mov.l	@r4+, r7	/* opcode */
+	mov.l	@r4+, r1	/* operand 1 */
+	mov.l	@r4+, r2	/* operand 2 */
+
+	mov.b	@(r0, r7), r7
+	extu.b	r7, r7
+	braf	r7
+	  nop
+SwitchJumpFrom:
+
+/* The SwitchJumpTable must be in increasing numeric order of opcode (with
+ * padding for any missing entries).  Distance between SwitchJumpTable and any
+ * of the operations must be less than 255 bytes (the assembler should point it
+ * out if we ever break that condition and have to switch to 16 bit values).
+ */
+	.balign 4
+SwitchJumpTable:
+	.byte	DoRet - SwitchJumpFrom
+	.byte	DoPoke8 - SwitchJumpFrom
+	.byte	DoPoke16 - SwitchJumpFrom
+	.byte	DoPoke32 - SwitchJumpFrom
+	.byte	DoOr8 - SwitchJumpFrom
+	.byte	DoOr16 - SwitchJumpFrom
+	.byte	DoOr32 - SwitchJumpFrom
+	.byte	DoUpdate8 - SwitchJumpFrom
+	.byte	DoUpdate16 - SwitchJumpFrom
+	.byte	DoUpdate32 - SwitchJumpFrom
+	.byte	DoPokeUpdate32 - SwitchJumpFrom
+	.byte	DoWhileNe8 - SwitchJumpFrom
+	.byte	DoWhileNe16 - SwitchJumpFrom
+	.byte	DoWhileNe32 - SwitchJumpFrom
+	.byte	DoIfEq32 - SwitchJumpFrom
+	.byte	DoIfGT32 - SwitchJumpFrom
+	.byte	DoElse - SwitchJumpFrom
+	.byte	DoDelay - SwitchJumpFrom
+	.byte	DoIfDevIDGE - SwitchJumpFrom
+	.byte	DoIfDevIDLE - SwitchJumpFrom
+
+	.balign	2
+#if (MUST_RUN_FROM_ICACHE != 0)
+8:	bt	8f
+#endif /* MUST_RUN_FROM_ICACHE != 0 */
+
+/* END_MARKER */
+DoRet:
+	rts			/* Return point */
+	  nop
+
+/* POKE8(A, VAL) */
+DoPoke8:
+	bra	DoPoking
+	  mov.b	r2, @r1		/* *A = VAL */
+
+/* POKE16(A, VAL) */
+DoPoke16:
+	bra	DoPoking
+	  mov.w	r2, @r1		/* *A = VAL */
+
+/* POKE32(A, VAL) */
+DoPoke32:
+	bra	DoPoking
+	  mov.l	r2, @r1		/* *A = VAL */
+
+#if (MUST_RUN_FROM_ICACHE != 0)
+8:	bt	8f
+#endif /* MUST_RUN_FROM_ICACHE != 0 */
+
+/* OR8(A, VAL) */
+DoOr8:
+	mov.b	@r1, r3		/* *A */
+	or	r2, r3		/* *A | OR */
+	bra	DoPoking
+	  mov.b	r3, @r1		/* *A |= OR */
+
+/* OR16(A, VAL) */
+DoOr16:
+	mov.w	@r1, r3		/* *A */
+	or	r2, r3		/* *A | OR */
+	bra	DoPoking
+	  mov.w	r3, @r1		/* *A |= OR */
+
+/* OR32(A, VAL) */
+DoOr32:
+	mov.l	@r1, r3		/* *A */
+	or	r2, r3		/* *A | OR */
+	bra	DoPoking
+	  mov.l	r3, @r1		/* *A |= OR */
+
+/* UPDATE8(A, AND, OR) */
+DoUpdate8:
+	mov.b	@r1, r3		/* *A */
+	and	r2, r3		/* *A & AND */
+	mov.l	@r4+, r2	/* read OR */
+	or	r2, r3		/* (*A & AND) | OR */
+	bra	DoPoking
+	  mov.b	r3, @r1		/* *A = ((*A & AND) | OR) */
+
+#if (MUST_RUN_FROM_ICACHE != 0)
+8:	bt	8f
+#endif /* MUST_RUN_FROM_ICACHE != 0 */
+
+/* UPDATE16(A, AND, OR) */
+DoUpdate16:
+	mov.w	@r1, r3		/* *A */
+	and	r2, r3		/* *A & AND */
+	mov.l	@r4+, r2	/* read OR */
+	or	r2, r3		/* (*A & AND) | OR */
+	bra	DoPoking
+	  mov.w	r3, @r1		/* *A = ((*A & AND) | OR) */
+
+/* UPDATE32(A, AND, OR) */
+DoUpdate32:
+	mov.l	@r1, r3		/* *A */
+	and	r2, r3		/* *A & AND */
+	mov.l	@r4+, r2	/* read OR */
+	or	r2, r3		/* (*A & AND) | OR */
+	bra	DoPoking
+	  mov.l	r3, @r1		/* *A = ((*A & AND) | OR) */
+
+#if (MUST_RUN_FROM_ICACHE != 0)
+8:	bt	8f
+#endif /* MUST_RUN_FROM_ICACHE != 0 */
+
+/* POKE_UPDATE32(A1, A2, AND, SHIFT, OR) */
+DoPokeUpdate32:
+	mov.l	@r2, r3		/* *A2 */
+	mov.l	@r4+, r2	/* read AND */
+	and	r2, r3		/* *A2 & AND */
+	mov.l	@r4+, r2	/* read SHIFT */
+	shld	r2, r3		/* (*A2 & AND) << SHIFT */
+	mov.l	@r4+, r2	/* read OR */
+	or	r2, r3		/* ((*A2 & AND) << SHIFT) | OR */
+	bra	DoPoking
+	  mov.l	r3, @r1		/* *A1 = (((*A2 & AND) << SHIFT) | OR) */
+
+/* WHILE_NE8(A, AND, VAL) */
+DoWhileNe8:
+	mov.l	@r4+, r7	/* read VAL */
+1:	mov.b	@r1, r3		/* *A */
+	extu.b	r3, r3		/* 32bit(*A) */
+	and	r2, r3		/* *A & AND */
+	cmp/eq	r3, r7		/* if ((*A & AND) == VAL) */
+	bf	1b		/* loop if false */
+	bt	DoPoking
+
+#if (MUST_RUN_FROM_ICACHE != 0)
+8:	bt	8f
+#endif /* MUST_RUN_FROM_ICACHE != 0 */
+
+/* WHILE_NE16(A, AND, VAL) */
+DoWhileNe16:
+	mov.l	@r4+, r7	/* read VAL */
+1:	mov.w	@r1, r3		/* *A */
+	extu.w	r3, r3		/* 32bit(*A) */
+	and	r2, r3		/* *A & AND */
+	cmp/eq	r3, r7		/* if ((*A & AND) == VAL) */
+	bf	1b		/* loop if false */
+	bt	DoPoking
+
+/* WHILE_NE32(A, AND, VAL) */
+DoWhileNe32:
+	mov.l	@r4+, r7	/* read VAL */
+1:	mov.l	@r1, r3		/* *A */
+	and	r2, r3		/* *A & AND */
+	cmp/eq	r3, r7		/* if ((*A & AND) == VAL) */
+	bf	1b		/* loop if false */
+	bt	DoPoking
+
+#if (MUST_RUN_FROM_ICACHE != 0)
+8:	bt	8f
+#endif /* MUST_RUN_FROM_ICACHE != 0 */
+
+/* IF_EQ32(NESTLEVEL, A, AND, VAL)
+   Note that NESTLEVEL is not in the actual table, but there is a distance
+   field following VAL.
+ */
+DoIfEq32:
+	mov.l	@r1, r1		/* *A */
+	and	r2, r1		/* *A & AND */
+	mov.l	@r4+, r2	/* read VAL */
+	mov.l	@r4+, r3	/* read distance to ELSE/ENDIF */
+	cmp/eq	r2, r1		/* if ((*A & AND) == VAL) */
+	bt	DoPoking	/* go ahead with these pokes */
+	add	r3, r4		/* skip forward through pokes to ELSE or ENDIF */
+	bf	DoPoking
+
+/* IF_GT32(NESTLEVEL, A, AND, VAL)
+   Note that NESTLEVEL is not in the actual table, but there is a distance
+   field following VAL.
+ */
+DoIfGT32:
+	mov.l	@r1, r1		/* *A */
+	and	r2, r1		/* *A & AND */
+	mov.l	@r4+, r2	/* read VAL */
+	mov.l	@r4+, r3	/* read distance to ELSE/ENDIF */
+	cmp/hi	r2, r1		/* if ((*A & AND) > VAL) */
+	bt	DoPoking	/* go ahead with these pokes if true*/
+	add	r3, r4		/* skip forward through pokes to ELSE or ENDIF */
+	bf	DoPoking
+
+#if (MUST_RUN_FROM_ICACHE != 0)
+8:	bt	8f
+#endif /* MUST_RUN_FROM_ICACHE != 0 */
+
+/* ELSE(NESTLEVEL)
+   Note that NESTLEVEL is not in the actual table, but there is a distance
+   field following the opcode.
+ */
+DoElse:
+	add	#-4, r4		/* We took 1 arg too many from r4 for an else */
+	bra	DoPoking
+	  add	r1, r4		/* skip through to ENDIF */
+
+/* DELAY(ITERATIONS) */
+DoDelay:
+1:	dt	r1		/* if (--OPERATIONS == 0) */
+	bf	1b
+	add	#-4, r4		/* We took 1 arg too many from r4 for a delay */
+	bt	DoPoking
+
+/* IF_DEVID_GE(NESTLEVEL, VAL)
+   Note that NESTLEVEL is not in the actual table, but there is a distance
+   field following VAL.
+ */
+DoIfDevIDGE:
+	cmp/hs	r1, r5		/* if (device ID >= VAL) */
+	bt	DoPoking	/* go ahead with these pokes if true */
+	bra	DoPoking
+	  add	r2, r4
+
+/* IF_DEVID_LE(NESTLEVEL, VAL)
+   Note that NESTLEVEL is not in the actual table, but there is a distance
+   field following VAL.
+ */
+DoIfDevIDLE:
+	cmp/hi	r5, r1		/* if (device ID <= VAL) */
+	bt	1f		/* go ahead with these pokes if true */
+	add	r2, r4
+1:	bra	DoPoking
+	  nop
+
+#if (MUST_RUN_FROM_ICACHE != 0)
+8:	/* The final jump back to where we start performing the pokes */
+	bra	DoPoking
+	  nop
+#endif /* MUST_RUN_FROM_ICACHE != 0 */
+
+	.align	4
+mbox_a:
+	.long	0xfdac1070
+
+mbox_p6:
+	.long	0x12345676
+
+mbox_p7:
+	.long	0x12345677
+
+mbox_p8:
+	.long	0x12345678
+
+	.popsection
diff -Nru os21/source/src/bsp/fli7610/st40/poketable.h os21/source/src/bsp/fli7610/st40/poketable.h
--- multicom-4.0.6/os21/source/src/bsp/fli7610/st40/poketable.h	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/st40/poketable.h	2012-07-02 15:36:42.000000000 +0100
@@ -0,0 +1,137 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/**************************************************************
+ * This file is part of the latest release of the Multicom4 project. This release
+ * is fully functional and provides all of the original MME functionality.This
+ * release  is now considered stable and ready for integration with other software
+ * components.
+
+ * Multicom4 is a free software; you can redistribute it and/or modify it under the
+ * terms of the GNU General Public License as published by the Free Software Foundation
+ * version 2.
+
+ * Multicom4 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See the GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along with Multicom4;
+ * see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place -
+ * Suite 330, Boston, MA 02111-1307, USA.
+
+ * Written by Multicom team at STMicroelectronics in November 2010.
+ * Contact multicom.support@st.com.
+**************************************************************/
+
+/*
+ * File     : pokeloop.h
+ * Synopsys : Header containing macro definitions needed for poke tables and the
+ *            poke loop code which uses them.
+ *
+ */
+
+#ifndef __POKE_LOOP_H_
+#define __POKE_LOOP_H_
+
+/* Opcode values */
+#define OP_END_POKES					0
+#define OP_POKE8					1
+#define OP_POKE16					2
+#define OP_POKE32					3
+#define OP_OR8						4
+#define OP_OR16						5
+#define OP_OR32						6
+#define OP_UPDATE8					7
+#define OP_UPDATE16					8
+#define OP_UPDATE32					9
+#define OP_POKE_UPDATE32				10
+#define OP_WHILE_NE8					11
+#define OP_WHILE_NE16					12
+#define OP_WHILE_NE32					13
+#define OP_IF_EQ32					14
+#define OP_IF_GT32					15
+#define OP_ELSE						16
+#define OP_DELAY					17
+#define OP_IF_DEVID_GE					18
+#define OP_IF_DEVID_LE					19
+
+#ifdef __ASSEMBLER__
+
+#ifdef __st200__
+/* The ST200 Toolset has a version of GNU as which does not support the .warning
+   or .error directives, so we switch in the .print directive instead to do the
+   best we can.
+ */
+#define ASM_WARNING(STR)	.print "Warning:"; .print STR
+#define ASM_ERROR(STR)		.print STR; .err
+#else
+#define ASM_WARNING(STR)	.warning STR
+#define ASM_ERROR(STR)		.error STR
+#endif /* __st200__ */
+
+/* Poke table commands */
+#define POKE8(A, VAL)					.long OP_POKE8, A, VAL
+#define POKE16(A, VAL)					.long OP_POKE16, A, VAL
+#define POKE32(A, VAL)					.long OP_POKE32, A, VAL
+#define OR8(A, VAL)					.long OP_OR8, A, VAL
+#define OR16(A, VAL)					.long OP_OR16, A, VAL
+#define OR32(A, VAL)					.long OP_OR32, A, VAL
+#define UPDATE8(A, AND, OR)				.long OP_UPDATE8, A, AND, OR
+#define UPDATE16(A, AND, OR)				.long OP_UPDATE16, A, AND, OR
+#define UPDATE32(A, AND, OR)				.long OP_UPDATE32, A, AND, OR
+#define POKE_UPDATE32(A1, A2, AND, SHIFT, OR)		.long OP_POKE_UPDATE32, A1, A2, AND, SHIFT, OR
+#define WHILE_NE8(A, AND, VAL)				.long OP_WHILE_NE8, A, AND, VAL; .if (VAL > 0xFF); ASM_ERROR("Value VAL in WHILE_NE8 should fit in 8 bits"); .endif
+#define WHILE_NE16(A, AND, VAL)				.long OP_WHILE_NE16, A, AND, VAL; .if (VAL > 0xFFFF); ASM_ERROR("Value VAL in WHILE_NE16 should fit in 16 bits"); .endif
+#define WHILE_NE32(A, AND, VAL)				.long OP_WHILE_NE32, A, AND, VAL
+#define IF_EQ32(NESTLEVEL, A, AND, VAL)			.long OP_IF_EQ32, A, AND, VAL, (NESTLEVEL ## f - .)
+#define IF_GT32(NESTLEVEL, A, AND, VAL)			.long OP_IF_GT32, A, AND, VAL, (NESTLEVEL ## f - .)
+/* An explicit ELSE will skip the OP_ELSE embedded in the ENDIF to make things faster */
+#define ELSE(NESTLEVEL)					.long OP_ELSE; NESTLEVEL: ; .long (NESTLEVEL ## f - .)
+ /* ENDIF includes an OP_ELSE so that we end up at the correct position regardless of whether there is an explcit ELSE in the IF construct */
+#define ENDIF(NESTLEVEL)				.long OP_ELSE; NESTLEVEL: ; .long 0
+#define DELAY(ITERATIONS)				.long OP_DELAY, (ITERATIONS + 1)
+/* The 2nd argument to the poke loop code (in R5 for ST40, or $r0.17 for ST200)
+ * must be the device ID to compare against for these operations to work - the
+ * poke loop code does not try to retrieve the device ID itself.
+ */
+#define IF_DEVID_GE(NESTLEVEL, VAL)			.long OP_IF_DEVID_GE, VAL, (NESTLEVEL ## f - .)
+#define IF_DEVID_LE(NESTLEVEL, VAL)			.long OP_IF_DEVID_LE, VAL, (NESTLEVEL ## f - .)
+/* The end marker needs two extra entries which get read by the code, but are
+   never used.
+ */
+#define END_MARKER					.long OP_END_POKES, 0, 0
+
+/*
+ * For compatibility with old poke tables we define some of the old names.
+ * Normally we warn about using the old names, but the warnings can be turned
+ * off by defining the macro POKETABLE_NO_WARNINGS.
+ */
+#ifdef POKETABLE_NO_WARNINGS
+	#define POKE_CHAR(A, VAL)	POKE8(A, VAL)
+	#define POKE_SHORT(A, VAL)	POKE16(A, VAL)
+	#define POKE_LONG(A, VAL)	POKE32(A, VAL)
+	#define OR_LONG(A, VAL)		OR32(A, VAL)
+	#define UPDATE_LONG(A, AND, OR)	UPDATE32(A, AND, OR)
+	#define POKE_UPDATE_LONG(A1, A2, AND, SHIFT, OR) POKE_UPDATE32(A1, A2, AND, SHIFT, OR)
+	#define WHILE_NE(A, AND, VAL)	WHILE_NE32(A, AND, VAL)
+#else
+	#define POKE_CHAR(A, VAL)	POKE8(A, VAL); ASM_WARNING("POKE_CHAR() is deprecated; use POKE8()")
+	#define POKE_SHORT(A, VAL)	POKE16(A, VAL); ASM_WARNING("POKE_SHORT() is deprecated; use POKE16()")
+	#define POKE_LONG(A, VAL)	POKE32(A, VAL); ASM_WARNING("POKE_LONG() is deprecated; use POKE32()")
+	#define OR_LONG(A, VAL)		OR32(A, VAL); ASM_WARNING("OR_LONG() is deprecated; use OR32()")
+	#define UPDATE_LONG(A, AND, OR)	UPDATE32(A, AND, OR); ASM_WARNING("UPDATE_LONG() is deprecated; use UPDATE32()")
+	#define POKE_UPDATE_LONG(A1, A2, AND, SHIFT, OR) POKE_UPDATE32(A1, A2, AND, SHIFT, OR); ASM_WARNING("POKE_UPDATE_LONG() is deprecated; use POKE_UPDATE32()")
+	#define WHILE_NE(A, AND, VAL)	WHILE_NE32(A, AND, VAL); ASM_WARNING("WHILE_NE() is deprecated; use WHILE_NE32()")
+#endif /* !POKETABLE_NO_WARNINGS */
+
+#endif /* __ASSEMBLER__ */
+
+#endif /* !__POKE_LOOP_H_ */
diff -Nru os21/source/src/bsp/fli7610/st40/reset.c os21/source/src/bsp/fli7610/st40/reset.c
--- multicom-4.0.6/os21/source/src/bsp/fli7610/st40/reset.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/st40/reset.c	2012-07-02 15:36:27.000000000 +0100
@@ -0,0 +1,75 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/* 
+ * 
+ */ 
+
+#include <bsp/_bsp.h>
+
+#include "flix7610reg.h"
+
+struct bsp_reg_mask bsp_sys_reset_bypass[] = {
+  {FLIX7610_SYSCONF3_SYS_CFG629, ~0, (1 << 1)},
+  {FLIX7610_SYSCONF3_SYS_CFG629, ~0, (1 << 5)}, 				/* enable BART for RT core */
+//  {FLIX7610_SYSCONF3_SYS_CFG629, ~(0xF >> 18), (0x44000000 >> 18)},	/* RT core BART loads from 0x44000000) */
+  {FLIX7610_SYSCONF3_SYS_CFG629, ~(0xF >> 18), (0x80000000 >> 18)},	/* RT core BART loads from 0x44000000) */
+};
+
+/* Size of the above array */
+unsigned int bsp_sys_reset_bypass_count = sizeof(bsp_sys_reset_bypass)/sizeof(bsp_sys_reset_bypass[0]);
+
+struct bsp_boot_address_reg bsp_sys_boot_registers[] = {
+  {FLIX7610_SYSCONF3_SYS_CFG647, 0, 0x00000007},   /* host 														*/
+  {FLIX7610_SYSCONF3_SYS_CFG648, 0, 0xFFFFFFFE},   /* rt 																*/
+  {FLIX7610_SYSCONF3_SYS_CFG649, 0, 0xFFFFFFE0},   /* video_0								 			*/
+  {FLIX7610_SYSCONF3_SYS_CFG652, 0, 0xFFFFFFE0},   /* video_1 											*/
+  {FLIX7610_SYSCONF3_SYS_CFG650, 0, 0xFFFFFFE0},   /* audio_0 -aud 						*/
+  {FLIX7610_SYSCONF3_SYS_CFG651, 0, 0xFFFFFFE0},   /* audio_1 -sec0 -gp0	*/
+  {FLIX7610_SYSCONF3_SYS_CFG653, 0, 0xFFFFFFE0},   /* sec1-gp1										 */  
+};
+/* Size of the above array */
+unsigned int bsp_sys_boot_registers_count = sizeof(bsp_sys_boot_registers)/sizeof(bsp_sys_boot_registers[0]);
+
+/* FLIX7610 reset bits are active low - mask and ~mask will be used and value
+   should be 0.
+ */
+struct bsp_reg_mask bsp_sys_reset_registers[] = {
+  {FLIX7610_SYSCONF3_SYS_CFG644, ~(1 << 0), 0},	 /* host 														*/
+  {FLIX7610_SYSCONF3_SYS_CFG644, ~(1 << 2), 0},	 /* rt 																*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 27), 0},	/* video_0 											*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 29), 0},	/* video_1 											*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 26), 0},	/* audio_0 -aud 						*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 28), 0},	/* audio_1 -sec0 -gp0	*/
+  {FLIX7610_SYSCONF3_SYS_CFG659, ~(1 << 30), 0},	/* sec1-gp1										 */
+};
+/* Size of the above array */
+unsigned int bsp_sys_reset_registers_count = sizeof(bsp_sys_reset_registers)/sizeof(bsp_sys_reset_registers[0]);
+
+/* FLIX7610 has no boot enables - purely controlled by reset bits */
+struct bsp_reg_mask bsp_sys_boot_enable[] = {
+  {NULL, 0, 0},
+  {NULL, 0, 0},
+  {NULL, 0, 0},
+  {NULL, 0, 0},
+  {NULL, 0, 0},
+  {NULL, 0, 0},  
+  {NULL, 0, 0}
+};
+
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru os21/source/src/bsp/fli7610/st40/rt/mbox.c os21/source/src/bsp/fli7610/st40/rt/mbox.c
--- multicom-4.0.6/os21/source/src/bsp/fli7610/st40/rt/mbox.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/st40/rt/mbox.c	2012-07-02 15:36:27.000000000 +0100
@@ -0,0 +1,172 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ * b2000/fli7610 host
+ */
+
+/*
+ * Mailbox allocation
+ * MBOX1_0x000 -> a9     [IRQ 1]
+ * MBOX0_0x100 -> rt     [IRQ 0]
+ * MBOX4_0x100 -> video0 [IRQ 0]
+ * MBOX2_0x100 -> video1 [IRQ 0]
+ * MBOX1_0x100 -> audio  [IRQ 0]
+ * MBOX5_0x100 -> gp0    [IRQ 0]
+ * MBOX3_0x100 -> gp1    [IRQ 0]
+
+ * MBOX0_0x000 ->  ???
+ * MBOX2_0x000 ->  ???
+ * MBOX3_0x000 ->  ???
+ * MBOX4_0x000 ->  ???
+ * MBOX5_0x000 ->  ???
+ * MBOX6_0x000 ->  ???
+ * MBOX6_0x100 ->  ???
+ * MBOX7_0x000 ->  ???
+ * MBOX7_0x100 ->  ???
+ *
+ * IRQ line naming
+ * IRQ0 ---> ST40_IRQ
+ * IRQ1 ---> ST200_IRQ
+ */
+
+#include <bsp/_bsp.h>
+
+#define MBOX0_0_ADDR		0xfde0e000
+#define MBOX1_0_ADDR		0xfde0e800
+#define MBOX1_1_ADDR		0xfde0e900
+#define MBOX2_0_ADDR		0xfde0f000
+#define MBOX3_0_ADDR		0xfde0f800
+#define MBOX4_0_ADDR		0xfde10000
+#define MBOX5_0_ADDR		0xfde10800
+#define MBOX6_0_ADDR		0xfde11000
+#define MBOX7_0_ADDR	 0xfde11800
+
+
+#ifdef __os21__
+
+#include <os21.h>
+
+/* #include <os21/st40/fli7610.h> */
+extern interrupt_name_t OS21_INTERRUPT_MAILBOX_1; //MBOX0 ST40_IRQ
+#define MBOX0_IRQ0	((unsigned int) &OS21_INTERRUPT_MAILBOX_1)
+
+#else
+
+#error Invalid OS type.
+
+#endif
+
+struct bsp_mbox_regs bsp_mailboxes[] =
+{
+  {
+    .base	= (void *) (MBOX0_0_ADDR), 		    /* MBOX0.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX0_0_ADDR+0x100), 		/* MBOX0.1 Mailbox */
+    .interrupt	= MBOX0_IRQ0,								      /* We own this*/
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX1_0_ADDR), 		    /* MBOX1.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX1_0_ADDR+0x100), 		/* MBOX1.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX2_0_ADDR), 		    /* MBOX2.0 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX2_0_ADDR+0x100),		 /* MBOX2.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX3_0_ADDR),							/* MBOX3.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX3_0_ADDR+0x100),		 /* MBOX3.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX4_0_ADDR),		      /* MBOX4.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX4_0_ADDR+0x100),		  /* MBOX4.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX5_0_ADDR),		      /* MBOX5.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX5_0_ADDR+0x100),		  /* MBOX5.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX6_0_ADDR),		      /* MBOX6.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX6_0_ADDR+0x100),		  /* MBOX6.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+  {
+    .base	= (void *) (MBOX7_0_ADDR),		      /* MBOX7.0 Mailbox */
+    .interrupt  = 0,
+    .flags      = 0
+  },
+  {
+    .base	= (void *) (MBOX7_0_ADDR+0x100),		  /* MBOX7.1 Mailbox */
+    .interrupt	= 0,
+    .flags      = 0
+  },
+
+};
+
+unsigned int bsp_mailbox_count = sizeof(bsp_mailboxes)/sizeof(bsp_mailboxes[0]);
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru os21/source/src/bsp/fli7610/st40/rt/name.c os21/source/src/bsp/fli7610/st40/rt/name.c
--- multicom-4.0.6/os21/source/src/bsp/fli7610/st40/rt/name.c	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/st40/rt/name.c	2012-07-02 15:36:27.000000000 +0100
@@ -0,0 +1,30 @@
+/**************************************************************
+ * Copyright (C) 2010 STMicroelectronics - All Rights Reserved.
+ *
+ * This file is part of ST`s Multicom software.
+ * The Multicom software is proprietary to STMicroelectronics and is 
+ * supplied under the STMicroelectronics Software License Agreement.
+ * You should have received a copy of the STMicroelectronics Software 
+ * License Agreement along with Multicom; see the file multicom_license_2.pdf.
+ * If not, email  multicom.support@st.com.
+ **************************************************************/
+
+/* 
+ * 
+ */ 
+
+/*
+ * fli7610 ST40 real time
+ */
+
+#include <bsp/_bsp.h>
+
+const char * bsp_cpu_name = "rt";
+
+/*
+ * Local Variables:
+ *  tab-width: 8
+ *  c-indent-level: 2
+ *  c-basic-offset: 2
+ * End:
+ */
diff -Nru os21/source/src/bsp/fli7610/st40/rt/rt.romgen os21/source/src/bsp/fli7610/st40/rt/rt.romgen
--- multicom-4.0.6/os21/source/src/bsp/fli7610/st40/rt/rt.romgen	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/st40/rt/rt.romgen	2012-07-02 15:36:04.000000000 +0100
@@ -0,0 +1,87 @@
+/*
+This file was automatically generated on Tue 20 Apr 10 at 14:43:47 by user hazellp, host dingly using romgen R1.5.0 with the ST TargetPack hdk7108stx7108
+
+TargetPack files used:
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/cores/jtag_core.xml
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/cores/st231.xml
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/cores/st40_300.xml
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/cores/st40_300_design.xml
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/cores/st40_ccn_regs.xml
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/cores/st40_pmb_addr_array_regs.xml
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/cores/st40_pmb_data_array_regs.xml
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/cores/st40_pmb_regs.py
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/debug/tapmux.xml
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/socs/peripherals/convertor.py
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/socs/peripherals/st40_emi_regs.xml
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/socs/peripherals/tapmux.py
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/utilities/tap/__init__.py
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/utilities/tap/jtag.py
+/group/mdt/products/stmc2/stmc2-1.5.0-linux/targetpack/utilities/utilities.py
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/boards/hdk7108stx7108/hdk7108stx7108.py
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/boards/hdk7108stx7108/hdk7108stx7108.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/boards/hdk7108stx7108/hdk7108stx7108_design.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/boards/hdk7108stx7108/tm1668_fp.pyc
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/boards/hdk7108stx7108/tm1668_fp.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/clk_common.pyc
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/l2_cache_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/st40_ddr3mixer_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/st40_ddr3pctl_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/st40_ddr3phy_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108.pyc
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108_clockgena_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108_clockgenb_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108_ddrdbg.pyc
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108_design.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108_sysconf_0_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108_sysconf_1_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108_sysconf_2_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108_sysconf_3_regs.xml
+/home/afra/users/hazellp/stmc2/st40_dual_core/7108/hdk7108-targetpack-v4/socs/stx7108/stx7108_sysconf_4_regs.xml
+*/
+POKE32(0xf7100000, 0x00000000)
+POKE32(0xf6100000, 0x80000000)
+POKE32(0xf7100100, 0x00000000)
+POKE32(0xf6100100, 0x80000000)
+POKE32(0xf7100200, 0x00000000)
+POKE32(0xf6100200, 0x80000000)
+POKE32(0xf7100300, 0x00000000)
+POKE32(0xf6100300, 0x80000000)
+POKE32(0xf7100400, 0x00000000)
+POKE32(0xf6100400, 0x80000000)
+POKE32(0xf7100500, 0x00000000)
+POKE32(0xf6100500, 0x80000000)
+POKE32(0xf7100600, 0x00000000)
+POKE32(0xf6100600, 0x80000000)
+POKE32(0xf7100700, 0x00000000)
+POKE32(0xf6100700, 0x80000000)
+POKE32(0xf7100800, 0x00000000)
+POKE32(0xf6100800, 0x80000000)
+POKE32(0xf7100900, 0x00000000)
+POKE32(0xf6100900, 0x80000000)
+POKE32(0xf7100a00, 0x00000000)
+POKE32(0xf6100a00, 0x80000000)
+POKE32(0xf7100b00, 0x00000000)
+POKE32(0xf6100b00, 0x80000000)
+POKE32(0xf7100c00, 0x00000000)
+POKE32(0xf6100c00, 0x80000000)
+POKE32(0xf7100d00, 0x00000000)
+POKE32(0xf6100d00, 0x80000000)
+POKE32(0xf7100e00, 0x00000000)
+POKE32(0xf6100e00, 0x80000000)
+POKE32(0xf7100f00, 0x00000000)
+POKE32(0xf6100f00, 0x80000000)
+POKE32(0xf6100000, 0x80000000)
+POKE32(0xf7100000, 0x40000188)
+POKE32(0xf6100100, 0x88000000)
+POKE32(0xf7100100, 0x48000188)
+POKE32(0xf6100200, 0xa0000000)
+POKE32(0xf7100200, 0x80000188)
+POKE32(0xf6100300, 0xa8000000)
+POKE32(0xf7100300, 0x88000188)
+OR32(0xff000010, 0x00000010)
+IF_EQ32(1, 0xff000010, 0x00000010, 0x00000010)
+  UPDATE32(0xff000010, 0xffffffef, 0x00000010)
+ELSE(1)
+  UPDATE32(0xff000070, 0x7fffffff, 0x80000000)
+ENDIF(1)
diff -Nru os21/source/src/bsp/fli7610/st40/rt/startseinit.S os21/source/src/bsp/fli7610/st40/rt/startseinit.S
--- multicom-4.0.6/os21/source/src/bsp/fli7610/st40/rt/startseinit.S	1970-01-01 01:00:00.000000000 +0100
+++ multicom-4.0.6/os21/source/src/bsp/fli7610/st40/rt/startseinit.S	2012-07-02 15:36:04.000000000 +0100
@@ -0,0 +1,160 @@
+/*
+ * File     : startseinit.S
+ * Synopsis : Code to transition an ST40 from 29-bit mode to 32-bit SE mode,
+ *            configuring the PMBs, before jumping to normal application
+ *            entrypoint.
+ *
+ * Copyright (c) 2008-2010 STMicroelectronics Limited.  All right reserved.
+ *
+ * For ST40 applications which need to run in SE mode with configured PMBs we
+ * can link the following code and use __start_se_init as the executable entry-
+ * point.
+ *
+ * This code will check whether SE mode is on, and if not configure the PMBs and
+ * enable it.  It is PIC code so that even after linking it can be run from any
+ * address (e.g. it can be copied around and still work, or it can be run from
+ * a 29-bit BART address equivalent to the 32-bit address it is linked for.
+ *
+ * If AT is on, we disable it and run from P0 while turning SE on as we know we
+ * can access the 29-bit RAM via P0 and it will not disappear when SE mode is
+ * enabled.  If we were running from P1 or P2 we would need to know the PMBs
+ * were going to identity map the RAM to the same address, and we cannot
+ * guarantee that (indeed it is not the case for the default way the toolset
+ * configures the PMBs).
+ *
+ * This code uses pokeloop.S and pmbconfig_<platform>.S (or the filename
+ * in the PMBCONFIGINCLUDE macro).
+ */
+
+/*
+ * This code is directly lifted from the OS21 VOB ; examples/st40/os21/romloader/startseinit.S
+ */
+
+#define _SH4REG_ASM_
+#include <asmdefs.h>
+
+/* Make this code specific to the RT on fli7610 */
+#define PMBCONFIGINCLUDE "rt.romgen"
+#include "../flix7610reg.h"
+
+/* This is the symbol we will jump to after enabling SE mode - normally start
+   for the standard C runtime initialisation.
+ */
+#ifndef CRT_ENTRYPOINT
+#define CRT_ENTRYPOINT			start
+#endif /* CRT_ENTRYPOINT */
+
+	.section	.alt0text, "ax", @progbits
+	.org	0
+	.global	__start_se_init
+	.import	CRT_ENTRYPOINT
+	.balign	2
+
+__start_se_init:
+	/* First check whether SE mode is already on (both MMUCR and PASCR) */
+#ifndef __SH4_300__
+	MOV_CONST32_R0	SH4_CCN_MMUCR		/* R0 = MMUCR address */
+	mov.l	@r0, r1
+	mov	#(1 << 4), r0			/* R0 = MMUCR SE bit */
+	tst	r0, r1				/* In SE mode? */
+	bf	crtjmp				/* Skip straight to normal entrypoint */
+#endif /* !__SH4_300__ */
+
+#ifndef __SH4_200__
+	MOV_CONST32_R0	SH4_CCN_PASCR		/* R0 = PASCR address */
+	mov.l	@r0, r1
+	MOV_CONST32_R0	(1 << 31)		/* R0 = PASCR SE bit */
+	tst	r0, r1				/* In SE mode? */
+	bf	crtjmp				/* Skip straight to normal entrypoint */
+#endif /*!__SH4_200__ */
+
+	/*
+	 * We're not in SE mode.  Ensure we're running from P0 before
+	 * continuing.  We need to disable AT (address translation in P0 and P3)
+	 * if it is on.
+	 */
+	MOV_CONST32_R0	SH4_CCN_MMUCR		/* R0 = MMUCR address */
+	mov	r0, r2				/* R2 = MMUCR address */
+	mov.l	@r2, r1
+	mov	#(1 << 0), r0			/* R0 = MMUCR AT bit */
+	not	r0, r0
+	and	r1, r0				/* Force AT bit to 0 */
+	mov.l	r0, @r2				/* AT mode off (if it was on) */
+
+	/* Jump to P0 using an rte */
+	stc	sr, r1				/* Ensure SR register remains the same after rte */
+	ldc	r1, ssr
+	mova	1f, r0				/* Use rte to jump to P0 address */
+	mov	r0, r1
+	MOV_CONST32_R0	0x1FFFFFFF		/* R0 = P0 mask */
+	and	r0, r1
+	ldc	r1, spc
+	rte
+	  nop
+
+	.balign	4
+	/*
+	 * Enable I-cache & D-cache; D-cache in copy-back mode if not already
+	   enabled.
+	 */
+1:	MOV_CONST32_R0	SH4_CCN_CCR		/* R0 = CCR address */
+	mov	r0, r2				/* R2 = CCR address */
+	mov.l	@r2, r1
+	MOV_CONST32_R0	((1 << 8) | (1 << 0))	/* Bits 0 & 8 for OC & IC enable */
+	and	r0, r1
+	cmp/eq	r1, r0				/* Both caches enabled? */
+	bt	1f
+	MOV_CONST32_R0	0x8000090D		/* Caches on, D-cache copy-back,
+						   enhanced mode on SH4-200
+						   series cores */
+	mov.l	r0, @r2
+
+	/* Ensure instruction coherency using an rte */
+	INSTRUCTION_COHERE_TO	1f
+
+	.balign	4
+	/*
+	 * We now call the poke loop with the __pmb_setup_table address in R4 to
+	 * configure the PMBs as required for 32-bit 'space enhancement' mode
+	 * and set the SE bit.
+	 */
+1:	PIC_MOV32	__pmb_setup_table, r4	/* R4 = PMB pokes start address */
+	PIC_CALL	__pokeLoop
+
+	/*
+	 * Ensure cache coherency using an rte at the same time as jumping to
+	 * the C runtime entrypoint.
+	 */
+crtjmp:	stc	sr, r0				/* Ensure SR register remains the same after rte */
+	ldc	r0, ssr
+	mov.l	crt_entrypoint_p, r0		/* Use rte to jump to the normal entrypoint */
+	ldc	r0, spc
+	rte
+	  nop
+
+	.balign	4
+PIC_LABEL	__pmb_setup_table
+PIC_LABEL	__pokeLoop
+
+crt_entrypoint_p:
+	.long	CRT_ENTRYPOINT
+
+/* Include the poke loop code and poke table so we know the poke table code and
+ * pmbconfig_*.S file are consistently preprocessed (they have the same
+ * poketable.h).
+ */
+#define MUST_RUN_FROM_ICACHE		0
+#define POKELOOPSECTION			.alt0text
+#define PMB_CONFIG_TABLE_ONLY
+#include "../pokeloop.S"
+	.balign	4
+__pmb_setup_table:
+#ifdef PMBCONFIGINCLUDE
+#include PMBCONFIGINCLUDE
+#else /* !PMBCONFIGINCLUDE */
+#error No PMB configuration specified for startseinit.S - define PMBCONFIGINCLUDE
+#endif /* PMBCONFIGINCLUDE */
+
+	END_MARKER
+__end_pmb_init:
+	.end
diff -Nru os21/source/src/bsp/makebspst231.inc os21/source/src/bsp/makebspst231.inc
--- multicom-4.0.6/os21/source/src/bsp/makebspst231.inc	2012-03-09 18:06:22.000000000 +0000
+++ multicom-4.0.6/os21/source/src/bsp/makebspst231.inc	2012-07-02 15:36:45.000000000 +0100
@@ -84,9 +84,16 @@
 BSP_CORES = audio0 audio1 video
 $(foreach core,$(BSP_CORES),$(eval $(call BSPLIB_template,$(BSP_SOC),$(core))))
 
+#
 # stxh415
 #
 BSP_SOC   = stxh415
-#BSP_CORES = audio0 audio1 video0 video1 security
 BSP_CORES = audio0  audio1 gp video0 video1
 $(foreach core,$(BSP_CORES),$(eval $(call BSPLIB_template,$(BSP_SOC),$(core))))
+
+#
+# fli7610
+#
+BSP_SOC   = fli7610
+BSP_CORES = audio  gp0 gp1 video0 video1
+$(foreach core,$(BSP_CORES),$(eval $(call BSPLIB_template,$(BSP_SOC),$(core))))
\ No newline at end of file
diff -Nru os21/source/src/bsp/makebspst40.inc os21/source/src/bsp/makebspst40.inc
--- multicom-4.0.6/os21/source/src/bsp/makebspst40.inc	2012-03-09 18:06:22.000000000 +0000
+++ multicom-4.0.6/os21/source/src/bsp/makebspst40.inc	2012-07-02 15:36:45.000000000 +0100
@@ -91,3 +91,9 @@
 BSP_CORES = rt
 $(foreach core,$(BSP_CORES),$(eval $(call BSPLIB_template,$(BSP_SOC),$(core))))
 
+#
+# fli7610
+#
+BSP_SOC   = fli7610
+BSP_CORES = rt
+$(foreach core,$(BSP_CORES),$(eval $(call BSPLIB_template,$(BSP_SOC),$(core))))
diff -Nru os21/source/src/bsp/stxh415/st231/audio0/mbox.c os21/source/src/bsp/stxh415/st231/audio0/mbox.c
--- multicom-4.0.6/os21/source/src/bsp/stxh415/st231/audio0/mbox.c	2012-03-09 18:06:15.000000000 +0000
+++ multicom-4.0.6/os21/source/src/bsp/stxh415/st231/audio0/mbox.c	2012-07-02 15:36:25.000000000 +0100
@@ -58,8 +58,8 @@
 #ifdef __os21__
 #include <os21.h>
 /* #include <os21/st40/stiH415.h> */
-extern interrupt_name_t OS21_INTERRUPT_MAILBOX_1_1; //MBOX1 ST40_IRQ
-#define MBOX1_IRQ0	((unsigned int) &OS21_INTERRUPT_MAILBOX_1_1)
+extern interrupt_name_t OS21_INTERRUPT_MAILBOX_6_1; //MBOX1 ST40_IRQ
+#define MBOX6_IRQ0	((unsigned int) &OS21_INTERRUPT_MAILBOX_6_1)
 #else
 #error Invalid OS type.
 #endif
@@ -85,7 +85,7 @@
   },
   { 
     .base	= (void *) (MBOX1_0_ADDR+0x100), 		/* MBOX1.1 Mailbox */
-    .interrupt	= MBOX1_IRQ0,									      /* We own this one */
+    .interrupt	= 0,									      /* We own this one */
     .flags      = 0
   },
 
@@ -140,7 +140,7 @@
   },
   { 
     .base	= (void *) (MBOX6_0_ADDR+0x100),		  /* MBOX6.1 Mailbox */
-    .interrupt	= 0,
+    .interrupt	= MBOX6_IRQ0,
     .flags      = 0
   },
 
diff -Nru os21/source/src/ics/Makefile os21/source/src/ics/Makefile
--- multicom-4.0.6/os21/source/src/ics/Makefile	2012-03-09 18:06:22.000000000 +0000
+++ multicom-4.0.6/os21/source/src/ics/Makefile	2012-07-02 15:36:45.000000000 +0100
@@ -70,12 +70,16 @@
 bsp-prefix := $(BSP_SRCDIR)/stxh205
 endif
 
-#ifdef CONFIG_CPU_32v7
 ifdef CONFIG_MACH_STM_STIH415
 bsp-prefix := $(BSP_SRCDIR)/stxh415
 defualt-cpu	:=cortexa9
 endif
 
+ifdef CONFIG_MACH_STM_FLI7610
+bsp-prefix := $(BSP_SRCDIR)/fli7610
+defualt-cpu	:=cortexa9
+endif
+
 ics-objs := \
 	admin/admin.o \
 	admin/admin_client.o \
diff -Nru os21/source/src/ics/region/region.c os21/source/src/ics/region/region.c
--- multicom-4.0.6/os21/source/src/ics/region/region.c	2012-03-09 18:06:13.000000000 +0000
+++ multicom-4.0.6/os21/source/src/ics/region/region.c	2012-07-02 15:36:22.000000000 +0100
@@ -421,6 +421,11 @@
   {
     ICS_OFFSET    base;
     ICS_MEM_FLAGS mmflags;
+  
+   /* Can't find physical address on ARM uniprocessor-kernel if the memory is section
+    * mapped.
+    */
+#if !defined (__arm__) || defined (CONFIG_SMP) 
 
     /* Convert supplied virtual address to physical to generate the
      * region base offset
@@ -433,6 +438,7 @@
 		  map, base, paddr, err);
       goto error;
     }
+#endif /* !defined (__arm__) || defined (CONFIG_SMP) */
 
 #if 0
     /* XXXX Disabled this code as it can't reliably check
diff -Nru os21/source/src/mme/include/_mme_user.h os21/source/src/mme/include/_mme_user.h
--- multicom-4.0.6/os21/source/src/mme/include/_mme_user.h	2012-03-09 18:06:19.000000000 +0000
+++ multicom-4.0.6/os21/source/src/mme/include/_mme_user.h	2012-07-02 15:36:37.000000000 +0100
@@ -99,6 +99,7 @@
 extern int  mme_user_free_buffer (mme_user_t *instance, void *arg);
 extern void mme_user_buffer_release (mme_user_t *instance);
 extern int mme_user_mmeinit(mme_user_t *instance, void *arg);
+extern int mme_user_mmeterm(mme_user_t *instance, void *arg);
 extern int  mme_user_is_transformer_registered(mme_user_t *instance, void *arg);
 extern int  mme_user_set_tuneable(mme_user_t *instance, void *arg);
 extern int  mme_user_get_tuneable(mme_user_t *instance, void *arg);
diff -Nru os21/test/makeconfall.inc os21/test/makeconfall.inc
--- multicom-4.0.6/os21/test/makeconfall.inc	2012-03-09 18:06:23.000000000 +0000
+++ multicom-4.0.6/os21/test/makeconfall.inc	2012-07-02 15:36:46.000000000 +0100
@@ -43,10 +43,15 @@
 ALLCPUPLATFORMS = null mb453
 endif
 ifeq ($(CPU),st40)
-ALLCPUPLATFORMS = mb411stb7109 mb411stb7109se mb442stb7109 mb442stb7109se mb519 mb519se mb618 mb618se mb628 mb628se mb628ecm mb628ecmse mb628_ecm mb628_se_ecm mb680 mb680se mb680sti7106 mb680sti7106lmise mb671 mb671se mb837se mb837rtse hdk7108 hdk7108_rt hdk7108se hdk7108_rtse b2000_rtse
+ALLCPUPLATFORMS  = mb411stb7109 mb411stb7109se mb442stb7109 mb442stb7109se mb519
+ALLCPUPLATFORMS += mb519se mb618 mb618se mb628 mb628se mb628ecm mb628ecmse mb628_ecm mb628_se_ecm mb680 mb680se mb680sti7106 mb680sti7106lmise mb671 mb671se mb837se mb837rtse hdk7108 hdk7108_rt hdk7108se hdk7108_rtse b2000_rtse fli7610hdkse
 endif
 ifeq ($(CPU),st231)
-ALLCPUPLATFORMS = mb411stb7109_audio mb411stb7109_video mb442stb7109_audio mb442stb7109_video mb442_7109_audio mb442_7109_video mb519_audio0 mb519_video0 mb519_audio1 mb519_video1 mb519_se_audio0 mb519_se_video0 mb519_se_audio1 mb519_se_video1 mb618_audio mb618_video mb618_se_audio mb618_se_video mb628_audio mb628_video mb628_se_audio mb628_se_video mb680_video mb680_audio mb680_se_video mb680_se_audio mb680_7106_video mb680_7106_audio mb680_se_7106_video mb680_se_7106_audio mb671_audio0 mb671_video0 mb671_audio1 mb671_video1 mb671_se_audio0 mb671_se_video0 mb671_se_audio1 mb671_se_video1 mb837_se_audio mb837_se_video mb837_se_gp hdk7108_se_audio hdk7108_se_video hdk7108_se_gp b2000_se_video0 b2000_se_video1 b2000_se_audio0 b2000_se_audio1 b2000_se_gp
+ALLCPUPLATFORMS  = mb411stb7109_audio mb411stb7109_video mb442stb7109_audio mb442stb7109_video mb442_7109_audio mb442_7109_video mb519_audio0 mb519_video0 mb519_audio1 mb519_video1 mb519_se_audio0 mb519_se_video0 mb519_se_audio1 
+ALLCPUPLATFORMS += mb519_se_video1 mb618_audio mb618_video mb618_se_audio mb618_se_video mb628_audio mb628_video mb628_se_audio mb628_se_video mb680_video mb680_audio mb680_se_video mb680_se_audio mb680_7106_video mb680_7106_audio 
+ALLCPUPLATFORMS += mb680_se_7106_video mb680_se_7106_audio mb671_audio0 mb671_video0 mb671_audio1 mb671_video1 mb671_se_audio0 mb671_se_video0 mb671_se_audio1 mb671_se_video1 mb837_se_audio mb837_se_video mb837_se_gp hdk7108_se_audio
+ALLCPUPLATFORMS += hdk7108_se_video hdk7108_se_gp b2000_se_video0 b2000_se_video1 b2000_se_audio0 b2000_se_audio1 b2000_se_gp fli7610hdk_7610_audio fli7610hdk_7610_gp0 fli7610hdk_7610_gp1 fli7610hdk_7610_video0 
+ALLCPUPLATFORMS += fli7610hdk_7610_video1
 endif
 
 ################################################################################
@@ -313,7 +318,17 @@
 CCCHIP = stih415
 CORE = rt
 BOARD = stih415se
-CCPLATFORM = b2000_$(CORE)_lmi0se
+CCPLATFORM = b2000lmise
+CCUSERFLAGS +=
+endif
+
+ifeq ($(PLATFORM),fli7610hdkse)
+CHIP = fli7610
+CCCHIP = fli7610
+CORE = rt
+BOARD = fli7610hdk
+#CCPLATFORM = fli7610hdklmise
+CCPLATFORM = fli7610hdkse
 CCUSERFLAGS +=
 endif
 
@@ -693,7 +708,7 @@
 CCCHIP = stxh415
 CORE = video0
 BOARD = stih415se
-CCPLATFORM = b2000_se_h415_$(CORE)
+CCPLATFORM = b2000_h415_$(CORE)
 CCUSERFLAGS +=
 endif
 ifeq ($(PLATFORM),b2000_se_video1)
@@ -701,7 +716,7 @@
 CCCHIP = stxh415
 CORE = video1
 BOARD = stih415se
-CCPLATFORM = b2000_se_h415_$(CORE)
+CCPLATFORM = b2000_h415_$(CORE)
 CCUSERFLAGS +=
 endif
 ifeq ($(PLATFORM),b2000_se_audio0)
@@ -709,7 +724,7 @@
 CCCHIP = stxh415
 CORE = audio0
 BOARD = stih415se
-CCPLATFORM = b2000_se_h415_$(CORE)
+CCPLATFORM = b2000_h415_$(CORE)
 CCUSERFLAGS +=
 endif
 ifeq ($(PLATFORM),b2000_se_audio1)
@@ -717,7 +732,7 @@
 CCCHIP = stxh415
 CORE = audio1
 BOARD = stih415se
-CCPLATFORM = b2000_se_h415_$(CORE)
+CCPLATFORM = b2000_h415_$(CORE)
 CCUSERFLAGS +=
 endif
 ifeq ($(PLATFORM),b2000_se_gp)
@@ -725,9 +740,52 @@
 CCCHIP = stxh415
 CORE = gp
 BOARD = stih415se
-CCPLATFORM = b2000_se_h415_$(CORE)
+CCPLATFORM = b2000_h415_$(CORE)
+CCUSERFLAGS +=
+endif
+
+ifeq ($(PLATFORM),fli7610hdk_7610_audio)
+CHIP = fli7610
+CCCHIP = fli7610
+CORE = audio
+BOARD = fli7610hdk
+CCPLATFORM = fli7610hdk_7610_$(CORE)
+CCUSERFLAGS +=
+endif
+ifeq ($(PLATFORM),fli7610hdk_7610_gp0)
+CHIP = fli7610
+CCCHIP = fli7610
+CORE = gp0
+BOARD = fli7610hdk
+CCPLATFORM = fli7610hdk_7610_$(CORE)
 CCUSERFLAGS +=
 endif
+ifeq ($(PLATFORM),fli7610hdk_7610_gp1)
+CHIP = fli7610
+CCCHIP = fli7610
+CORE = gp1
+BOARD = fli7610hdk
+CCPLATFORM = fli7610hdk_7610_$(CORE)
+CCUSERFLAGS +=
+endif
+ifeq ($(PLATFORM),fli7610hdk_7610_video0)
+CHIP = fli7610
+CCCHIP = fli7610
+CORE = video0
+BOARD = fli7610hdk
+CCPLATFORM = fli7610hdk_7610_$(CORE)
+CCUSERFLAGS +=
+endif
+ifeq ($(PLATFORM),fli7610hdk_7610_video1)
+CHIP = fli7610
+CCCHIP = fli7610
+CORE = video1
+BOARD = fli7610hdk
+CCPLATFORM = fli7610hdk_7610_$(CORE)
+CCUSERFLAGS +=
+endif
+
+
 endif
 
 ################################################################################
diff -Nru os21/test/src/include/harness.h os21/test/src/include/harness.h
--- multicom-4.0.6/os21/test/src/include/harness.h	2012-03-09 18:06:22.000000000 +0000
+++ multicom-4.0.6/os21/test/src/include/harness.h	2012-07-02 15:36:44.000000000 +0100
@@ -122,7 +122,6 @@
 #endif /* __sh__ || __arm__ */ 
 #endif /* CPU_LOAD */
 
-#if defined(__os21__) || defined(__KERNEL__)  
   {
     ICS_ERROR err;
     
@@ -130,12 +129,11 @@
     
     /* Initialise ICS system */
     err = ics_cpu_init(ics_cpuNum, ics_cpuMask, ICS_INIT_WATCHDOG);
-    //err = ics_cpu_init(ics_cpuNum, ics_cpuMask, ICS_INIT_CONNECT_ALL);
+    /* err = ics_cpu_init(ics_cpuNum, ics_cpuMask, ICS_INIT_CONNECT_ALL); */
     assert(err == ICS_SUCCESS);
     
     OS_PRINTF("running: ICS version '%s'\n", ics_cpu_version());
   }
-#endif /* __os21__ || __KERNEL__ */
 
 #ifdef __os21__
   /* Display this again after ics_cpu_init() so it is captured in the cyclic log */
@@ -161,9 +159,7 @@
 void harness_shutdown (void)
 {
 
-#if defined(__os21__)
   ICS_cpu_term(0);
-#endif
 
   platform_term();
 }
diff -Nru os21/test/src/tests/embx/perf/embx10_main.c os21/test/src/tests/embx/perf/embx10_main.c
--- multicom-4.0.6/os21/test/src/tests/embx/perf/embx10_main.c	2012-03-09 18:06:19.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/embx/perf/embx10_main.c	2012-07-02 15:36:36.000000000 +0100
@@ -36,7 +36,7 @@
 #define NSEC			1000*USEC
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/ics/channel/channel11_main.c os21/test/src/tests/ics/channel/channel11_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/channel/channel11_main.c	2012-03-09 18:06:17.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/channel/channel11_main.c	2012-07-02 15:36:30.000000000 +0100
@@ -40,7 +40,7 @@
 #define SELF		ics_cpuNum
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/ics/channel/channel12_main.c os21/test/src/tests/ics/channel/channel12_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/channel/channel12_main.c	2012-03-09 18:06:17.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/channel/channel12_main.c	2012-07-02 15:36:31.000000000 +0100
@@ -40,7 +40,7 @@
 #define SELF		ics_cpuNum
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/ics/channel/channel13_main.c os21/test/src/tests/ics/channel/channel13_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/channel/channel13_main.c	2012-03-09 18:06:17.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/channel/channel13_main.c	2012-07-02 15:36:32.000000000 +0100
@@ -41,7 +41,7 @@
 #define SELF		ics_cpuNum
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/ics/channel/channel14_main.c os21/test/src/tests/ics/channel/channel14_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/channel/channel14_main.c	2012-03-09 18:06:17.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/channel/channel14_main.c	2012-07-02 15:36:31.000000000 +0100
@@ -41,7 +41,7 @@
 #define SELF		ics_cpuNum
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/ics/channel/channel82_main.c os21/test/src/tests/ics/channel/channel82_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/channel/channel82_main.c	2012-03-09 18:06:17.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/channel/channel82_main.c	2012-07-02 15:36:31.000000000 +0100
@@ -27,7 +27,7 @@
  * All CPUs then fill each channel in a global exchange like pattern
  */
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru os21/test/src/tests/ics/channel/channel83_main.c os21/test/src/tests/ics/channel/channel83_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/channel/channel83_main.c	2012-03-09 18:06:17.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/channel/channel83_main.c	2012-07-02 15:36:31.000000000 +0100
@@ -16,7 +16,7 @@
 
 #define CPU_LOAD
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru os21/test/src/tests/ics/channel/channel84_main.c os21/test/src/tests/ics/channel/channel84_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/channel/channel84_main.c	2012-03-09 18:06:17.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/channel/channel84_main.c	2012-07-02 15:36:31.000000000 +0100
@@ -16,7 +16,7 @@
 
 #define CPU_LOAD
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru os21/test/src/tests/ics/channel/channel86_main.c os21/test/src/tests/ics/channel/channel86_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/channel/channel86_main.c	2012-03-09 18:06:17.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/channel/channel86_main.c	2012-07-02 15:36:32.000000000 +0100
@@ -16,7 +16,7 @@
 
 #define CPU_LOAD
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru os21/test/src/tests/ics/dyn/dyn10_main.c os21/test/src/tests/ics/dyn/dyn10_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/dyn/dyn10_main.c	2012-03-09 18:06:18.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/dyn/dyn10_main.c	2012-07-02 15:36:32.000000000 +0100
@@ -34,7 +34,7 @@
 #define TEST_MODULE	"ics/dyn/dyn"
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/ics/dyn/dyn11_main.c os21/test/src/tests/ics/dyn/dyn11_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/dyn/dyn11_main.c	2012-03-09 18:06:18.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/dyn/dyn11_main.c	2012-07-02 15:36:32.000000000 +0100
@@ -36,7 +36,7 @@
 #define MASTER		(SELF == 0)
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/ics/dyn/dyn12_main.c os21/test/src/tests/ics/dyn/dyn12_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/dyn/dyn12_main.c	2012-03-09 18:06:18.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/dyn/dyn12_main.c	2012-07-02 15:36:32.000000000 +0100
@@ -41,7 +41,7 @@
 #define MASTER		(SELF == 0)
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/ics/load/load00_main.c os21/test/src/tests/ics/load/load00_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/load/load00_main.c	2012-03-09 18:06:16.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/load/load00_main.c	2012-07-02 15:36:28.000000000 +0100
@@ -29,7 +29,7 @@
 #define CPU_MASK	(1UL << SELF) 	/* Only me */
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/ics/load/load01_main.c os21/test/src/tests/ics/load/load01_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/load/load01_main.c	2012-03-09 18:06:16.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/load/load01_main.c	2012-07-02 15:36:28.000000000 +0100
@@ -30,7 +30,7 @@
 
 /* Determines load filename */
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/ics/load/load10_main.c os21/test/src/tests/ics/load/load10_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/load/load10_main.c	2012-03-09 18:06:16.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/load/load10_main.c	2012-07-02 15:36:28.000000000 +0100
@@ -32,7 +32,7 @@
 #define REPS		10
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/ics/load/load82_main.c os21/test/src/tests/ics/load/load82_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/load/load82_main.c	2012-03-09 18:06:16.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/load/load82_main.c	2012-07-02 15:36:28.000000000 +0100
@@ -31,7 +31,7 @@
 #define MASTER_NAME	"MASTER"
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru os21/test/src/tests/ics/msg/msg11_main.c os21/test/src/tests/ics/msg/msg11_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/msg/msg11_main.c	2012-03-09 18:06:17.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/msg/msg11_main.c	2012-07-02 15:36:30.000000000 +0100
@@ -36,7 +36,7 @@
 #define PEER		(MASTER ? TEST_CPU : 0)
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/ics/msg/msg13_main.c os21/test/src/tests/ics/msg/msg13_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/msg/msg13_main.c	2012-03-09 18:06:17.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/msg/msg13_main.c	2012-07-02 15:36:29.000000000 +0100
@@ -39,7 +39,7 @@
 #define PEER		(MASTER ? TEST_CPU : 0)
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/ics/msg/msg81_main.c os21/test/src/tests/ics/msg/msg81_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/msg/msg81_main.c	2012-03-09 18:06:17.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/msg/msg81_main.c	2012-07-02 15:36:29.000000000 +0100
@@ -35,7 +35,7 @@
 #define SELF		ics_cpuNum
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #else
diff -Nru os21/test/src/tests/ics/msg/msg83_main.c os21/test/src/tests/ics/msg/msg83_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/msg/msg83_main.c	2012-03-09 18:06:17.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/msg/msg83_main.c	2012-07-02 15:36:30.000000000 +0100
@@ -36,7 +36,7 @@
 
 /* #define CPU_MASK	ics_cpuMask */
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #else
diff -Nru os21/test/src/tests/ics/msg/msg84_main.c os21/test/src/tests/ics/msg/msg84_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/msg/msg84_main.c	2012-03-09 18:06:17.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/msg/msg84_main.c	2012-07-02 15:36:30.000000000 +0100
@@ -37,7 +37,7 @@
 
 /* #define CPU_MASK	ics_cpuMask */
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #else
diff -Nru os21/test/src/tests/ics/perf/channel10_main.c os21/test/src/tests/ics/perf/channel10_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/perf/channel10_main.c	2012-03-09 18:06:18.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/perf/channel10_main.c	2012-07-02 15:36:33.000000000 +0100
@@ -27,7 +27,7 @@
 #define TEST			"ics/perf/channel10"
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/ics/perf/osbench10_main.c os21/test/src/tests/ics/perf/osbench10_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/perf/osbench10_main.c	2012-03-09 18:06:18.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/perf/osbench10_main.c	2012-07-02 15:36:33.000000000 +0100
@@ -22,7 +22,7 @@
 #define NSEC		1000*USEC
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/ics/perf/port80_main.c os21/test/src/tests/ics/perf/port80_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/perf/port80_main.c	2012-03-09 18:06:18.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/perf/port80_main.c	2012-07-02 15:36:33.000000000 +0100
@@ -42,7 +42,7 @@
 #define CPU_NAME		ics_cpu_name(ics_cpuNum)
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru os21/test/src/tests/ics/watchdog/watchdog81_main.c os21/test/src/tests/ics/watchdog/watchdog81_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/watchdog/watchdog81_main.c	2012-03-09 18:06:17.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/watchdog/watchdog81_main.c	2012-07-02 15:36:29.000000000 +0100
@@ -36,7 +36,7 @@
 #define REPS		10
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru os21/test/src/tests/ics/watchdog/watchdog82_main.c os21/test/src/tests/ics/watchdog/watchdog82_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/watchdog/watchdog82_main.c	2012-03-09 18:06:17.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/watchdog/watchdog82_main.c	2012-07-02 15:36:29.000000000 +0100
@@ -33,7 +33,7 @@
 #define REPS		10
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru os21/test/src/tests/ics/watchdog/watchdog83_main.c os21/test/src/tests/ics/watchdog/watchdog83_main.c
--- multicom-4.0.6/os21/test/src/tests/ics/watchdog/watchdog83_main.c	2012-03-09 18:06:17.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/ics/watchdog/watchdog83_main.c	2012-07-02 15:36:29.000000000 +0100
@@ -33,7 +33,7 @@
 #define REPS		10
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru os21/test/src/tests/mme/benchmark/benchmark10_main.c os21/test/src/tests/mme/benchmark/benchmark10_main.c
--- multicom-4.0.6/os21/test/src/tests/mme/benchmark/benchmark10_main.c	2012-03-09 18:06:18.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/mme/benchmark/benchmark10_main.c	2012-07-02 15:36:34.000000000 +0100
@@ -30,7 +30,7 @@
 
 #define TEST			"mme/benchmark/benchmark10"
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
@@ -53,6 +53,7 @@
 #define TRANSFORMER    "mme.benchmark"
 
 #if defined __linux__ && defined __KERNEL__
+#include <asm/io.h>		/* ioremap() etc */
 #define HIGH_PRECISION long /* this is good enough for LKM since HZ is small */
 #else
 #define HIGH_PRECISION double
@@ -66,6 +67,19 @@
 
 #if defined(CONF_MASTER)
 
+#ifndef ioremap_cache
+/* XXXX What can we do in this case ? */
+#if defined (__arm__)
+#define ioremap_cache ioremap_cached
+#else
+#define ioremap_cache ioremap
+#endif
+#endif
+extern ICS_ERROR ics_os_virt2phys (ICS_VOID *vaddr, ICS_OFFSET *paddrp, ICS_MEM_FLAGS *mflagsp);
+#if defined (__arm__)
+extern void set_iounmap_nonlazy(void);
+#endif
+struct bpa2_part *bpa2_partition=NULL; 
 static OS_SIGNAL callbackReceived;
 
 static void TransformerCallback(MME_Event_t Event, MME_Command_t *CallbackData, void *UserData)
@@ -120,28 +134,83 @@
 
 #if defined(__linux__) && defined(__KERNEL__) 
 void* big_malloc(size_t size) {
-    void* pAddr;
+   void* pAddr;
+   unsigned long addr;
+   unsigned long npages;
+   char *bigphys_part   = "bigphysarea";
 #if defined(__sh__) || defined(__arm__)
     if( size >= (PAGE_SIZE * 4) )
-	pAddr = (void *)bigphysarea_alloc( size );
+    {
+    		 bpa2_partition = bpa2_find_part(bigphys_part);
+    		 if (bpa2_partition)
+       {
+          npages = ((size-1)/PAGE_SIZE)+1;
+         	addr = bpa2_alloc_pages(bpa2_partition, npages,PAGE_SIZE,GFP_KERNEL);
+         	if (!addr)
+	         {
+            printf("%s:%d Failed bpa2_alloc_pages  memory addr@%p npages %d\n",__FUNCTION__,__LINE__,addr, npages);
+       	    return NULL;
+          }
+         	/* Always map memory CACHED */
+          pAddr = ioremap_cache(addr, npages*PAGE_SIZE);
+	
+        	 if (pAddr == NULL)
+	            printf("%s:%d Failed to map contig memory @ %lx size %d\n",__FUNCTION__,__LINE__,pAddr, size);
+       }
+	      else
+          pAddr = (void *)bigphysarea_alloc( size );
+    }
     else
 #endif
-	pAddr = (void *)kmalloc( size, GFP_KERNEL );
+       pAddr = (void *)kmalloc( size, GFP_KERNEL );
+       if (pAddr == NULL)
+          printf("%s:%d memory pAddr (%p) size %d\n",__FUNCTION__,__LINE__,pAddr, size);
     return pAddr;
 }
 
 
 void big_free(void* addr) {
 #if defined(__sh__) || defined(__arm__)
-    unsigned long  Base, Size;
-    unsigned long  Address = (unsigned long)addr;
+   unsigned long  Base, Size;
+   unsigned long  Address = (unsigned long)addr;
 
-    bigphysarea_memory( &Base, &Size );
-    if( (Address >= Base) && (Address < (Base + Size)) )
-        bigphysarea_free_pages((void*)addr);
-    else
+ 		if (bpa2_partition)
+   {
+     	ICS_ERROR     err;
+      ICS_MEM_FLAGS mflags;
+      ICS_OFFSET paddr;
+
+     	/* First need to convert vaddr back to phys */
+      err = ics_os_virt2phys(addr,&paddr,&mflags);
+      bpa2_memory(bpa2_partition,&Base, &Size );
+      if( (paddr >= Base) && (paddr < (Base + Size)) )
+      {
+
+#if defined (__arm__)
+         /* Call before iounmap(), if you want vm_area_struct's to be freed immediately.  */
+         /* Check kernel file vmalloc.c, if it exports the symbol "set_iounmap_nonlazy". */
+#ifndef DISABLE_IOUNMAP_NONLAZY
+         set_iounmap_nonlazy();
+#endif
+#endif
+
+     	   /* Now unmap vaddr space */
+    	    iounmap(addr);
+
+    	    if (err == ICS_SUCCESS)
+	           bpa2_free_pages(bpa2_partition, paddr);
+         return;
+      }
+   }
+    /* May be meomory is allocated from old legacy bigphyarea or from kmalloc area. */
+   {
+      bigphysarea_memory( &Base, &Size );
+      if( (Address >= Base) && (Address < (Base + Size)) )
+         bigphysarea_free_pages((void*)addr);
+      else
 #endif
-        free(addr);
+         free(addr);
+   }
 }
 
 #else
diff -Nru os21/test/src/tests/mme/buffercontent/buffercontent10_main.c os21/test/src/tests/mme/buffercontent/buffercontent10_main.c
--- multicom-4.0.6/os21/test/src/tests/mme/buffercontent/buffercontent10_main.c	2012-03-09 18:06:18.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/mme/buffercontent/buffercontent10_main.c	2012-07-02 15:36:34.000000000 +0100
@@ -23,7 +23,7 @@
 #define TEST			"mme/buffercontent/buffercontent10"
 #endif
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
@@ -54,6 +54,7 @@
 
 #if defined __linux__ && defined __KERNEL__
 #include <linux/mm.h>
+#include <asm/io.h>		/* ioremap() etc */
 #define HIGH_PRECISION long /* this is good enough for LKM since HZ is small */
 #else
 #include <stdlib.h>
@@ -133,6 +134,19 @@
 
 #if defined(CONF_MASTER)
 
+#ifndef ioremap_cache
+/* XXXX What can we do in this case ? */
+#if defined (__arm__)
+#define ioremap_cache ioremap_cached
+#else
+#define ioremap_cache ioremap
+#endif
+#endif
+extern ICS_ERROR ics_os_virt2phys (ICS_VOID *vaddr, ICS_OFFSET *paddrp, ICS_MEM_FLAGS *mflagsp);
+#if defined (__arm__)
+extern void set_iounmap_nonlazy(void);
+#endif
+struct bpa2_part *bpa2_partition=NULL; 
 static OS_SIGNAL callbackReceived;
 volatile int callbackCount=0;
 static void TransformerCallback(MME_Event_t Event, MME_Command_t *CallbackData, void *UserData)
@@ -151,28 +165,83 @@
 
 #if defined(__linux__) && defined(__KERNEL__) 
 void* big_malloc(size_t size) {
-    void* pAddr;
+   void* pAddr;
+   unsigned long addr;
+   unsigned long npages;
+   char *bigphys_part   = "bigphysarea";
 #if defined(__sh__) || defined(__arm__)
     if( size >= (PAGE_SIZE * 4) )
-        pAddr = (void *)bigphysarea_alloc( size );
+    {
+    		 bpa2_partition = bpa2_find_part(bigphys_part);
+    		 if (bpa2_partition)
+       {
+          npages = ((size-1)/PAGE_SIZE)+1;
+         	addr = bpa2_alloc_pages(bpa2_partition, npages,PAGE_SIZE,GFP_KERNEL);
+         	if (!addr)
+	         {
+            printf("%s:%d Failed bpa2_alloc_pages  memory addr@%p npages %d\n",__FUNCTION__,__LINE__,addr, npages);
+       	    return NULL;
+          }
+         	/* Always map memory CACHED */
+          pAddr = ioremap_cache(addr, npages*PAGE_SIZE);
+	
+        	 if (pAddr == NULL)
+	            printf("%s:%d Failed to map contig memory @ %lx size %d\n",__FUNCTION__,__LINE__,pAddr, size);
+       }
+	      else
+          pAddr = (void *)bigphysarea_alloc( size );
+    }
     else
 #endif
-        pAddr = (void *)kmalloc( size, GFP_KERNEL );
+       pAddr = (void *)kmalloc( size, GFP_KERNEL );
+       if (pAddr == NULL)
+          printf("%s:%d memory pAddr (%p) size %d\n",__FUNCTION__,__LINE__,pAddr, size);
     return pAddr;
 }
 
 
 void big_free(void* addr) {
 #if defined(__sh__) || defined(__arm__)
-    unsigned long  Base, Size;
-    unsigned long  Address = (unsigned long)addr;
+   unsigned long  Base, Size;
+   unsigned long  Address = (unsigned long)addr;
 
-    bigphysarea_memory( &Base, &Size );
-    if( (Address >= Base) && (Address < (Base + Size)) )
-        bigphysarea_free_pages((void*)addr);
-    else
+ 		if (bpa2_partition)
+   {
+     	ICS_ERROR     err;
+      ICS_MEM_FLAGS mflags;
+      ICS_OFFSET paddr;
+
+     	/* First need to convert vaddr back to phys */
+      err = ics_os_virt2phys(addr,&paddr,&mflags);
+      bpa2_memory(bpa2_partition,&Base, &Size );
+      if( (paddr >= Base) && (paddr < (Base + Size)) )
+      {
+
+#if defined (__arm__)
+         /* Call before iounmap(), if you want vm_area_struct's to be freed immediately.  */
+         /* Check kernel file vmalloc.c, if it exports the symbol "set_iounmap_nonlazy". */
+#ifndef DISABLE_IOUNMAP_NONLAZY
+         set_iounmap_nonlazy();
+#endif
+#endif
+
+     	   /* Now unmap vaddr space */
+    	    iounmap(addr);
+
+    	    if (err == ICS_SUCCESS)
+	           bpa2_free_pages(bpa2_partition, paddr);
+         return;
+      }
+   }
+    /* May be meomory is allocated from old legacy bigphyarea or from kmalloc area. */
+   {
+      bigphysarea_memory( &Base, &Size );
+      if( (Address >= Base) && (Address < (Base + Size)) )
+         bigphysarea_free_pages((void*)addr);
+      else
 #endif
-        free(addr);
+         free(addr);
+   }
 }
 
 #else
diff -Nru os21/test/src/tests/mme/kill/kill10_main.c os21/test/src/tests/mme/kill/kill10_main.c
--- multicom-4.0.6/os21/test/src/tests/mme/kill/kill10_main.c	2012-03-09 18:06:19.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/mme/kill/kill10_main.c	2012-07-02 15:36:36.000000000 +0100
@@ -26,7 +26,7 @@
 
 #define TEST			"mme/kill/kill10"
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/mme/limits/limits10_main.c os21/test/src/tests/mme/limits/limits10_main.c
--- multicom-4.0.6/os21/test/src/tests/mme/limits/limits10_main.c	2012-03-09 18:06:18.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/mme/limits/limits10_main.c	2012-07-02 15:36:35.000000000 +0100
@@ -32,7 +32,7 @@
 
 #define TEST			"mme/limits/limits10"
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/mme/notify/notify10_main.c os21/test/src/tests/mme/notify/notify10_main.c
--- multicom-4.0.6/os21/test/src/tests/mme/notify/notify10_main.c	2012-03-09 18:06:18.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/mme/notify/notify10_main.c	2012-07-02 15:36:35.000000000 +0100
@@ -34,7 +34,7 @@
 
 #define TEST			"mme/notify/notify10"
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/mme/params/params10_main.c os21/test/src/tests/mme/params/params10_main.c
--- multicom-4.0.6/os21/test/src/tests/mme/params/params10_main.c	2012-03-09 18:06:19.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/mme/params/params10_main.c	2012-07-02 15:36:35.000000000 +0100
@@ -29,7 +29,7 @@
 
 #define TEST			"mme/params/params10"
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/mme/perf/perf10_main.c os21/test/src/tests/mme/perf/perf10_main.c
--- multicom-4.0.6/os21/test/src/tests/mme/perf/perf10_main.c	2012-03-09 18:06:18.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/mme/perf/perf10_main.c	2012-07-02 15:36:33.000000000 +0100
@@ -19,7 +19,7 @@
 
 #define TEST			"mme/perf/perf10"
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/mme/perf/perf11_main.c os21/test/src/tests/mme/perf/perf11_main.c
--- multicom-4.0.6/os21/test/src/tests/mme/perf/perf11_main.c	2012-03-09 18:06:18.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/mme/perf/perf11_main.c	2012-07-02 15:36:33.000000000 +0100
@@ -19,7 +19,7 @@
 
 #define TEST			"mme/perf/perf11"
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/mme/register/register10_main.c os21/test/src/tests/mme/register/register10_main.c
--- multicom-4.0.6/os21/test/src/tests/mme/register/register10_main.c	2012-03-09 18:06:19.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/mme/register/register10_main.c	2012-07-02 15:36:35.000000000 +0100
@@ -32,7 +32,7 @@
 
 #define TEST			"mme/register/register10"
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
  #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/mme/simple/host.c os21/test/src/tests/mme/simple/host.c
--- multicom-4.0.6/os21/test/src/tests/mme/simple/host.c	2012-03-09 18:06:19.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/mme/simple/host.c	2012-07-02 15:36:35.000000000 +0100
@@ -124,6 +124,8 @@
 	SimpleParamsInit_t simpleParamsInit;
 	SimpleParamsInit_t simpleParamsStatus;
 	int i = 0;
+    ICS_REGION rgn; 
+    ICS_ERROR err; 
 
 	/* bring up the API */
 	harness_boot();
@@ -137,6 +139,17 @@
 	VERBOSE(printf(MACHINE "ics_cpu_lookup(audio1)=%d\n",ics_cpu_lookup("audio1")));
 	VERBOSE(printf(MACHINE "ics_cpu_lookup(video1)=%d\n",ics_cpu_lookup("video1")));
 
+    /* user space region add/remove test*/
+    err = ICS_region_add(NULL,0x82000000,(32*1024),ICS_CACHED,CPU_MASK,&rgn);
+    VERBOSE(printf(MACHINE "CACHED::ICS_region_add()=%s\n",ics_err_str(err)));
+    err = ICS_region_remove(rgn,0);
+    VERBOSE(printf(MACHINE "ICS_region_remove()=%s\n",ics_err_str(err)));
+
+    err = ICS_region_add(NULL,0x82000000,(32*1024),ICS_UNCACHED,CPU_MASK,&rgn);
+    VERBOSE(printf(MACHINE "UNCACHED::ICS_region_add()=%s\n",ics_err_str(err)));
+    err = ICS_region_remove(rgn,0);
+    VERBOSE(printf(MACHINE "ICS_region_remove()=%s\n",ics_err_str(err)));
+
 	MME(Init());
 #ifdef USERMODE
 	MME_E(MME_NOT_IMPLEMENTED, DeregisterTransport(TRANSPORT_NAME));
diff -Nru os21/test/src/tests/mme/simple/simple10_main.c os21/test/src/tests/mme/simple/simple10_main.c
--- multicom-4.0.6/os21/test/src/tests/mme/simple/simple10_main.c	2012-03-09 18:06:19.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/mme/simple/simple10_main.c	2012-07-02 15:36:36.000000000 +0100
@@ -32,7 +32,7 @@
 
 #define TEST			"mme/simple/simple10"
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/mme/transformer/trans10_main.c os21/test/src/tests/mme/transformer/trans10_main.c
--- multicom-4.0.6/os21/test/src/tests/mme/transformer/trans10_main.c	2012-03-09 18:06:19.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/mme/transformer/trans10_main.c	2012-07-02 15:36:36.000000000 +0100
@@ -21,7 +21,7 @@
 #define TEST			"mme/transformer/trans10"
 
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    2
 #else
 #define TEST_CPU	 1
diff -Nru os21/test/src/tests/mme/transformer/trans80_main.c os21/test/src/tests/mme/transformer/trans80_main.c
--- multicom-4.0.6/os21/test/src/tests/mme/transformer/trans80_main.c	2012-03-09 18:06:19.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/mme/transformer/trans80_main.c	2012-07-02 15:36:36.000000000 +0100
@@ -25,7 +25,7 @@
 
 /* #define DEBUG */
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
diff -Nru os21/test/src/tests/mme/transformer/trans81_main.c os21/test/src/tests/mme/transformer/trans81_main.c
--- multicom-4.0.6/os21/test/src/tests/mme/transformer/trans81_main.c	2012-03-09 18:06:19.000000000 +0000
+++ multicom-4.0.6/os21/test/src/tests/mme/transformer/trans81_main.c	2012-07-02 15:36:36.000000000 +0100
@@ -24,7 +24,7 @@
 
 #define CPU_LOAD
 /* Avoid RT firmware loading */
-#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415)
+#if defined (__stxh415__) || defined (CONFIG_MACH_STM_STIH415) || defined (__fli7610__) || defined (CONFIG_MACH_STM_FLI7610)
 #define TEST_CPU    0x7C /* Skipping RT */
 #define CPU_MASK		((1UL << 0) | (TEST_CPU ))	/* cpu 0 & TEST_CPU */
 #endif
